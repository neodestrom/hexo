<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>1066年 诺曼征服</title>
    <link href="/2023/08/31/1066%E5%B9%B4%20%E8%AF%BA%E6%9B%BC%E5%BE%81%E6%9C%8D/"/>
    <url>/2023/08/31/1066%E5%B9%B4%20%E8%AF%BA%E6%9B%BC%E5%BE%81%E6%9C%8D/</url>
    
    <content type="html"><![CDATA[<p>1066 年秋天，法国诺曼底公爵威廉远征英格兰，成为英国国王。</p><p>诺曼底公国维京人后裔建立，名义上属于法王，但是不太听从法王的命令。威廉作为诺曼公爵的私生子，继承爵位后，受到各方排挤下成长起来，成为有野心有手腕的公爵。</p><p>另外，威廉也是英王爱德华的表弟，有继位的资格，同时他也在英国皇后的弟弟哈罗德落难的时候帮助过他，哈罗德承诺会为他献上皇位。</p><p>后来英王爱德华由于王室凋零，最后和贤人会商量，让哈罗德继位。这一举动让威廉气炸，此时刚好法王内部内乱，威廉一度想北上英国，但是北风一直把他的舰队堵在诺曼底海岸。</p><p>后来挪威国王哈德拉德也因为和英王有血缘关系，也来争夺王位，他得到哈罗德一个弟弟的帮助，乘着北风南下，但是在准备充分的英军反击下被反杀了，挪威国王也被杀死。</p><p>随后3-4天诺曼底公爵从南边来了，由于英国国王4天跑了300公里来迎战，导致士兵疲惫，以及这个时候他还不能很好调动起贵族，就这样在黑斯廷斯附近的山地上，双方短兵相接，随后诺曼底公爵击败了英军，威廉成为了新任国王。</p><p>不过威廉在位期间，施行严酷镇压，屠杀很多平民，没收贵族土地。</p>]]></content>
    
    
    <categories>
      
      <category>阅读</category>
      
      <category>全历史</category>
      
      <category>历史</category>
      
      <category>英国史</category>
      
    </categories>
    
    
    <tags>
      
      <tag>article</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1167年 牛津大学和剑桥大学</title>
    <link href="/2023/08/31/1167%E5%B9%B4%20%E7%89%9B%E6%B4%A5%E5%A4%A7%E5%AD%A6%E5%92%8C%E5%89%91%E6%A1%A5%E5%A4%A7%E5%AD%A6/"/>
    <url>/2023/08/31/1167%E5%B9%B4%20%E7%89%9B%E6%B4%A5%E5%A4%A7%E5%AD%A6%E5%92%8C%E5%89%91%E6%A1%A5%E5%A4%A7%E5%AD%A6/</url>
    
    <content type="html"><![CDATA[<p>英国国王亨利二世和法王吵架，导致国王把在巴黎的学者全部叫回国，汇集到了一个叫牛津的地方，建立了牛津大学。</p><p>本来国王和教会都很支持牛津大学，但随后国王和教会发生了争端，而争端的导火索来源于学生和市民之间的冲突，两个学生练习射箭射中了一名女子出了人命，当地村民十分愤怒，最后国王约翰准许绞死了这两名学生。</p><p>因为牛津大学培养了许多教士，这一行为算是间接打击了教会。这些年间，教会和国王一直争夺权力，最后由于种种原因，牛津大学停办了。随后一部分学生离开牛津大学，创办了剑桥大学。</p><p>后面宗教改革，牛津支持复兴天主教，剑桥则是新教，导致两所大学争锋相对，不过也培养了不少人才出来。</p>]]></content>
    
    
    <categories>
      
      <category>阅读</category>
      
      <category>全历史</category>
      
      <category>历史</category>
      
      <category>英国史</category>
      
    </categories>
    
    
    <tags>
      
      <tag>article</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1215年 失地王约翰的枷锁：《大宪章》</title>
    <link href="/2023/08/31/1215%E5%B9%B4%20%E5%A4%B1%E5%9C%B0%E7%8E%8B%E7%BA%A6%E7%BF%B0%E7%9A%84%E6%9E%B7%E9%94%81%EF%BC%9A%E3%80%8A%E5%A4%A7%E5%AE%AA%E7%AB%A0%E3%80%8B/"/>
    <url>/2023/08/31/1215%E5%B9%B4%20%E5%A4%B1%E5%9C%B0%E7%8E%8B%E7%BA%A6%E7%BF%B0%E7%9A%84%E6%9E%B7%E9%94%81%EF%BC%9A%E3%80%8A%E5%A4%A7%E5%AE%AA%E7%AB%A0%E3%80%8B/</url>
    
    <content type="html"><![CDATA[<p>1199年查理一世去世，由他的弟弟约翰继位。约翰上位，为铲除皇位威胁，残酷杀害侄子们和其他贵族，在位期间对外战争屡屡失利而赋税大幅增加，同时又和主教产生矛盾，导致贵族反对。</p><p>1215年，约翰国王被迫签署《大宪章》，被限制了很多国王权力。</p>]]></content>
    
    
    <categories>
      
      <category>阅读</category>
      
      <category>全历史</category>
      
      <category>历史</category>
      
      <category>英国史</category>
      
    </categories>
    
    
    <tags>
      
      <tag>article</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1189年 狮心王传奇：第三次十字军东征</title>
    <link href="/2023/08/31/1189%E5%B9%B4%20%E7%8B%AE%E5%BF%83%E7%8E%8B%E4%BC%A0%E5%A5%87%EF%BC%9A%E7%AC%AC%E4%B8%89%E6%AC%A1%E5%8D%81%E5%AD%97%E5%86%9B%E4%B8%9C%E5%BE%81/"/>
    <url>/2023/08/31/1189%E5%B9%B4%20%E7%8B%AE%E5%BF%83%E7%8E%8B%E4%BC%A0%E5%A5%87%EF%BC%9A%E7%AC%AC%E4%B8%89%E6%AC%A1%E5%8D%81%E5%AD%97%E5%86%9B%E4%B8%9C%E5%BE%81/</url>
    
    <content type="html"><![CDATA[<p>1187年穆斯林领袖萨拉丁攻陷耶路撒冷。</p><p>随后，英国国王理查一世和法国国王以及神圣罗马帝国皇帝结盟出征。但是，神罗皇帝半路掉水里溺死了，就没有东征。</p><p>英国国王查理一世之所以想要西征，是因为西征可以掠夺财富，还可以笼络人心，特别是查理一世的上位是因为他的父亲立了小儿子为王储，而联合法王发动了叛乱从而上位的，上位不久后他的父亲亨利二世也被郁郁而终。</p><p>英国国王选择的海路进攻，一路上收复很多小国，其中就有塞浦路斯岛，这个是一个很重要的跳板岛。随后3周拿下了法国国王腓力二世50多天没拿下的阿卡城，不过由于两个国王合不来，分配战利品的时候双方吵个不停，法国国王索性回去了。这样他就成为了十字军的领袖，朝耶路撒冷进军。</p><p>军队始终靠近海岸，一边收到补给，萨拉丁的骚扰战术未能取得大的成效。便加强了城内防守。双方在攻城战里，打的你来我往，并彼此欣赏。最后通过和谈的方式停战，订立了《雅法合约》，基督徒保有先前收复的土地，也可以进入耶路撒冷，基督国家和穆斯林国家互开商路，双方停战5年。</p><p>双方签订条约后，查理一世回国因为遭遇海难，改走陆路。但被奥地利公爵抓了起来，因为阿卡城被破的时候奥地利公爵率先升起自己国家的旗帜，但是理查却觉得他功勋不足就把旗帜扯碎扔掉，这让他怀恨在心，随后奥地利公爵就将他交给了新的罗马皇帝。新的罗马皇帝将其当作人质，让英格兰人民交付赎金，差不多是年收入的四分之一，而后查理才被救回。他回去后，很快就平定了他他弟弟约翰在英国掀起的叛乱。</p><p>回国后，英国臣民热烈欢迎查理，即便他再次之前只来过英国一次，这一次也只呆了2个月就又回到了法国，查理也不会说英文，他也只是把英国当成聚宝盆，通过卖官位来支持战争，但是人民仍然敬爱他，也许是因为他长期居住在外地，英国由大臣管理，而他战无不胜，人们把他当成荣耀而又遥远的传奇。</p>]]></content>
    
    
    <categories>
      
      <category>阅读</category>
      
      <category>全历史</category>
      
      <category>历史</category>
      
      <category>英国史</category>
      
    </categories>
    
    
    <tags>
      
      <tag>article</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1265年 孟福尔议会：现代议会的雏形</title>
    <link href="/2023/08/31/1265%E5%B9%B4%20%E5%AD%9F%E7%A6%8F%E5%B0%94%E8%AE%AE%E4%BC%9A%EF%BC%9A%E7%8E%B0%E4%BB%A3%E8%AE%AE%E4%BC%9A%E7%9A%84%E9%9B%8F%E5%BD%A2/"/>
    <url>/2023/08/31/1265%E5%B9%B4%20%E5%AD%9F%E7%A6%8F%E5%B0%94%E8%AE%AE%E4%BC%9A%EF%BC%9A%E7%8E%B0%E4%BB%A3%E8%AE%AE%E4%BC%9A%E7%9A%84%E9%9B%8F%E5%BD%A2/</url>
    
    <content type="html"><![CDATA[<p>1265年，英国权臣孟福尔召开议会，替代国王亨利三世处理国事，史称”孟福尔议会”，成为英国议会的雏形。</p><p>国王亨利三世继位的时候很小，所以为了寻求贵族支持，只能遵守大宪章。等他亲政的时候，他重用了法国那边的贵族，引起了国内贵族不满，同时他作战也是屡屡失败，还增加赋税，这就导致了贵族的反叛。</p><p>贵族强迫国王签署《牛津条约》建立一个议会制度，允许各类阶层的人商讨国事，国王表面答应，等钱到手后就撕毁条约，直接导致国王和贵族的战争，而后击败了国王，并召开两年的议会，但随后就被一些看不惯孟福尔的保守贵族联合太子爱德华，击败了孟福尔的军队，废除了条约。但议会制度还是保留了下来。</p>]]></content>
    
    
    <categories>
      
      <category>阅读</category>
      
      <category>全历史</category>
      
      <category>历史</category>
      
      <category>英国史</category>
      
    </categories>
    
    
    <tags>
      
      <tag>article</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1314年 华莱士领导苏格兰独立</title>
    <link href="/2023/08/31/1314%E5%B9%B4%20%E5%8D%8E%E8%8E%B1%E5%A3%AB%E9%A2%86%E5%AF%BC%E8%8B%8F%E6%A0%BC%E5%85%B0%E7%8B%AC%E7%AB%8B/"/>
    <url>/2023/08/31/1314%E5%B9%B4%20%E5%8D%8E%E8%8E%B1%E5%A3%AB%E9%A2%86%E5%AF%BC%E8%8B%8F%E6%A0%BC%E5%85%B0%E7%8B%AC%E7%AB%8B/</url>
    
    <content type="html"><![CDATA[<p>1290年 苏格兰女王去世没有继承人，爱德华一世傀儡一个国王，但是遭到苏格兰人反抗，索性他就挥师北上夺取了苏格兰王位。并开始了镇压各类反抗势力。</p><p>随后一年后，他离开苏格兰去往尼德兰，苏格兰的反抗斗争在全境兴起。其中，出生平民家庭的华莱士，通过偷袭伏击拼凑出了一只起义军，并且在斯特林设下埋伏以少胜多，全歼了英格兰的一只军队。</p><p>后来爱德华回来镇压叛乱，击败了华莱士的起义军，华莱士随后继续在敌后搞袭击，但是后来被抓住残忍杀害了。他死后十年，由布鲁斯率领的苏格兰人民，最后打赢了班诺克本战役，随后赢得了独立的地位。</p><p>华莱士的故事记录在《勇敢的心》电影里。</p><p>后来苏格兰并入英国，是因为英国人采用联姻等，使得合并成为可能。1603年，最终合并成为共主邦联。</p>]]></content>
    
    
    <categories>
      
      <category>阅读</category>
      
      <category>全历史</category>
      
      <category>历史</category>
      
      <category>英国史</category>
      
    </categories>
    
    
    <tags>
      
      <tag>article</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1284年 红龙的臣服：爱德华征服威尔士</title>
    <link href="/2023/08/31/1284%E5%B9%B4%20%E7%BA%A2%E9%BE%99%E7%9A%84%E8%87%A3%E6%9C%8D%EF%BC%9A%E7%88%B1%E5%BE%B7%E5%8D%8E%E5%BE%81%E6%9C%8D%E5%A8%81%E5%B0%94%E5%A3%AB/"/>
    <url>/2023/08/31/1284%E5%B9%B4%20%E7%BA%A2%E9%BE%99%E7%9A%84%E8%87%A3%E6%9C%8D%EF%BC%9A%E7%88%B1%E5%BE%B7%E5%8D%8E%E5%BE%81%E6%9C%8D%E5%A8%81%E5%B0%94%E5%A3%AB/</url>
    
    <content type="html"><![CDATA[<p>公元1284年，爱德华一世征服威尔士，颁布《威尔士法》，将威尔士纳入英国版图。</p><p>当英国忙着内乱的时候（亨利三世和贵族之间的斗争），圭尼德国王小卢埃林同亨利三世签订《蒙哥马利条约》，任威尔士亲王。但是卢埃林并没有遵守亲王纳贡的义务，导致爱德华对其出兵，随后卢埃林赶紧俯首称臣。并缴纳了欠的钱。</p><p>后续等爱德华同苏格兰人作战的时候，卢埃林又开始想要独立，占领了一个英国城堡后想要反叛，但是又被击败，并且卢埃林战死，弟弟也被砍头。后面威尔士人提出想要统治威尔士，需要满足，出生在威尔士，是贵族，说威尔士语，道德上纯洁无暇，随后爱德华一世将怀孕的妻子送到了威尔士，生下了王子，从此威尔士便并入英国。</p><p>1400年威尔士贵族欧文不满英王亨利四世，叛乱被击败。<br>1536年，英国通过《联合法案》彻底合并威尔士，统一政治和法律，统一英语为官方语言。</p>]]></content>
    
    
    <categories>
      
      <category>阅读</category>
      
      <category>全历史</category>
      
      <category>历史</category>
      
      <category>英国史</category>
      
    </categories>
    
    
    <tags>
      
      <tag>article</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1337年 百年战争</title>
    <link href="/2023/08/31/1337%E5%B9%B4%20%E7%99%BE%E5%B9%B4%E6%88%98%E4%BA%89/"/>
    <url>/2023/08/31/1337%E5%B9%B4%20%E7%99%BE%E5%B9%B4%E6%88%98%E4%BA%89/</url>
    
    <content type="html"><![CDATA[<p>1328年，法王查理四世去世，爱德华三世是法王外甥，想继承王位但被拒绝。</p><p>1337年到1453年，因为王位继承和领土争端，英法两国爆发了一百多年的战争，史称 百年战争。</p><p>开战前，英国由于诺曼征服，英王实际是法国诺曼底和后来安茹的封臣，同法王高层是亲戚，并掌控着诺曼底这边的封地。法国这边则是一直想要寻求法国领土的统一。</p><p>由于法国这边三级议会拒绝了爱德华三世的继承王位的诉求，导致爱德华三世征集部队，进攻法国。进攻很成功，有1353年的普瓦提埃战役大捷，6000英军击败两万法军，并夺下加莱等地。随后，法国在1369年发动反攻，打了十年夺回了部分领土。随后20-30年双方政局不稳，暂且停战。</p><p>等英国这边政局稳定后，皇位来到了亨利五世，又开始进攻法国，并且夺取了巴黎等大片领地。签署了条约让法国承认，并且赔了公主。</p><p>英国人不愿见好就收，在1428年进攻奥尔良要塞的时候，法国人战斗意志被激发出来，出了贞德，在她的带领下法军扭转了形式，虽然英国人随后抓住并处死了贞德，但是也无法阻挡法军转败为胜的局势，随后法军收复了包含诺曼底在内的英国大部分领地，英国就只剩一个加莱了。</p><p>1453年，双方签署条约，随后虽然有小规模的冲突，但大规模的战役没有，至此百年战争结束。英国丢失了几乎所有在法国的领土，但是双方再次终于形成了民族意识。</p>]]></content>
    
    
    <categories>
      
      <category>阅读</category>
      
      <category>全历史</category>
      
      <category>历史</category>
      
      <category>英国史</category>
      
    </categories>
    
    
    <tags>
      
      <tag>article</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1348年 黑死病来袭</title>
    <link href="/2023/08/31/1348%E5%B9%B4%20%E9%BB%91%E6%AD%BB%E7%97%85%E6%9D%A5%E8%A2%AD/"/>
    <url>/2023/08/31/1348%E5%B9%B4%20%E9%BB%91%E6%AD%BB%E7%97%85%E6%9D%A5%E8%A2%AD/</url>
    
    <content type="html"><![CDATA[<p>14世纪初期，中亚小城出现瘟疫，并向西扩散，1346年出现在黑海，1348年降临在伦敦，夺走了伦敦一半的人口。</p><p>瘟疫到来的时候，伦敦本身卫生条件不好，这就导致了英国这边的瘟疫很强。<br>另外，瘟疫来临后，当时的欧洲人都认为这场瘟疫是神罚，这就导致很多教士举行仪式祈求得到上帝的原谅，不过这些举动并未阻止瘟疫的蔓延，反而导致教士人士感染瘟疫死伤惨重。</p><p>人民只能求助其他手段，例如医生放血，医生治疗瘟疫，也通过烧伤口的溃疡等手段治疗。这些虽然成效有限，但是也促使医生成为独立职业发展。</p><p>另外，这场灾难也激发了人们反犹运动，因为犹太人原本在宗教和金融上不讨喜，再加之从事经商到处移动，导致人民把他们当成瘟疫的罪魁祸首，犹太人自此被驱赶或者被屠杀。</p><p>本来苏格兰人，看到英国人瘟疫蔓延觉得机会来了，结果正当集结完军队进攻英国，结果也感染了瘟疫。</p><p>这场持续了7、8年的瘟疫，结局和它来的时候一样，谁也不知道为什么就突然消失了。</p>]]></content>
    
    
    <categories>
      
      <category>阅读</category>
      
      <category>全历史</category>
      
      <category>历史</category>
      
      <category>英国史</category>
      
    </categories>
    
    
    <tags>
      
      <tag>article</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1348年 嘉德骑士：英国贵族体制的成型</title>
    <link href="/2023/08/31/1348%E5%B9%B4%20%E5%98%89%E5%BE%B7%E9%AA%91%E5%A3%AB%EF%BC%9A%E8%8B%B1%E5%9B%BD%E8%B4%B5%E6%97%8F%E4%BD%93%E5%88%B6%E7%9A%84%E6%88%90%E5%9E%8B/"/>
    <url>/2023/08/31/1348%E5%B9%B4%20%E5%98%89%E5%BE%B7%E9%AA%91%E5%A3%AB%EF%BC%9A%E8%8B%B1%E5%9B%BD%E8%B4%B5%E6%97%8F%E4%BD%93%E5%88%B6%E7%9A%84%E6%88%90%E5%9E%8B/</url>
    
    <content type="html"><![CDATA[<p>1348年爱德华三世设立嘉德勋章，并在第二年建立起骑士团，嘉德勋位成为英国荣誉制度的重要基石。</p><p>这枚勋章图案来自于一场胜利后，一位女伯爵跳舞时吊袜带掉了下来，爱德华则捡了起来并系到了自己腿上，还说“心怀邪念者蒙羞”。爱德华三世这里是效仿英雄圣乔治给骑士系吊袜带，总之图案就这么确定了。</p><p>这个勋章最初是颁发给嘉德骑士团。嘉德骑士团是因为爱德华三世打百年战争，由于战争太残酷没有留下贵族活口导致难以和法国人斡旋，另外也是议会不给钱。他就设置骑士团，这样可以间接约束膨胀的贵族势力。</p>]]></content>
    
    
    <categories>
      
      <category>阅读</category>
      
      <category>全历史</category>
      
      <category>历史</category>
      
      <category>英国史</category>
      
    </categories>
    
    
    <tags>
      
      <tag>article</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1381年 瓦特·泰勒起义</title>
    <link href="/2023/08/31/1381%E5%B9%B4%20%E7%93%A6%E7%89%B9%C2%B7%E6%B3%B0%E5%8B%92%E8%B5%B7%E4%B9%89/"/>
    <url>/2023/08/31/1381%E5%B9%B4%20%E7%93%A6%E7%89%B9%C2%B7%E6%B3%B0%E5%8B%92%E8%B5%B7%E4%B9%89/</url>
    
    <content type="html"><![CDATA[<p>1348年到1350年黑死病杀死大量劳动力，并且英国为了维护贵族利益，出台了《劳工法案》规定农民工资维持到30年前水平，不准涨价。</p><p>此举激起了农民极度不满，当时还有个教会主张平等，这个时候瓦特泰勒就率领农民军起义，打着清君侧的名号，攻入伦敦想要国王铲除贪官。</p><p>年幼的国王查理二世躲进了伦敦塔，赶紧颁布敕令，废除了农奴制，并赦免了这次参加暴乱的人。但是农民军坚持杀死兰开斯特公爵和一些大臣，前者就是负责征税的。后面国王同起义军谈判，过程中杀死了起义军首领瓦特泰勒，随后国王承诺会满足一些要求，然后起义军因为群龙无首就散了。</p>]]></content>
    
    
    <categories>
      
      <category>阅读</category>
      
      <category>全历史</category>
      
      <category>历史</category>
      
      <category>英国史</category>
      
    </categories>
    
    
    <tags>
      
      <tag>article</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1385年 乔叟写作故事集</title>
    <link href="/2023/08/31/1385%E5%B9%B4%20%E4%B9%94%E5%8F%9F%E5%86%99%E4%BD%9C%E6%95%85%E4%BA%8B%E9%9B%86/"/>
    <url>/2023/08/31/1385%E5%B9%B4%20%E4%B9%94%E5%8F%9F%E5%86%99%E4%BD%9C%E6%95%85%E4%BA%8B%E9%9B%86/</url>
    
    <content type="html"><![CDATA[<p>乔叟是英王爱德华三世三王子的侍从，最开始再英法百年战争的时候，踏入欧洲大陆，但不幸被俘虏，被赎回后，由于爱德华欣赏起才能，他便代表爱德华四处出使欧洲，这个时间段了解到很多欧洲的故事，他把这些故事翻译成英文带回了英国。</p><p>他三十多岁后，成了管理员，再1385年还被选为骑士代表进了议会。</p><p>这个时候英国正处动荡时期，爱德华和他儿子相继去世，王族争夺王位，百年战争也暂时停止。</p><p>这个时候他就开始写作英国的本土故事，写成了坎特伯雷故事集。这个奠定了英国诗歌文学的基础，结束了英语文学的蒙昧时期。</p>]]></content>
    
    
    <categories>
      
      <category>阅读</category>
      
      <category>全历史</category>
      
      <category>历史</category>
      
      <category>英国史</category>
      
    </categories>
    
    
    <tags>
      
      <tag>article</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1455年 红白玫瑰战争</title>
    <link href="/2023/08/31/1455%E5%B9%B4%20%E7%BA%A2%E7%99%BD%E7%8E%AB%E7%91%B0%E6%88%98%E4%BA%89/"/>
    <url>/2023/08/31/1455%E5%B9%B4%20%E7%BA%A2%E7%99%BD%E7%8E%AB%E7%91%B0%E6%88%98%E4%BA%89/</url>
    
    <content type="html"><![CDATA[<p>百年战争时期，英国贵族在战争中不断扩张权力，又因为兰开斯特家族亨利6世丢掉了英国在法国的大部分土地，导致其不得民心。</p><p>在此期间英国还有一个约克家族,由于兰开斯特家族的亨利6世本身精神不太正常，这就导致一直以来由约克家族的理查摄政。两家本身冲突不断，不过后来也通过议会同意由约克家族继承王位。</p><p>这个消息被亨利6世的王后玛格丽特知道了，她坚决捍卫他丈夫的王权，并集结了一波军队同约克家族作战，不过最初6年屡战屡败，但是后来杀死了约克公爵，但是约克家族的爱德华王子早先回到伦敦继承王位，并且在之后的陶顿战役中大败兰开斯特家族，王后等兰开斯特家族的贵族被迫流亡法国。</p><p>但是爱德华四世得到王位后，同沃里克公爵由于联姻问题产生了矛盾，导致沃里克公爵联合海外的王后和法王，一同对爱德华四世施压，最终废黜了爱德华四世，亨利6世回到了王位。</p><p>但短短一年，爱德华四世靠着妻子的势力，东山再起。杀了沃里克伯爵，在战场中玛格丽特王子战死，玛格丽特王后被生擒，不久回到娘家后郁郁而终。随后爱德华开启了相对稳定的一段时期。</p><p>到了1483年，爱德华四世去世。他的弟弟理查三世登上王位，并且残忍杀害了爱德华这边的血脉，由于其是篡位得到了皇位，所以其声望不好。</p><p>后来兰开斯特的旁系郡主玛格丽特，联络约克家族的反对者，并让流亡法国的儿子回来，1485年在博斯沃思平原展开决战，在战斗中，虽然理查三世很勇猛但是由于其亲信的背叛，得力爱将的阵亡，约克军队士气大跌，最终他也战死沙场。</p><p>最终兰开斯特家族成了最后的赢家。随后玛格丽特的儿子亨利都铎，迎娶约克家族的伊丽莎白为妻，两个家族最后合并，建立了都铎王朝。</p>]]></content>
    
    
    <categories>
      
      <category>阅读</category>
      
      <category>全历史</category>
      
      <category>历史</category>
      
      <category>英国史</category>
      
    </categories>
    
    
    <tags>
      
      <tag>article</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1533年 宗教改革</title>
    <link href="/2023/08/31/1533%E5%B9%B4%20%E5%AE%97%E6%95%99%E6%94%B9%E9%9D%A9/"/>
    <url>/2023/08/31/1533%E5%B9%B4%20%E5%AE%97%E6%95%99%E6%94%B9%E9%9D%A9/</url>
    
    <content type="html"><![CDATA[<p>16世纪前期，马丁路德在德国发表九十五条论纲，质疑天主教会的腐败，抗议天主教会，掀起了宗教改革。</p><p>但是英国并没有紧跟潮流，因为英国国王亨利八世想要发动战争拿回在法国的土地，为此想要得到教会的支持。不过，由于教会给的支持很少，但却在英国攫取了大量的财富，后来又因为亨利八世的王后凯瑟琳没有留下儿子，于是他想离婚另取。</p><p>但是并没有这么容易，他的王后凯瑟琳的娘家是哈布斯堡王室，势力庞大外甥还是当时西班牙国王和德意志帝国皇帝。罗马教廷也不敢抵触这个王室，因此他的离婚也是不会批准的。</p><p>因此一次机会，英国的主教去世了，亨利八世赶紧自己安排了一个新的大主教。这导致教皇将其除名，亨利八世顺势脱离罗马教廷自立门户，专门立法确立此时《至尊法案》。但是，同样有很多反对者，不承认英国新教，不过都被亨利八世残忍镇压了，大约有英国人口的2%的因此而死。</p><p>亨利八世娶了安妮为妻，但是也卷入了政治阴谋被处死，留下了一个女儿伊丽莎白，接下来又换了几个妻子，但是其中几个也都被处死。直到亨利八世晚年才有了一个儿子爱德华，不过皇位还是先后由他的女儿继承，英国国教也是在此成长起来。</p>]]></content>
    
    
    <categories>
      
      <category>阅读</category>
      
      <category>全历史</category>
      
      <category>历史</category>
      
      <category>英国史</category>
      
    </categories>
    
    
    <tags>
      
      <tag>article</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1562年 霍金斯的黑奴买卖</title>
    <link href="/2023/08/31/1562%E5%B9%B4%20%E9%9C%8D%E9%87%91%E6%96%AF%E7%9A%84%E9%BB%91%E5%A5%B4%E4%B9%B0%E5%8D%96/"/>
    <url>/2023/08/31/1562%E5%B9%B4%20%E9%9C%8D%E9%87%91%E6%96%AF%E7%9A%84%E9%BB%91%E5%A5%B4%E4%B9%B0%E5%8D%96/</url>
    
    <content type="html"><![CDATA[<p>1492年哥伦布穿过大西洋，发现美洲大陆，从此欧洲人向美洲殖民建立种植园，但是欧洲移民很少，当地土著因为疾病和屠杀数量也锐减，殖民者急需新的劳动力来源。</p><p>这个时候霍金斯发现贩卖黑奴有利可图，在1562年率领船队从英国出发，捕获了300多名黑人贩卖到中美洲，从此开启了黑奴三角贸易。</p><p>当时的英国刚经历了宗教改革，等把权力完全收回到国王手中的时候，发现已经错过了大航海殖民的好机会，只能找其他方式获取利益。原先为英国皇家效力的海盗霍金斯的黑奴贸易带回的大量财富，让伊丽莎白女王不在乎道德，开始官方支持这样的行径，还授予了霍金斯一枚勋章，勋章上是一个被捆绑的黑人。</p><p>自此，霍金斯甚至成为了英国的民族英雄。</p>]]></content>
    
    
    <categories>
      
      <category>阅读</category>
      
      <category>全历史</category>
      
      <category>历史</category>
      
      <category>英国史</category>
      
    </categories>
    
    
    <tags>
      
      <tag>article</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1571年 英国国教：安立甘宗的诞生</title>
    <link href="/2023/08/31/1571%E5%B9%B4%20%E8%8B%B1%E5%9B%BD%E5%9B%BD%E6%95%99%EF%BC%9A%E5%AE%89%E7%AB%8B%E7%94%98%E5%AE%97%E7%9A%84%E8%AF%9E%E7%94%9F/"/>
    <url>/2023/08/31/1571%E5%B9%B4%20%E8%8B%B1%E5%9B%BD%E5%9B%BD%E6%95%99%EF%BC%9A%E5%AE%89%E7%AB%8B%E7%94%98%E5%AE%97%E7%9A%84%E8%AF%9E%E7%94%9F/</url>
    
    <content type="html"><![CDATA[<p>英国经历了玫瑰战争后，贵族势力消失殆尽，现在能跟国王叫板的就只有教会势力。罗马教会，在英国渐渐的沦为了神职人员牟利的工具，这导致了人民和国王的不满，在之前1521年，剑桥成立了路德教研究的秘密团体，还将圣经翻译成了英文。</p><p>亨利八世见条件逐渐成熟，便着手清除教会势力，他的手段则是，该规矩，抢财产。先是改革了繁琐的基本仪式，简化了它，并且将英文版的圣经出版了；抢财产就是直接关停教会修道院，这些土地和财富最终轮到了国王和地主的手中，更加支持新教改革。</p><p>后来亨利八世去世后，由他儿子爱德华六世继位，进一步改革，此时苏格兰甚至也受到影响，也渐渐参与到新教的宗教活动中。但好景不长，十几岁的爱德华六世很快去世了，由亨利八世的女儿玛丽继位，玛丽由于是天主教徒，他的丈夫也是天主教徒，这就使她力图恢复英国天主教的地位，但是未能撼动那些瓜分了天主教财产的人。</p><p>玛丽去世后，由伊丽莎白继位，由于伊丽莎白为了保全自己，对自己信仰模糊化，上位后，压制了清教势力，最终逐渐确立起来英国国教的地位，英国这种王权高于教权的国教后来被称为安立甘宗教派。</p>]]></content>
    
    
    <categories>
      
      <category>阅读</category>
      
      <category>全历史</category>
      
      <category>历史</category>
      
      <category>英国史</category>
      
    </categories>
    
    
    <tags>
      
      <tag>article</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1580年 海盗时代：德雷克环游世界</title>
    <link href="/2023/08/31/1580%E5%B9%B4%20%E6%B5%B7%E7%9B%97%E6%97%B6%E4%BB%A3%EF%BC%9A%E5%BE%B7%E9%9B%B7%E5%85%8B%E7%8E%AF%E6%B8%B8%E4%B8%96%E7%95%8C/"/>
    <url>/2023/08/31/1580%E5%B9%B4%20%E6%B5%B7%E7%9B%97%E6%97%B6%E4%BB%A3%EF%BC%9A%E5%BE%B7%E9%9B%B7%E5%85%8B%E7%8E%AF%E6%B8%B8%E4%B8%96%E7%95%8C/</url>
    
    <content type="html"><![CDATA[<p>1519年，麦哲伦开始了环球航行，点燃了西方世界环游世界地热情，因为航行过程中往往能获得巨大的财富。</p><p>15世纪开始，伊斯兰世界控制着路上贸易道路，导致欧洲人从海路寻找贸易航线，其中西班牙人和葡萄牙人率先探险并控制着新大陆，后来者想要从新航线分一杯羹，就只能利用海盗活动，其中英国海盗最为出名。</p><p>其中最出名的英国海盗德雷克，在西班牙舰队里有龙的称号。德雷克后来想要去太平洋开辟新的殖民地。</p><p>他几乎先是到了非洲西北部，然后朝向南美洲，南美洲东部从南部的海峡穿过南美，随后又一直沿岸航行。航行中，遇到了各类美洲人，发现和他们无异和西班牙人描述的美洲人相差甚远。在美洲西岸沿岸航行的日子里，遇到了风暴，导致两艘船被毁，只剩了最后一艘船。但是风暴之后，碰到了西班牙人的据点随后抢劫船只，搜刮了不少的财富。随后为了避免报复，避开了麦哲伦的航线，航行到了东南亚，获得了大量便宜的香料。甚至和当地土著建立了良好的关系。</p><p>1580年秋天，他航行带着大量的财富回到了英国。</p>]]></content>
    
    
    <categories>
      
      <category>阅读</category>
      
      <category>全历史</category>
      
      <category>历史</category>
      
      <category>英国史</category>
      
    </categories>
    
    
    <tags>
      
      <tag>article</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1588年 大海战</title>
    <link href="/2023/08/31/1588%E5%B9%B4%20%E5%A4%A7%E6%B5%B7%E6%88%98/"/>
    <url>/2023/08/31/1588%E5%B9%B4%20%E5%A4%A7%E6%B5%B7%E6%88%98/</url>
    
    <content type="html"><![CDATA[<p>苏格兰女王玛丽被处死后，西班牙借口英国要天主教国王上位发动了对英国的战争。</p><p>西班牙苦英国海盗久矣，并且自己统治的尼德兰因为新教叛乱，背后支持者就是英国，双方梁子早就结下。英国处死天主教玛丽，给了西班牙国王腓力二世借口。</p><p>1587年，德雷克带着小队，摸进西班牙的各个港口，阻扰军队集结。他发现西班牙舰队庞大坚固，但是笨重，他使用老战术，贴近地方战船跳上别人的战船上和敌人厮杀，靠着这种手段毁掉不少舰船的同时，还劫掠了不少财富。</p><p>伊丽莎白再次期间也不断和西班牙国王谈判，但是国王是铁了心要开战。1588年双方正式开展，西班牙想要派遣无敌舰队前往尼德兰和陆军主力会合。英国知道后，派遣新式舰队前往阻拦，新的舰队虽然小，但是装备长距离火炮，可以在远距离打击西班牙舰队。但是西班牙舰队因为作战英勇，损失并不大。</p><p>随后西班牙舰队到达了尼德兰，却并没有看到陆军，并且英国追兵也追上来了，德雷克靠着几艘火船冲进西班牙的舰队，导致西班牙舰队不得已撤退。但是再回国途中，遇到风暴，这导致西班牙舰队损失惨重，最后3万人的舰队，不到1万人活了下来。这场海战，英国获得了胜利。</p><p>虽然这场海战后西班牙快速重建了海军，依然还是世界最强海军，但是英国海军强国却也逐渐转到英国手中，这一战算是英国迈向海军强国的第一步。</p>]]></content>
    
    
    <categories>
      
      <category>阅读</category>
      
      <category>全历史</category>
      
      <category>历史</category>
      
      <category>英国史</category>
      
    </categories>
    
    
    <tags>
      
      <tag>article</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1587年 女王之争：处死苏格兰玛丽女王</title>
    <link href="/2023/08/31/1587%E5%B9%B4%20%E5%A5%B3%E7%8E%8B%E4%B9%8B%E4%BA%89%EF%BC%9A%E5%A4%84%E6%AD%BB%E8%8B%8F%E6%A0%BC%E5%85%B0%E7%8E%9B%E4%B8%BD%E5%A5%B3%E7%8E%8B/"/>
    <url>/2023/08/31/1587%E5%B9%B4%20%E5%A5%B3%E7%8E%8B%E4%B9%8B%E4%BA%89%EF%BC%9A%E5%A4%84%E6%AD%BB%E8%8B%8F%E6%A0%BC%E5%85%B0%E7%8E%9B%E4%B8%BD%E5%A5%B3%E7%8E%8B/</url>
    
    <content type="html"><![CDATA[<p>玛丽是英格兰女王，信仰天主教，自己和法国国王通过婚有一些法国支持者，另外还是英国女王伊丽莎白的亲戚，有英国国王的继承权。</p><p>玛丽由于卷入到了政治纷争，被迫流亡到英国寻求庇护，英国女王由于没有别的好的处理方式，只好将其软禁起来。</p><p>英国伊丽莎白是新教徒，施行着比较宽松的宗教政策，这也导致了国内很多天主教徒的不满，而伊丽莎白无子嗣，大臣们很担心其死后由天主教徒的玛丽继位，回想起当初被血腥玛丽支配的恐怖。于是，一直监视着玛丽。</p><p>随后，有几个年轻的天主教徒写信提议帮助玛丽夺取王位，玛丽还积极回应了，这封信被大臣知道了，添油加醋后交到了伊丽莎白的手上，伊丽莎白为了政局稳定最后不得以处决了玛丽。这件事也就成了西班牙对英国宣战的战争借口。</p>]]></content>
    
    
    <categories>
      
      <category>阅读</category>
      
      <category>全历史</category>
      
      <category>历史</category>
      
      <category>英国史</category>
      
    </categories>
    
    
    <tags>
      
      <tag>article</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1600年 东印度公司成立</title>
    <link href="/2023/08/31/1600%E5%B9%B4%20%E4%B8%9C%E5%8D%B0%E5%BA%A6%E5%85%AC%E5%8F%B8%E6%88%90%E7%AB%8B/"/>
    <url>/2023/08/31/1600%E5%B9%B4%20%E4%B8%9C%E5%8D%B0%E5%BA%A6%E5%85%AC%E5%8F%B8%E6%88%90%E7%AB%8B/</url>
    
    <content type="html"><![CDATA[<p>1600年，英国东印度公司得到女王伊丽莎白一世授予的皇家特许状，有了贸易垄断权。</p><p>第一次参加贸易的是海盗兰开斯特，经过半年航行到达东南亚的亚齐国，同国王进行贸易的时候发现该地贸易早就被葡萄牙人占了，进行贸易的时候葡萄牙人故意控制价格，高价卖给英国人，于是兰开斯特也抢劫葡萄牙人的商船，在亚齐甩卖货物。同时，和亚齐签订了优惠条约，答应同亚齐国王合作。靠着这样的贸易，1603年（历时两年半）回国后获得了巨大的财富。</p><p>东印度公司在东南亚做了十几年贸易后，想要染指核心香料群岛，但是被当时荷兰东印度公司胖揍一顿，赶出了东南亚。随后英国东印度公司将发展方向转向印度，同当时的葡萄牙人竞争。最后搞好了印度莫卧儿王朝的关系，获得了贸易特许权，并且一百年后，成长为控制左右半球贸易的巨兽。</p>]]></content>
    
    
    <categories>
      
      <category>阅读</category>
      
      <category>全历史</category>
      
      <category>历史</category>
      
      <category>英国史</category>
      
    </categories>
    
    
    <tags>
      
      <tag>article</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1642年 英国内战：查理一世走向断头台</title>
    <link href="/2023/08/31/1642%E5%B9%B4%20%E8%8B%B1%E5%9B%BD%E5%86%85%E6%88%98%EF%BC%9A%E6%9F%A5%E7%90%86%E4%B8%80%E4%B8%96%E8%B5%B0%E5%90%91%E6%96%AD%E5%A4%B4%E5%8F%B0/"/>
    <url>/2023/08/31/1642%E5%B9%B4%20%E8%8B%B1%E5%9B%BD%E5%86%85%E6%88%98%EF%BC%9A%E6%9F%A5%E7%90%86%E4%B8%80%E4%B8%96%E8%B5%B0%E5%90%91%E6%96%AD%E5%A4%B4%E5%8F%B0/</url>
    
    <content type="html"><![CDATA[<p>英国女王伊丽莎白一世去世后，由苏格兰女王玛丽的儿子詹姆士继位，开启了斯图亚特王朝。</p><p>他的儿子查理一世继位后，由于先后同法兰西、苏格兰开战导致国王军费紧张，召开议会进行征税，但是由于内部矛盾重重，征税始终不顺利，国王就发动了内战，将议会军说成是反叛军。</p><p>起初国王的部队装备精良，且士气高涨，面对议会军部队优势很大。随后，议会军克伦威尔和苏格兰军队合并后，在马斯顿荒原中击败了国王的军队，并将国王查理一世监禁了起来。</p><p>不过，战争过后，军队和议会又吵起来了，随后查理一世找准空挡逃了出来，并且和议会沟通，以及同苏格兰军队合作，这样导致英国各处爆发了王党派叛乱，这些都被克伦威尔一一平息。苏格兰军队这边，在得知克伦威尔平息叛乱去了，趁机占领伦敦，不过克伦威尔很快赶了回来，消灭了苏格兰军队。</p><p>至此，克伦威尔平息了全部叛乱，将国王送上了断头台，开启了英国了民主共和国政治。</p>]]></content>
    
    
    <categories>
      
      <category>阅读</category>
      
      <category>全历史</category>
      
      <category>历史</category>
      
      <category>英国史</category>
      
    </categories>
    
    
    <tags>
      
      <tag>article</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1651年 怪兽隐喻：霍布斯出版《利维坦》</title>
    <link href="/2023/08/31/1651%E5%B9%B4%20%E6%80%AA%E5%85%BD%E9%9A%90%E5%96%BB%EF%BC%9A%E9%9C%8D%E5%B8%83%E6%96%AF%E5%87%BA%E7%89%88%E3%80%8A%E5%88%A9%E7%BB%B4%E5%9D%A6%E3%80%8B/"/>
    <url>/2023/08/31/1651%E5%B9%B4%20%E6%80%AA%E5%85%BD%E9%9A%90%E5%96%BB%EF%BC%9A%E9%9C%8D%E5%B8%83%E6%96%AF%E5%87%BA%E7%89%88%E3%80%8A%E5%88%A9%E7%BB%B4%E5%9D%A6%E3%80%8B/</url>
    
    <content type="html"><![CDATA[<p>1608年霍布斯大学毕业后，被老师推荐给卡文迪尔家族当家庭教师，由于其名望，霍布斯得以同英国上层名流打交道。在此期间他发现议员水平参差不齐，互相拖后腿，这导致他对民主的反思，同时翻译了一些作品《伯罗奔尼撒战争史》，这部作品讲述了雅典通过民主手段放逐了军事人才，最终导致雅典战败。这更加深化了他对民主制度的反感。</p><p>后来国王和议会矛盾加剧，国王发动了战争，国王战败后，保皇派逃离英国到了法国，这个时候霍布斯得以担任了查理二世的老师。在此期间吸收法国哲学家的思想，和大人物沟通。出版了《利维坦》这本书。</p><p>利维坦是基督圣经里面的一个大海怪，他将国家整体比作一个利维坦，人民比作利维坦的各个组成部分，由此论证出国王绝对权威，但是国王应该保护人民为己任。</p><p>这本书已经发表得罪了保皇派，国内学者以及教会。保皇派认为国王权力至高无上，无需照顾人民；学者则认为其推演过程有问题；教会则认为，国王权力来源于上帝，直接绕过了教会说权力引起了教会极大不满。</p><p>但是因为其观点强调皇权至高无上，且谴责叛乱，得到了查理二世的支持，并且霍布斯又是他的老师，这样国内没人敢动他。但是即便如此，霍布斯还是烧毁了很多手稿，在世期间没出版其他任何书籍，以求自保。</p><p>《利维坦》这本书开启了西方政治哲学的开始。</p>]]></content>
    
    
    <categories>
      
      <category>阅读</category>
      
      <category>全历史</category>
      
      <category>历史</category>
      
      <category>英国史</category>
      
    </categories>
    
    
    <tags>
      
      <tag>article</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1650年 殖民加勒比海</title>
    <link href="/2023/08/31/1650%E5%B9%B4%20%E6%AE%96%E6%B0%91%E5%8A%A0%E5%8B%92%E6%AF%94%E6%B5%B7/"/>
    <url>/2023/08/31/1650%E5%B9%B4%20%E6%AE%96%E6%B0%91%E5%8A%A0%E5%8B%92%E6%AF%94%E6%B5%B7/</url>
    
    <content type="html"><![CDATA[<p>十七世纪中叶，英国开始殖民加勒比海，在此地种植甘蔗。</p><p>十字军东征的时候，基督世界从中得到了甘蔗种植的技术，不过甘蔗需要温暖湿润的环境，欧洲太冷了。直到11世纪，糖类对于欧洲人都很陌生。</p><p>哥伦布发现新大陆后，西班牙和葡萄牙人就在美洲种植甘蔗，利润高昂。这也导致英国人在加勒比海附近殖民，种植甘蔗，不过由于劳动力太少了。英国则将黑奴还有一些爱尔兰的政治战犯引到这里来种植甘蔗。</p><p>而后，这边种植甘蔗赚到钱的农场主开始影响英国政治，让英国推出了《糖蜜法》向其他国家的糖征收高昂的关税，英国对于糖的需求很大，这就让英国世界各地的殖民地都种上了甘蔗。算是一己之力，将糖作物推广到了世界。</p>]]></content>
    
    
    <categories>
      
      <category>阅读</category>
      
      <category>全历史</category>
      
      <category>历史</category>
      
      <category>英国史</category>
      
    </categories>
    
    
    <tags>
      
      <tag>article</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1652年 海上争霸：航海条例引爆英荷战争</title>
    <link href="/2023/08/31/1652%E5%B9%B4%20%E6%B5%B7%E4%B8%8A%E4%BA%89%E9%9C%B8%EF%BC%9A%E8%88%AA%E6%B5%B7%E6%9D%A1%E4%BE%8B%E5%BC%95%E7%88%86%E8%8B%B1%E8%8D%B7%E6%88%98%E4%BA%89/"/>
    <url>/2023/08/31/1652%E5%B9%B4%20%E6%B5%B7%E4%B8%8A%E4%BA%89%E9%9C%B8%EF%BC%9A%E8%88%AA%E6%B5%B7%E6%9D%A1%E4%BE%8B%E5%BC%95%E7%88%86%E8%8B%B1%E8%8D%B7%E6%88%98%E4%BA%89/</url>
    
    <content type="html"><![CDATA[<p>16世纪，荷兰还隶属于西班牙的统治，经过近80年的独立战争，最终1648年正式独立为“荷兰共和国”。</p><p>随后荷兰凭借地理优势大肆发展贸易，创立了世界首屈一指的商船，不断扩张海外殖民地，逐渐垄断了世界各国的贸易，被称为“海上马车夫”。</p><p>此时英国正忙于内战，等内战结束后，克伦威尔意识到荷兰的威胁，于是颁布《航海条例》，规定所有英国殖民地商船必须用本国的，这其实就是针对了荷兰。</p><p>随后双方在多佛尔海峡发生冲突，导致了第一次英荷战争，这场战争英国胜利了，随后荷兰不得以默许了航海条例，但是英国随后制定了更加严格的航海条例，还出兵占领荷兰在海外的殖民地，例如北美殖民地阿姆斯特丹，改名为纽约。</p><p>后来英国1665年伦敦爆发了大规模的瘟疫，严重打击了英国的经济实力，就是这个时候，荷兰对英国发动战争将军舰开进泰晤士河，烧毁了英国的军舰，这场战争荷兰胜利，英国不得以割掉东印度群岛给荷兰。</p><p>后来英国联合法国同荷兰发动第三次战争，但是荷兰一举击败了英法联军，但自己也是损失惨重，双方签订条约互相进行让步。</p><p>第四次战争，因为英国的航海条例，间接导致了贸易成本大增，各殖民地，特别是北美殖民地损失很大，北美爆发独立战争，荷兰对其提供支持。英国就以提供北美独立支持为由，最终和荷兰爆发了第四次战争，这次战争已经是18世纪了，荷兰已经无法支持庞大的殖民统治，最终“海上马车夫”推出了世界舞台。</p>]]></content>
    
    
    <categories>
      
      <category>阅读</category>
      
      <category>全历史</category>
      
      <category>历史</category>
      
      <category>英国史</category>
      
    </categories>
    
    
    <tags>
      
      <tag>article</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1649年 独裁与共和：克伦威尔护国时期</title>
    <link href="/2023/08/31/1649%E5%B9%B4%20%E7%8B%AC%E8%A3%81%E4%B8%8E%E5%85%B1%E5%92%8C%EF%BC%9A%E5%85%8B%E4%BC%A6%E5%A8%81%E5%B0%94%E6%8A%A4%E5%9B%BD%E6%97%B6%E6%9C%9F/"/>
    <url>/2023/08/31/1649%E5%B9%B4%20%E7%8B%AC%E8%A3%81%E4%B8%8E%E5%85%B1%E5%92%8C%EF%BC%9A%E5%85%8B%E4%BC%A6%E5%A8%81%E5%B0%94%E6%8A%A4%E5%9B%BD%E6%97%B6%E6%9C%9F/</url>
    
    <content type="html"><![CDATA[<p>克伦威尔将查理一世送上断头台后，克伦威尔自称护国公，开启了军事独裁。</p><p>一方面他镇压国内叛乱，以残酷的手段，例如屠城镇压了苏格兰和爱尔兰的起义。另一方面，凭借强大的海军重创了荷兰的舰队。</p><p>国王死后，他废除了上议院，不过议员建议其开设另一院。开设后将其亲信安排到其中，因此每次开议会，两院吵个不停，最终1653年克伦威尔索性驱逐了议会，建立一个成员由他选择的议会。同时，将英格兰分为11个区，并且派遣行政长官实行军事管理。同时，由于其是清教徒，在全国上下实行清教徒传统，节俭。</p><p>他在位期间，实行的这一系列举措，加大了人民和政府的隔阂，甚至人民觉得自己没有在查理一世的时候自由，这就导致在克伦威尔死后，克伦威尔的儿子没有权威能统领其下属，很快在人民的簇拥下查理二世复位。查理二世上位后，还鞭克伦威尔的尸体，将其头颅割下来。</p>]]></content>
    
    
    <categories>
      
      <category>阅读</category>
      
      <category>全历史</category>
      
      <category>历史</category>
      
      <category>英国史</category>
      
    </categories>
    
    
    <tags>
      
      <tag>article</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1660年 斯图亚特王朝复辟</title>
    <link href="/2023/08/31/1660%E5%B9%B4%20%E6%96%AF%E5%9B%BE%E4%BA%9A%E7%89%B9%E7%8E%8B%E6%9C%9D%E5%A4%8D%E8%BE%9F/"/>
    <url>/2023/08/31/1660%E5%B9%B4%20%E6%96%AF%E5%9B%BE%E4%BA%9A%E7%89%B9%E7%8E%8B%E6%9C%9D%E5%A4%8D%E8%BE%9F/</url>
    
    <content type="html"><![CDATA[<p>1653年，克伦威尔带兵强行解散议会自任护国公，开启了军事独裁。</p><p>1660年，查理二世在议会和贵族拥护下回到英国担任国王，斯图亚特王朝复辟，结束了护国公时代。</p><p>由于查理二世是被请回来的，国王和议会在权力争夺上争锋相对，特别是在宗教问题上。</p><p>查理二世偷偷向法国结盟，承诺时机允许会宣布皈依天主教。他为了恢复天主教活动，颁布了宗教自由法案，但是议会以军费为要挟，最终国王撤回了法案。随后议会还通过法案，规定只能由国教徒才能担任重要职位。</p><p>查理二世直到去世，才宣布皈依天主教。他的继任者詹姆斯二世是天主教徒，他的手段就强硬很多了，公开支持天主教，恢复各类天主教活动，并且让天主教徒担任重要职位，甚至在牛津和剑桥迫害国教徒。</p><p>后来还颁布信仰自由宣言，强迫国教教堂两个星期不停宣读这宣言。主教们就不同意了，结果被逮捕，但是在民众的愤怒压力下，最终释放了所有主教。詹姆斯二世想要恢复天主教的想法被泼了冷水，议会也没有步步紧逼，想着让他的新教女儿继位。</p>]]></content>
    
    
    <categories>
      
      <category>阅读</category>
      
      <category>全历史</category>
      
      <category>历史</category>
      
      <category>英国史</category>
      
    </categories>
    
    
    <tags>
      
      <tag>article</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1660年 英国皇家学会成立</title>
    <link href="/2023/08/31/1660%E5%B9%B4%20%E8%8B%B1%E5%9B%BD%E7%9A%87%E5%AE%B6%E5%AD%A6%E4%BC%9A%E6%88%90%E7%AB%8B/"/>
    <url>/2023/08/31/1660%E5%B9%B4%20%E8%8B%B1%E5%9B%BD%E7%9A%87%E5%AE%B6%E5%AD%A6%E4%BC%9A%E6%88%90%E7%AB%8B/</url>
    
    <content type="html"><![CDATA[<p>14世纪到17世纪，自然哲学的研究风靡英国，同时宗教改革后，人们思想的到了解放。<br>1579年，一位英国商人创办了格雷沙姆学院，这所学院目的为自然科学教育。而因为宗教的衰落而兴起的自然科学风潮的学者，会聚集在这里探讨问题，他们就形成了早期的无形学院。</p><p>后来由于克伦威尔内战，重新调整了学院的人员构成，排挤了保皇派知识分子；部分无形学院的知识分子迁入到了牛津，至此学院一分为二，一部分在伦敦，一部分在牛津。</p><p>后来斯图亚特王朝复辟，国王查理二世对科学，诸如炼金术一类的很感兴趣，鼓励人们投资其中。后来王党派知识分子也回来了，商讨建立一个机构，这个机构就是伦敦皇家自然知识促进学会，简称“皇家学会”，查理二世也为此签署了特许状。</p>]]></content>
    
    
    <categories>
      
      <category>阅读</category>
      
      <category>全历史</category>
      
      <category>历史</category>
      
      <category>英国史</category>
      
    </categories>
    
    
    <tags>
      
      <tag>article</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1679年 政党起源：《排斥法案》之争</title>
    <link href="/2023/08/31/1679%E5%B9%B4%20%E6%94%BF%E5%85%9A%E8%B5%B7%E6%BA%90%EF%BC%9A%E3%80%8A%E6%8E%92%E6%96%A5%E6%B3%95%E6%A1%88%E3%80%8B%E4%B9%8B%E4%BA%89/"/>
    <url>/2023/08/31/1679%E5%B9%B4%20%E6%94%BF%E5%85%9A%E8%B5%B7%E6%BA%90%EF%BC%9A%E3%80%8A%E6%8E%92%E6%96%A5%E6%B3%95%E6%A1%88%E3%80%8B%E4%B9%8B%E4%BA%89/</url>
    
    <content type="html"><![CDATA[<p>查理二世复辟后，权威下降不少，议会权威上升很多。由于早些时候，查理二世同法国结盟想要恢复天主教地位，这导致议会的猜忌和不满。</p><p>随后，查理二世任命下一任继承人为天主教徒詹姆斯的问题上，议会内部分为了两派。一派坚持宗教改革，要求废除詹姆士二世的继承权，这一派后来被称为辉格党，意味强盗。另一派则坚持皇权权威，认为不能废除继承权，这一派被称为托利党意为不法之徒。两党一派激进一派保守。</p><p>辉格党在1679年公开提出《排斥法案》剥夺詹姆斯的王位继承权，查理二世一气之下解散了议会，法案没有通过。在国王的支持下托利党混得风声水起。</p><p>但是辉格党在民众中得到了极大的支持，曾号召了几万人联名请愿召开议会解决继承问题。还有辉格党开始”烧毁天主教皇”的活动。</p><p>随后辉格党几次提出《排斥法案》但均未通过，随后还遭到国王迫害，领袖流亡荷兰病死他乡。后来甚至出现激进分子想要暗杀查理二世和他的弟弟，这让国王借机捕杀了大批辉格党人，最终詹姆斯二世还是继承了王位。</p>]]></content>
    
    
    <categories>
      
      <category>阅读</category>
      
      <category>全历史</category>
      
      <category>历史</category>
      
      <category>英国史</category>
      
    </categories>
    
    
    <tags>
      
      <tag>article</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1662年 凯瑟琳公主饮茶记</title>
    <link href="/2023/08/31/1662%E5%B9%B4%20%E5%87%AF%E7%91%9F%E7%90%B3%E5%85%AC%E4%B8%BB%E9%A5%AE%E8%8C%B6%E8%AE%B0/"/>
    <url>/2023/08/31/1662%E5%B9%B4%20%E5%87%AF%E7%91%9F%E7%90%B3%E5%85%AC%E4%B8%BB%E9%A5%AE%E8%8C%B6%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<p>1662年，英王查理二世加冕一年，为了巩固政权，积极寻求同葡萄牙联姻。于是葡萄牙公主凯瑟琳带着丰厚嫁妆入英，包含印度殖民地孟买港，和一箱价值不菲的中国红茶。</p><p>而在婚礼现场，凯瑟琳就在一众贵族中喝了红茶，其中法王后很感兴趣，还派了间谍去弄清楚这类饮料是什么，不过间谍被发现然后处死了。这场风波也让茶的知名度迅速提升。</p><p>随后，东印度公司为讨好凯瑟琳的欢心垄断了东西方茶叶贸易，茶叶贸易导致英国贸易逆差，也间接导致英国用鸦片平衡贸易逆差，导致了鸦片战争。</p>]]></content>
    
    
    <categories>
      
      <category>阅读</category>
      
      <category>全历史</category>
      
      <category>历史</category>
      
      <category>英国史</category>
      
    </categories>
    
    
    <tags>
      
      <tag>article</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1688年 光荣革命：不流血变革创举</title>
    <link href="/2023/08/31/1688%E5%B9%B4%20%E5%85%89%E8%8D%A3%E9%9D%A9%E5%91%BD%EF%BC%9A%E4%B8%8D%E6%B5%81%E8%A1%80%E5%8F%98%E9%9D%A9%E5%88%9B%E4%B8%BE/"/>
    <url>/2023/08/31/1688%E5%B9%B4%20%E5%85%89%E8%8D%A3%E9%9D%A9%E5%91%BD%EF%BC%9A%E4%B8%8D%E6%B5%81%E8%A1%80%E5%8F%98%E9%9D%A9%E5%88%9B%E4%B8%BE/</url>
    
    <content type="html"><![CDATA[<p>詹姆斯二世信奉天主教，在任期间任用天主教徒，着手恢复天主教活动。由于国民都是新教徒，恢复天主教的活动遭到极大的阻力。由于国王已经是年老体衰，有可能继任的女儿们都是新教徒，议会就没怎么过分步步紧逼。</p><p>结果，詹姆斯二世晚来得子，按照英国传统，子嗣比女儿拥有更高优先级的继承权，而且他的这个儿子是一个天主教徒。议会不得以采取手段，同詹姆斯二世的女儿联系，商量篡位。</p><p>他的女儿玛丽和玛丽的丈夫威廉都是新教徒，威廉还是荷兰的执政官，为了让玛丽顺利登上王位，威廉还派了万人军队朝不列颠赶去，所到之处人民夹道欢迎。詹姆斯二世由于将军权给了一手提拔的丘吉尔（是二战中丘吉尔的祖宗），这位中将直接反水到新教徒一边，而且自己的另一个女儿安妮也倒向了玛丽这边，詹姆斯二世看到众叛亲离的场景，只得逃亡到海外。</p><p>这正和议会的意，本身篡位师出无名，现在可以说老国王主动放弃王位。随后和新的国王签订了权力法案，进一步限制了国王的权力。</p>]]></content>
    
    
    <categories>
      
      <category>阅读</category>
      
      <category>全历史</category>
      
      <category>历史</category>
      
      <category>英国史</category>
      
    </categories>
    
    
    <tags>
      
      <tag>article</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1689年 洛克写作《政府论》</title>
    <link href="/2023/08/31/1689%E5%B9%B4%20%E6%B4%9B%E5%85%8B%E5%86%99%E4%BD%9C%E3%80%8A%E6%94%BF%E5%BA%9C%E8%AE%BA%E3%80%8B/"/>
    <url>/2023/08/31/1689%E5%B9%B4%20%E6%B4%9B%E5%85%8B%E5%86%99%E4%BD%9C%E3%80%8A%E6%94%BF%E5%BA%9C%E8%AE%BA%E3%80%8B/</url>
    
    <content type="html"><![CDATA[<p>洛克出生于1632年早年经历过查理一世被推翻，克伦威尔军事独裁，随后有经历了查理二世的复辟，这些经历让他思考政府，人民的关系。当时主流的思想是君权神授，还有非主流的霍布斯的《利维坦》，说人们为了自保，相互约定产生国家，需要有一个强权来维持这种状态。洛克不喜欢两者理论。</p><p>洛克因为帮助辉格党领袖沙夫茨伯里伯爵治疗肝病，成了他的家庭医生和助手，还跟随伯爵参加各种政治活动。辉格党的民意基础很广，也就是在这个时候，洛克发展起来他的思想，动手撰写《政府论》，不过由于刺杀案，导致辉格党遭到迫害，洛克跟随伯爵流亡荷兰。</p><p>在这个时候《政府论》完结，批判了君主专制，倡导天赋人权，认为政府的职责就是保护人民，不能得到人民的认可就会被推翻。随后一直到了1688年光荣革命，他便跟随玛丽回到英国次年正式出版《政府论》。这部作品广泛传播，影响深远。</p>]]></content>
    
    
    <categories>
      
      <category>阅读</category>
      
      <category>全历史</category>
      
      <category>历史</category>
      
      <category>英国史</category>
      
    </categories>
    
    
    <tags>
      
      <tag>article</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1694年 金融心脏：伦敦的两大金融机构</title>
    <link href="/2023/08/31/1694%E5%B9%B4%20%E9%87%91%E8%9E%8D%E5%BF%83%E8%84%8F%EF%BC%9A%E4%BC%A6%E6%95%A6%E7%9A%84%E4%B8%A4%E5%A4%A7%E9%87%91%E8%9E%8D%E6%9C%BA%E6%9E%84/"/>
    <url>/2023/08/31/1694%E5%B9%B4%20%E9%87%91%E8%9E%8D%E5%BF%83%E8%84%8F%EF%BC%9A%E4%BC%A6%E6%95%A6%E7%9A%84%E4%B8%A4%E5%A4%A7%E9%87%91%E8%9E%8D%E6%9C%BA%E6%9E%84/</url>
    
    <content type="html"><![CDATA[<p>17世纪的英国国库空虚，王室面临财政危机。查理二世各种凑集军费，一直还不上账，他就下令关闭财政署，不给私人兑换资金，变相赖账。</p><p>光荣革命后，国王威廉三世和玛丽二世继位，但是英国和法国的战争还在持续，解决财政危机迫在眉睫。此时整个欧洲还陷入了货币危机，英国王室的信誉还很差，各路商人都不愿意将钱借给王室。</p><p>这个时候一位企业家威廉佩特森想到荷兰的做法，提议国王建立一个银行筹钱。于是1694年，英格兰银行成立，仅仅十二天就筹集了120万英镑。宣告了英国金融业的起步。</p>]]></content>
    
    
    <categories>
      
      <category>阅读</category>
      
      <category>全历史</category>
      
      <category>历史</category>
      
      <category>英国史</category>
      
    </categories>
    
    
    <tags>
      
      <tag>article</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1687年 牛顿出版物理哲学巨著</title>
    <link href="/2023/08/31/1687%E5%B9%B4%20%E7%89%9B%E9%A1%BF%E5%87%BA%E7%89%88%E7%89%A9%E7%90%86%E5%93%B2%E5%AD%A6%E5%B7%A8%E8%91%97/"/>
    <url>/2023/08/31/1687%E5%B9%B4%20%E7%89%9B%E9%A1%BF%E5%87%BA%E7%89%88%E7%89%A9%E7%90%86%E5%93%B2%E5%AD%A6%E5%B7%A8%E8%91%97/</url>
    
    <content type="html"><![CDATA[<p>随着斯图亚特王朝复辟，查理二世大力推进科学发展，建立了皇家学会，科学技术得以迅速发展。</p><p>其中牛顿在1687年出版了《自然哲学的数学原理》标志着经典物理力学体系的建立和天体物理学的诞生。</p><p>这部作品起初是哈雷向其提问行星绕太阳转的作用力，和它与太阳距离的平方是否成反比？牛顿就写了一篇小论文《绕转物体的研究》寄到伦敦皇家学会，事后，皇家学会答应一旦成稿就给他出版。这篇论文也就成了《自然哲学原理的数学原理》的雏形。</p><p>但是詹姆斯二世对科学投入不大，导致出版工作延迟下来，并且牛顿和胡克就论文中署名问题还吵架，气的他停止了工作。哈雷则为了让任务顺利进行，一边奔走学会，一边安抚牛顿，最终牛顿还是删除了论文中有关胡克的部分，出版了这部巨著。</p>]]></content>
    
    
    <categories>
      
      <category>阅读</category>
      
      <category>全历史</category>
      
      <category>历史</category>
      
      <category>英国史</category>
      
    </categories>
    
    
    <tags>
      
      <tag>article</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1701年 西班牙王位继承战争</title>
    <link href="/2023/08/31/1701%E5%B9%B4%20%E8%A5%BF%E7%8F%AD%E7%89%99%E7%8E%8B%E4%BD%8D%E7%BB%A7%E6%89%BF%E6%88%98%E4%BA%89/"/>
    <url>/2023/08/31/1701%E5%B9%B4%20%E8%A5%BF%E7%8F%AD%E7%89%99%E7%8E%8B%E4%BD%8D%E7%BB%A7%E6%89%BF%E6%88%98%E4%BA%89/</url>
    
    <content type="html"><![CDATA[<p>17世纪末，英国打败荷兰成为海上霸主，紧接着发生了光荣革命。等待政局稳定后，英国开始积极推行殖民扩张政策。</p><p>这个时候，西班牙国王病重，但没有儿子能继承王位。他的亲戚有两只，一只是神罗的哈布斯堡王朝，一只是法国的波旁王朝，都和英国没关系。英国于是想和法国联合起来，等待国王死后，瓜分西班牙。</p><p>西班牙国王得知后大骂英法不仗义，但是没有办法，只能宣称让王位给法网的孙子，条件是英法不能合并。法国得知后就不想和英王一起瓜分了，想要独享，直接和英王撕破脸，说只认同詹姆斯二世的儿子为英王。这直接导致双方的持续12年的战争。</p><p>战争初期法国有优势，但是后续丘吉尔家族的马尔博罗公爵，在德意志小镇击败了法国军队取得了很大的胜利，之后英荷联军占据了6年的优势。后来到了1711年，英国不打了，因为财政问题和荷兰想退出，直接开始谈判。这次谈判英国拿到了地中海和北美殖民地，还拿到了向西班牙在美洲殖民地贩卖黑奴的垄断权，还拿到了直布罗陀海峡的控制权。</p><p>这场战争是英国海上扩张的新起点，英国市场迅速扩大，促进了英国工业革命的产生。</p>]]></content>
    
    
    <categories>
      
      <category>阅读</category>
      
      <category>全历史</category>
      
      <category>历史</category>
      
      <category>英国史</category>
      
    </categories>
    
    
    <tags>
      
      <tag>article</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1707年 版图初成：英格兰与苏格兰合并</title>
    <link href="/2023/08/31/1707%E5%B9%B4%20%E7%89%88%E5%9B%BE%E5%88%9D%E6%88%90%EF%BC%9A%E8%8B%B1%E6%A0%BC%E5%85%B0%E4%B8%8E%E8%8B%8F%E6%A0%BC%E5%85%B0%E5%90%88%E5%B9%B6/"/>
    <url>/2023/08/31/1707%E5%B9%B4%20%E7%89%88%E5%9B%BE%E5%88%9D%E6%88%90%EF%BC%9A%E8%8B%B1%E6%A0%BC%E5%85%B0%E4%B8%8E%E8%8B%8F%E6%A0%BC%E5%85%B0%E5%90%88%E5%B9%B6/</url>
    
    <content type="html"><![CDATA[<p>1603年英格兰女王驾崩，后继无人，由表侄苏格兰国王詹姆斯一世入主英格兰，两国开始共事一主但各行其是。</p><p>在这百年的时间里，北部苏格兰叛乱不断，还和法国联盟一起对付英格兰。英格兰也反过来打压苏格兰，眼看着苏格兰本土闹饥荒，去北美殖民遭遇西班牙的进攻，这些都不帮忙。</p><p>1704年，苏格兰推出《安全法案》，说是要选出一位英格兰不同的君主，想和英格兰分家。英国就在贸易上打压苏格兰，双方冲突不断。后来安妮想要两国合并，花了重金贿赂了苏格兰贵族昆斯伯里公爵。</p><p>昆斯伯里公爵贵族拿着这笔钱，又贿赂了其他贵族，开始积极为两国合并出力，积极游说。但是人民并不怎么买账，说他们是苏奸。也有一部分贵族，看清了合并后虽然会失去贵族的一些利益，但是为了苏格兰的繁荣还是愿意两国合并。为此还四处救火镇压国内的反对声音。</p><p>最终两国还是在1707年合并，双方议会合并，苏格兰保留原有的法律和宗教制度。</p>]]></content>
    
    
    <categories>
      
      <category>阅读</category>
      
      <category>全历史</category>
      
      <category>历史</category>
      
      <category>英国史</category>
      
    </categories>
    
    
    <tags>
      
      <tag>article</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1704年 新闻先驱：迪福办报写《鲁滨逊》</title>
    <link href="/2023/08/31/1704%E5%B9%B4%20%E6%96%B0%E9%97%BB%E5%85%88%E9%A9%B1%EF%BC%9A%E8%BF%AA%E7%A6%8F%E5%8A%9E%E6%8A%A5%E5%86%99%E3%80%8A%E9%B2%81%E6%BB%A8%E9%80%8A%E3%80%8B/"/>
    <url>/2023/08/31/1704%E5%B9%B4%20%E6%96%B0%E9%97%BB%E5%85%88%E9%A9%B1%EF%BC%9A%E8%BF%AA%E7%A6%8F%E5%8A%9E%E6%8A%A5%E5%86%99%E3%80%8A%E9%B2%81%E6%BB%A8%E9%80%8A%E3%80%8B/</url>
    
    <content type="html"><![CDATA[<p>1704年英国人丹尼尔 笛福创办了报刊《评论》针砭时政，这就是英国政治业的开端。</p><p>笛福出生于一个英国国教长老会家庭，十分崇拜威廉三世国王，也就是玛丽的丈夫。写了很多赞美之词，这个时候他还算混的不错。</p><p>后来，威廉三世去世，安妮继位，改变了他的开放宗教政策，开始排挤新教中其他派别，笛福很反感，写了很多反对的册子。后来也因此入狱，不过他的才能被一位托利党哈雷看上，哈雷一直想要拉拢长老会以此解决宗教问题，因此给了哈雷钱让其出狱，然后每月400英镑赞助他，让他为哈雷发声。</p><p>这个情况下《评论》报纸就诞生了，此时哈雷想要磨合苏格兰和英格兰的关系，英格兰人长老派居多，哈雷就用报纸和小册子在苏格兰造势，后来苏格兰和英国还真就合并了。</p><p>不过他没有得到荣誉，但是他却已经声名大振，他写的最畅销的故事是《鲁滨逊漂流记》。</p>]]></content>
    
    
    <categories>
      
      <category>阅读</category>
      
      <category>全历史</category>
      
      <category>历史</category>
      
      <category>英国史</category>
      
    </categories>
    
    
    <tags>
      
      <tag>article</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1720年 沃波尔发展内阁制</title>
    <link href="/2023/08/31/1720%E5%B9%B4%20%E6%B2%83%E6%B3%A2%E5%B0%94%E5%8F%91%E5%B1%95%E5%86%85%E9%98%81%E5%88%B6/"/>
    <url>/2023/08/31/1720%E5%B9%B4%20%E6%B2%83%E6%B3%A2%E5%B0%94%E5%8F%91%E5%B1%95%E5%86%85%E9%98%81%E5%88%B6/</url>
    
    <content type="html"><![CDATA[<p>1720年随着南海事件的发生，政府的威信扫地，以财政见长的沃波尔上台，临危受命收拾残局，并且取得了成效。</p><p>南海事件是因为1719年，政府同南海公司达成合作把国债换成公司股票，由南海公司进行偿还。由于有政府背书，股票价格飙升，造成了很大的泡沫，随后股票暴跌导致大量投资人倾家荡产。</p><p>这个时候辉格党政府名誉扫地，沃波尔上任收拾烂摊子，很快抑制了股票的下跌，挽救了财政危机。</p><p>由于光荣革命后，大臣们就自己开会处理政务，由最有权势的大臣主持会议，最后将决议交给国王，这就是内阁的雏形。现在沃波尔就是最有权势的人，他的政敌看不惯他说他是 prime minister 译为首席宰相，这就是宰相，这一职位的出现是内阁制形成的重要标志。</p><p>为了稳固权力，沃波尔上讨好王室，讨好同僚，许诺下议院议员官职，以此来稳固权势。但是，由于沃波尔一直坚持和平发展，引起了下议院的不满，最后在1739年，英国和西班牙发生冲突”詹金斯耳朵之战”中，由于其采取中立态度，最后下议院受不了，让其下台，他连带着的许多官员同时下台。</p>]]></content>
    
    
    <categories>
      
      <category>阅读</category>
      
      <category>全历史</category>
      
      <category>历史</category>
      
      <category>英国史</category>
      
    </categories>
    
    
    <tags>
      
      <tag>article</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1737年 明珠蒙尘：休谟与他的《人性论》</title>
    <link href="/2023/08/31/1737%E5%B9%B4%20%E6%98%8E%E7%8F%A0%E8%92%99%E5%B0%98%EF%BC%9A%E4%BC%91%E8%B0%9F%E4%B8%8E%E4%BB%96%E7%9A%84%E3%80%8A%E4%BA%BA%E6%80%A7%E8%AE%BA%E3%80%8B/"/>
    <url>/2023/08/31/1737%E5%B9%B4%20%E6%98%8E%E7%8F%A0%E8%92%99%E5%B0%98%EF%BC%9A%E4%BC%91%E8%B0%9F%E4%B8%8E%E4%BB%96%E7%9A%84%E3%80%8A%E4%BA%BA%E6%80%A7%E8%AE%BA%E3%80%8B/</url>
    
    <content type="html"><![CDATA[<p>1710年，大卫出版《人类知识原理》，其中的怀疑主义思想影响了休谟。</p><p>1737年休谟《人性论》出版，第一次系统的对人性进行了思考，对人的认知同普遍因果关系进行系统的思考。</p><p>休谟早期学习法律，但是对哲学更感兴趣，18岁后更是一头扎进学习哲学。毕业后尝试过经商，但是却没有兴趣，随后到了法国和一所军事学院的学生探讨哲学，并借用图书馆进行哲学研究。</p><p>后来在这个时候写完《人性论》，回伦敦出版后并没有引发大的波浪。这本书的火爆还是要到后面他认识了伏尔泰，伏尔泰为他牵线，使得不少人知道了这部作品，另外他还和卢梭交好，虽说后续闹翻了，但是也客观上帮助其传播了他的思想。</p><p>最为关键的还是康德，康德读了他的第一卷人性论，对康德的哲学研究起了推动作用。因此，康德还在《纯粹理性批判》中提到了这件事，虽说康德也批判其思想，但是对其才华也不遗余力夸赞。使得其知名于欧洲。</p>]]></content>
    
    
    <categories>
      
      <category>阅读</category>
      
      <category>全历史</category>
      
      <category>历史</category>
      
      <category>英国史</category>
      
    </categories>
    
    
    <tags>
      
      <tag>article</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1742年 清歌剧之父：纵横两国的亨德尔</title>
    <link href="/2023/08/31/1742%E5%B9%B4%20%E6%B8%85%E6%AD%8C%E5%89%A7%E4%B9%8B%E7%88%B6%EF%BC%9A%E7%BA%B5%E6%A8%AA%E4%B8%A4%E5%9B%BD%E7%9A%84%E4%BA%A8%E5%BE%B7%E5%B0%94/"/>
    <url>/2023/08/31/1742%E5%B9%B4%20%E6%B8%85%E6%AD%8C%E5%89%A7%E4%B9%8B%E7%88%B6%EF%BC%9A%E7%BA%B5%E6%A8%AA%E4%B8%A4%E5%9B%BD%E7%9A%84%E4%BA%A8%E5%BE%B7%E5%B0%94/</url>
    
    <content type="html"><![CDATA[<p>亨德尔出生在德国萨克森，是当时神圣罗马帝国的一个属国，从小展现出很强的音乐天赋，后来神圣罗马帝国的汉诺威选帝侯乔治很喜欢他，让他担任宫廷乐长。于是1710年，亨德尔成了汉诺威宫廷乐长。</p><p>任职的头两年，他去英国转了两圈，发现这里流行意大利歌剧，这正是他的强项，因此他乐不思蜀，在这里办了剧团，创办了很多作品甚至征服了安妮女王。</p><p>但是三年后安妮女王去世，没有子嗣就从神圣罗马帝国请来亲戚，这个亲戚就是汉诺威选帝侯乔治。这样两人就尴尬的重逢了。</p><p>乔治非常不满其请长假，还变成了英国人。为了扭转乔治的不满，后来亨德尔创作了30多首作品，后来乔治也宽容的原谅了他。</p><p>亨德尔由此踏踏实实的呆在了英国。</p><p>但是随后由于乔治是外来人，不会说英语，遭到了本国詹姆斯党发动的叛乱，这次叛乱让大多剧院关门，亨德尔的也不例外。</p><p>随后在贵族的赞助下，还有他炒股（南海公司）赚了一笔钱，他又开了一所剧院，不过还是因为经营不佳倒闭了。</p><p>后来他分析原因，找到了英国人目前市场上最好的应该是通俗的清歌剧，随后这也成为了他创办第三个剧院的主要方向。</p><p>也正是这个选择他后来创作了《弥赛亚》，也就是前奏”哈利路亚”。受到其影响的音乐家不计其数，包括海顿受其影响创作了《创世纪》，莫扎特后来还专门改编它。同龄人巴赫，一直视其为偶像。贝多芬死后，房间里放着的也是他的音乐作品全集。</p>]]></content>
    
    
    <categories>
      
      <category>阅读</category>
      
      <category>全历史</category>
      
      <category>历史</category>
      
      <category>英国史</category>
      
    </categories>
    
    
    <tags>
      
      <tag>article</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1756年 七年战争：英法争霸的关键一战</title>
    <link href="/2023/08/31/1756%E5%B9%B4%20%E4%B8%83%E5%B9%B4%E6%88%98%E4%BA%89%EF%BC%9A%E8%8B%B1%E6%B3%95%E4%BA%89%E9%9C%B8%E7%9A%84%E5%85%B3%E9%94%AE%E4%B8%80%E6%88%98/"/>
    <url>/2023/08/31/1756%E5%B9%B4%20%E4%B8%83%E5%B9%B4%E6%88%98%E4%BA%89%EF%BC%9A%E8%8B%B1%E6%B3%95%E4%BA%89%E9%9C%B8%E7%9A%84%E5%85%B3%E9%94%AE%E4%B8%80%E6%88%98/</url>
    
    <content type="html"><![CDATA[<p>1740年奥地利开始了一场王位继承战，让欧洲各国的地位发生变化。英国抛弃了实力下降的奥地利转而同普鲁士结盟。奥地利女王特蕾西亚随后找到法国情妇蓬帕杜夫人和俄国女王伊丽萨白一世，三国因此而结盟史称“三条裙子同盟”。</p><p>英法在北美殖民地上爆发了冲突，最终两国在1756年互相宣战。</p><p>起初英普联军面对俄国和法国联军节节败退，毕竟两国是传统欧洲陆军强国。随后英国首相老皮特主张转变策略，利用其海军优势，进攻法国的殖民地。这一策略很成功，英国海外殖民地接连传来好消息。</p><p>在亚洲英国有英属印度，英印联军不足3000人对抗孟加拉7万军队，但是由于英国收买了孟加拉的将领和贵族，再加上在战争过程中，孟加拉军队遭遇大雨导致所有武器哑火，这场战争英军以少胜多，击败了法国支持的孟加拉军队。</p><p>但是普鲁士的境况就不是很好了，被俄国和奥地利打的焦头烂额，渐渐陷入了胶着困境。</p><p>随后，1761年老皮特辞职，因为因为常年战争导致国内普遍不满，最后英国还把普鲁士晾在一边和法国和谈。另外，俄国新上任的国王彼得三世以前出生在北德意志，由于十分崇拜普鲁士国王腓特烈大帝，于是和普鲁士签订了停战和平条约，由于普鲁士本身不够强，英国又停止了支持，顺势他也就结束了战争。</p><p>这场7年战争，参战各国均有得失，但是英国无疑是最大的赢家，得到了大片的殖民地，成了世界上拥有最多殖民地的国家。</p>]]></content>
    
    
    <categories>
      
      <category>阅读</category>
      
      <category>全历史</category>
      
      <category>历史</category>
      
      <category>英国史</category>
      
    </categories>
    
    
    <tags>
      
      <tag>article</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1764年 工业革命：珍妮纺纱机的诞生</title>
    <link href="/2023/08/31/1764%E5%B9%B4%20%E5%B7%A5%E4%B8%9A%E9%9D%A9%E5%91%BD%EF%BC%9A%E7%8F%8D%E5%A6%AE%E7%BA%BA%E7%BA%B1%E6%9C%BA%E7%9A%84%E8%AF%9E%E7%94%9F/"/>
    <url>/2023/08/31/1764%E5%B9%B4%20%E5%B7%A5%E4%B8%9A%E9%9D%A9%E5%91%BD%EF%BC%9A%E7%8F%8D%E5%A6%AE%E7%BA%BA%E7%BA%B1%E6%9C%BA%E7%9A%84%E8%AF%9E%E7%94%9F/</url>
    
    <content type="html"><![CDATA[<p>1764年英国兰开郡纺织工人詹姆斯 哈格里夫斯发明了珍妮纺纱机，大大提高了纺纱的效率。</p><p>当时英国的约翰凯伊发明了飞梭，这个发明将织布的效率翻了3倍，但是当时纺纱的效率很低，因此当时英国社会急需一种能够提高纺纱效率的机器。</p><p>詹姆斯一家人主营纺纱，他还做一些小机械补贴零用，家庭挺穷的，有一天他进门不小心弄翻了妻子的纺纱机，不料将其纱锭变成了直立的了，这就启发了他多装纱锭提高效率，随后发明了新机器，因为喜欢女儿所以取名女儿的名字珍妮机。</p><p>但是这个珍妮机的出现，并不讨喜，因为会使不少人失业，直接导致了他们一家遭到了不少人忌恨，挨打。随后他搬家，然后因为当年没申请到专利，这个时候有很多盗版，他不得不赶紧申请专利，这个时候才开始扩大规模贩卖珍妮机。这种机器的出现，启发了人们捣鼓新发明，成了工业革命起点的标志。</p>]]></content>
    
    
    <categories>
      
      <category>阅读</category>
      
      <category>全历史</category>
      
      <category>历史</category>
      
      <category>英国史</category>
      
    </categories>
    
    
    <tags>
      
      <tag>article</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1771年 工具书之王：《不列颠百科全书》</title>
    <link href="/2023/08/31/1771%E5%B9%B4%20%E5%B7%A5%E5%85%B7%E4%B9%A6%E4%B9%8B%E7%8E%8B%EF%BC%9A%E3%80%8A%E4%B8%8D%E5%88%97%E9%A2%A0%E7%99%BE%E7%A7%91%E5%85%A8%E4%B9%A6%E3%80%8B/"/>
    <url>/2023/08/31/1771%E5%B9%B4%20%E5%B7%A5%E5%85%B7%E4%B9%A6%E4%B9%8B%E7%8E%8B%EF%BC%9A%E3%80%8A%E4%B8%8D%E5%88%97%E9%A2%A0%E7%99%BE%E7%A7%91%E5%85%A8%E4%B9%A6%E3%80%8B/</url>
    
    <content type="html"><![CDATA[<p>十八世纪的启蒙运动正如火如荼开展，教育让各类读者群体开始壮大起来。彼时技术的进步也让印刷变得便宜起来，图书走进寻常百家。</p><p>这个时候出版商麦克法卡尔和雕刻家贝尔看到了商机想要出版一部百科全书。因为当时法国的狄德罗弄了一本，大获成功。他们找来学者斯梅利担任主编，报酬是200英镑。</p><p>斯梅利的知识量毋庸置疑，但是图书编订成了难题，此时他想到可以用字母作为分类的依据进行图书编撰，随后设计了检索方式，完成了图书，书中引用了论文，且文章保证通俗易懂照顾了高知人群和普通人群。随后交由麦克法卡尔和贝尔出版，他们第一时间进行宣传造作，随后这本书出版后由于其生动的写作风格，大获成功。</p><p>这本书对后世图书编撰影响巨大。</p>]]></content>
    
    
    <categories>
      
      <category>阅读</category>
      
      <category>全历史</category>
      
      <category>历史</category>
      
      <category>英国史</category>
      
    </categories>
    
    
    <tags>
      
      <tag>article</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1771年 发现澳洲：库克船长寻找“南方大陆”</title>
    <link href="/2023/08/31/1771%E5%B9%B4%20%E5%8F%91%E7%8E%B0%E6%BE%B3%E6%B4%B2%EF%BC%9A%E5%BA%93%E5%85%8B%E8%88%B9%E9%95%BF%E5%AF%BB%E6%89%BE%E2%80%9C%E5%8D%97%E6%96%B9%E5%A4%A7%E9%99%86%E2%80%9D/"/>
    <url>/2023/08/31/1771%E5%B9%B4%20%E5%8F%91%E7%8E%B0%E6%BE%B3%E6%B4%B2%EF%BC%9A%E5%BA%93%E5%85%8B%E8%88%B9%E9%95%BF%E5%AF%BB%E6%89%BE%E2%80%9C%E5%8D%97%E6%96%B9%E5%A4%A7%E9%99%86%E2%80%9D/</url>
    
    <content type="html"><![CDATA[<p>大航海时代来临，欧洲各国争相开始海上探险。</p><p>英国皇家学会计算出在1769年会有一次金星凌日的奇观，于是派出富有经验的库克去太平洋观测这一天文现象。</p><p>1768年库克率领奋进号启航沿着南美东岸到达了太平洋上的塔斯提岛，开始进行天文观测。观测完后，库克惦记英国海军寻找南方大陆的任务，随后启航寻找，但是航行了4个月一无所获，只能去新西兰补充资源，这个时候他发现了吃水果可以抑制败血症。</p><p>随后，他们继续往南航行，但是还是一无所获，随后库克下令返航，返航途中经过了澳大利亚北部海岸。遇到了澳洲土著，但是土著对他们发动了攻击，他们用手枪赶走了他们。随后他们回去告知了祖国，这个消息让全英国欣喜若狂，随后开展了对澳洲的统治。</p>]]></content>
    
    
    <categories>
      
      <category>阅读</category>
      
      <category>全历史</category>
      
      <category>历史</category>
      
      <category>英国史</category>
      
    </categories>
    
    
    <tags>
      
      <tag>article</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1771年 阿克莱特开创工厂制度</title>
    <link href="/2023/08/31/1771%E5%B9%B4%20%E9%98%BF%E5%85%8B%E8%8E%B1%E7%89%B9%E5%BC%80%E5%88%9B%E5%B7%A5%E5%8E%82%E5%88%B6%E5%BA%A6/"/>
    <url>/2023/08/31/1771%E5%B9%B4%20%E9%98%BF%E5%85%8B%E8%8E%B1%E7%89%B9%E5%BC%80%E5%88%9B%E5%B7%A5%E5%8E%82%E5%88%B6%E5%BA%A6/</url>
    
    <content type="html"><![CDATA[<p>阿克莱特本是一个理发师，靠着理发赚到了第一桶金，他对纺织业了解不多，但是听到珍妮机的故事所带来的巨大利益，也促使他投入到机器改装中去。</p><p>阿克莱特仿制了木匠海斯的设计，并提前拿到了水力纺纱机的专利，随后他就考察水里丰富的区域，随后选址在克莱普顿的地方。他想到以前家庭小作坊的方式效率低下，它将厂址选在水力好的地方，随后仿照陶瓷流水线式的制作工艺，将纺纱步骤分散，这样一个人可以管多台机器大幅度的提升效率。这就是工厂的生产模式。</p><p>1771年，阿克莱特和合伙人在克莱普顿建立了纺纱厂，雇佣了5000名工人，制定了严格的管理制度，他这样赚得盆满钵满。</p>]]></content>
    
    
    <categories>
      
      <category>阅读</category>
      
      <category>全历史</category>
      
      <category>历史</category>
      
      <category>英国史</category>
      
    </categories>
    
    
    <tags>
      
      <tag>article</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1774年 魁北克法案：别让加拿大闹独立</title>
    <link href="/2023/08/31/1774%E5%B9%B4%20%E9%AD%81%E5%8C%97%E5%85%8B%E6%B3%95%E6%A1%88%EF%BC%9A%E5%88%AB%E8%AE%A9%E5%8A%A0%E6%8B%BF%E5%A4%A7%E9%97%B9%E7%8B%AC%E7%AB%8B/"/>
    <url>/2023/08/31/1774%E5%B9%B4%20%E9%AD%81%E5%8C%97%E5%85%8B%E6%B3%95%E6%A1%88%EF%BC%9A%E5%88%AB%E8%AE%A9%E5%8A%A0%E6%8B%BF%E5%A4%A7%E9%97%B9%E7%8B%AC%E7%AB%8B/</url>
    
    <content type="html"><![CDATA[<p>7年战争后，英国从法国手中接手加拿大地区的魁北克地区，位于加拿大最东边区域。</p><p>起初英国人想要该地区快速融入英国，推行英国议会整体，改变宗教为英国国教，由于只有信奉国教才能从政，这直接导致信奉天主教的魁北克居民的强烈不满。</p><p>为了减少冲突维护统治，并且防止其他十三州的人对抗英国，英国推行了魁北克法案，规定维持原有的制度，保留天主教，还给了一些优惠的条款，这一举得到了魁北克人民的支持。但是却得罪了英国原有殖民地十三州，因为在美洲保留天主教，还给优惠条款引发了不满，但是即便是十三州打独立战争的时候，魁北克地区还是站在英国一方，帮助英国人镇压独立。</p>]]></content>
    
    
    <categories>
      
      <category>阅读</category>
      
      <category>全历史</category>
      
      <category>历史</category>
      
      <category>英国史</category>
      
    </categories>
    
    
    <tags>
      
      <tag>article</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1775年 北美殖民地的独立</title>
    <link href="/2023/08/31/1775%E5%B9%B4%20%E5%8C%97%E7%BE%8E%E6%AE%96%E6%B0%91%E5%9C%B0%E7%9A%84%E7%8B%AC%E7%AB%8B/"/>
    <url>/2023/08/31/1775%E5%B9%B4%20%E5%8C%97%E7%BE%8E%E6%AE%96%E6%B0%91%E5%9C%B0%E7%9A%84%E7%8B%AC%E7%AB%8B/</url>
    
    <content type="html"><![CDATA[<p>7年战争后，英国为了转嫁战争所带来的财政危机，大肆在北美动用行政手段压榨北美殖民地的资源，这激发了北美殖民地人民的不满，叛乱不断。</p><p>随后在莱克星顿英军被北美民兵伏击，死伤200人，至此英国加大了打击力度。随后，北美人民召开第二次大陆会议，组建了大陆军，华盛顿任领袖。</p><p>但是此时大陆军装备落后，且决心不强。但是，英国国王认定北美叛乱是叛国，想要建立国家，这下真的让北美人民起了建国的想法。1776年发表《独立宣言》13块殖民地正式宣布脱英。</p><p>起初北美军队在英国的围剿下节节败退，但是后来在萨拉托加，美军充分利用地形围剿了一只英军的部队，这就是后来的萨拉托加大捷，这次战斗后，之前在7年战争中受到苦头的法国被感动，转而支持北美。同事，荷兰，西班牙等国也加入了对抗英国的队伍中。</p><p>这个时候，英国内部由于战争高昂的征税，导致了国内物价疯涨，进而民众的不满，特别是爱尔兰还集结了一只八万人的部队，这些都给了英国人压力。</p><p>后来，外部，法国和西班牙在英吉利海峡开进战舰示威，虽然被打败，但是也给英国人造成了不少的麻烦。后来法国人还派了一只舰队去往北美，给英国人了很多压力。得到盟友的帮助，美军形势发生了转变，随后在约克镇附近又围剿了一只英军。</p><p>之后英国士气大跌，且国内盛行亚当斯密的自由经济学说，放美国自由可以成为贸易伙伴，这些都助长了英国停战的想法。</p><p>1782年11月，英美双方终于通过停战协议，次年《巴黎和约》签订，英国正式承认美国的独立。</p>]]></content>
    
    
    <categories>
      
      <category>阅读</category>
      
      <category>全历史</category>
      
      <category>历史</category>
      
      <category>英国史</category>
      
    </categories>
    
    
    <tags>
      
      <tag>article</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1776年 国富论：亚当斯密与经济学圣经</title>
    <link href="/2023/08/31/1776%E5%B9%B4%20%E5%9B%BD%E5%AF%8C%E8%AE%BA%EF%BC%9A%E4%BA%9A%E5%BD%93%E6%96%AF%E5%AF%86%E4%B8%8E%E7%BB%8F%E6%B5%8E%E5%AD%A6%E5%9C%A3%E7%BB%8F/"/>
    <url>/2023/08/31/1776%E5%B9%B4%20%E5%9B%BD%E5%AF%8C%E8%AE%BA%EF%BC%9A%E4%BA%9A%E5%BD%93%E6%96%AF%E5%AF%86%E4%B8%8E%E7%BB%8F%E6%B5%8E%E5%AD%A6%E5%9C%A3%E7%BB%8F/</url>
    
    <content type="html"><![CDATA[<p>18世纪，欧洲盛行中国文化，法国农学家魁奈根据儒家传统劝说路易十五进行春耕祭祀，鼓励农业生产。</p><p>斯密也受到其影响，认为农业经济里又自然有序，随后他回到英国把这些想法写出来，这就是《国富论》，一写写了七年，完后，又出现了新的理论，所以还得修订。最终在1776年，出版了《国富论》全称为《国民财富的性质和原因的研究》。</p><p>此时英国是重商主义，即鼓励出口，限制进口。为了减少财政压力，英国开始采用国富论的方法，开始自由贸易，这种想法刚好符合了国内工厂主的述求，他们需要商品的流通。</p><p>后来他的思想甚至影响了英国对北美的独立的态度，英国上层在自由贸易的思想影响下，认为维持全方面的统治成本太高，还不如让其独立，通过自由贸易双方受益。对于其他的殖民地也开始只注重经济统治，其他由其自治。</p><p>亚当斯密的《国富论》第一次阐述了经济自由主义，为资本主义经济自由贸易提供了理论基础，促进了英国工业化让英国贸易发展和殖民进入了新阶段。</p>]]></content>
    
    
    <categories>
      
      <category>阅读</category>
      
      <category>全历史</category>
      
      <category>历史</category>
      
      <category>英国史</category>
      
    </categories>
    
    
    <tags>
      
      <tag>article</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1776年 瓦特改进蒸汽机</title>
    <link href="/2023/08/31/1776%E5%B9%B4%20%E7%93%A6%E7%89%B9%E6%94%B9%E8%BF%9B%E8%92%B8%E6%B1%BD%E6%9C%BA/"/>
    <url>/2023/08/31/1776%E5%B9%B4%20%E7%93%A6%E7%89%B9%E6%94%B9%E8%BF%9B%E8%92%B8%E6%B1%BD%E6%9C%BA/</url>
    
    <content type="html"><![CDATA[<p>18世纪纽科门发明了蒸汽机，不过效率很低。1761年瓦特在格拉斯哥大学开了一个修理店，和学校关系不错，专门维修教学器材。</p><p>后来一台学校里有一台纽科门蒸汽机坏了，学校同意让瓦特来修理，瓦特凭借经验以及查找的参考材料修理好了蒸汽机，随后被这种机器吸引到了，想要改良这种蒸汽机。</p><p>两年后瓦特想到了提升效率的办法，设计了两处关键模型，但是要想机器建成需要国会批准和资金支持，他的第一任老板破产后，他也背了一屁股的债，但是第二任老板接手了其债务和专利，并且向国会打理关系。后来1776年瓦特蒸汽机建成投产。但是这个能上下运动，只适合抽水，他就花了五年时间帮助矿场部署这类机器。</p><p>随后他改进了蒸汽机，让机器可以做圆周运动，这就是万能蒸汽机，1784年获得了专利。他的这项发明很快运用到很多机器上，发明工厂制度的阿克莱特很快也用上了他的这个机器，至此打破水力的限制。</p>]]></content>
    
    
    <categories>
      
      <category>阅读</category>
      
      <category>全历史</category>
      
      <category>历史</category>
      
      <category>英国史</category>
      
    </categories>
    
    
    <tags>
      
      <tag>article</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1799年 欧文的实验：空想社会主义</title>
    <link href="/2023/08/31/1799%E5%B9%B4%20%E6%AC%A7%E6%96%87%E7%9A%84%E5%AE%9E%E9%AA%8C%EF%BC%9A%E7%A9%BA%E6%83%B3%E7%A4%BE%E4%BC%9A%E4%B8%BB%E4%B9%89/"/>
    <url>/2023/08/31/1799%E5%B9%B4%20%E6%AC%A7%E6%96%87%E7%9A%84%E5%AE%9E%E9%AA%8C%EF%BC%9A%E7%A9%BA%E6%83%B3%E7%A4%BE%E4%BC%9A%E4%B8%BB%E4%B9%89/</url>
    
    <content type="html"><![CDATA[<p>18世纪的英国，贫富差距拉大，人民工作环境困苦，在这样的环境下，人们渴望寻求一种人人平等的生活方式。欧文就是为了实现这种生活的践行者之一。</p><p>欧文经营过工厂，通过提高工人待遇的方式，反而让整体效益提升，这让他深信这条道路是正确的。</p><p>后来有一个机会，他得到戴尔的赏识去管理新纳拉克工厂。当时工厂效益很差，工人素质很低，为了扭转这种形式，欧文通过提高工人待遇，例如设置奖励，改善工作环境，提供更多休息时间等等，让工厂效益提升很大，成为各大工厂学习的典范。即便是当时社会上经济效益都不太好，欧文的工厂都还是能够盈利不跨。</p><p>后来，欧文甚至向英国政府提议改善全体英国劳工的待遇，但是英国刚经历了和法国拿破仑的战争，国内很需要发展，并且现在是工人求着工作，不会在意工作环境。在这种形势下，欧文的工厂效益也慢慢不好了，最终破产。</p><p>随后欧文不甘心还去北美办了类似的工厂，但是最终都以失败而告终。</p>]]></content>
    
    
    <categories>
      
      <category>阅读</category>
      
      <category>全历史</category>
      
      <category>历史</category>
      
      <category>英国史</category>
      
    </categories>
    
    
    <tags>
      
      <tag>article</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1801年 圈地运动</title>
    <link href="/2023/08/31/1801%E5%B9%B4%20%E5%9C%88%E5%9C%B0%E8%BF%90%E5%8A%A8/"/>
    <url>/2023/08/31/1801%E5%B9%B4%20%E5%9C%88%E5%9C%B0%E8%BF%90%E5%8A%A8/</url>
    
    <content type="html"><![CDATA[<p>英国早在13世纪就有了圈地这种说法，只是那个时候圈地要经历很多手续，很繁琐。</p><p>1792年，英国卷入战争，因此为保证粮食供应积极鼓励圈地运动。此时，小皮特还成立了一个农林委员会，专门负责圈地，也正是看到了这些繁琐的手续，导致圈地效率低，促使出台了法案，简化了圈地的手续。</p><p>但是手续是简化了，但是手段并没有合法化，例如有些贵族资本家，圈地的时候损害农民的权益，有的甚至采用暴力手段烧毁农民房屋等。因此相关的法律，直到20世纪才完善。</p><p>客观来说，圈地运动使失去土地的农民被迫涌入城市，提供了很多自由劳动者。</p>]]></content>
    
    
    <categories>
      
      <category>阅读</category>
      
      <category>全历史</category>
      
      <category>历史</category>
      
      <category>英国史</category>
      
    </categories>
    
    
    <tags>
      
      <tag>article</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1805年 特拉法加海战</title>
    <link href="/2023/08/31/1805%E5%B9%B4%20%E7%89%B9%E6%8B%89%E6%B3%95%E5%8A%A0%E6%B5%B7%E6%88%98/"/>
    <url>/2023/08/31/1805%E5%B9%B4%20%E7%89%B9%E6%8B%89%E6%B3%95%E5%8A%A0%E6%B5%B7%E6%88%98/</url>
    
    <content type="html"><![CDATA[<p>1803年，英国处于制衡法国，重燃与法国的战火，随着1804年拿破仑称帝，两国对抗更加激烈</p><p>法国击败西班牙后，获得了西班牙的全部舰队，加上本身的舰队，法国在海军上数量优于英国人。</p><p>英国的海军将领使纳尔逊，曾经在埃及的尼罗河口击败过法国舰队，法国舰队将领维尔纳夫，就是那个在尼罗河口被击败的法国将领。由于法国人实在找不到海军将领了，又信不过西班牙人，只好让他担任主帅。</p><p>维尔纳夫清楚自己实力不行，可能会被换下去，因此实行冒进的策略，寻找英国舰队企图通过数量压倒英国海军。随后，在特拉法附近，双方遭遇，大战开始。</p><p>但是，维尔纳夫急匆匆赶来，却临时怯战，下达了随时准备撤退的命令，导致法军阵营起初大乱，英军见法军这样，随后抓紧机会突击法军。随后法军舰队遭遇重创，但是法军狙击手击中了纳尔逊，纳尔逊为稳定军心，自己蒙面，最终还是击败了法国舰队。</p><p>这一战，直接导致英国100年时间的海军霸权地位，同时也让法国只能向东扩张。</p>]]></content>
    
    
    <categories>
      
      <category>阅读</category>
      
      <category>全历史</category>
      
      <category>历史</category>
      
      <category>英国史</category>
      
    </categories>
    
    
    <tags>
      
      <tag>article</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1815年 维也纳体系的建立</title>
    <link href="/2023/08/31/1815%E5%B9%B4%20%E7%BB%B4%E4%B9%9F%E7%BA%B3%E4%BD%93%E7%B3%BB%E7%9A%84%E5%BB%BA%E7%AB%8B/"/>
    <url>/2023/08/31/1815%E5%B9%B4%20%E7%BB%B4%E4%B9%9F%E7%BA%B3%E4%BD%93%E7%B3%BB%E7%9A%84%E5%BB%BA%E7%AB%8B/</url>
    
    <content type="html"><![CDATA[<p>1799年拿破仑通过雾月政变夺取权力后，多次击败反法联盟，但是最终还是在滑铁卢战败。</p><p>为了处理战败后的法国，英国，普鲁士，奥地利，俄国一起在维也纳开会，建立了维也纳体系。</p><p>英国的由于忙于世界殖民地的建设，对于欧洲并没有以前那么热心，但也不希望欧洲出现一个强权，因此对欧洲实行制衡政策。会议中其他国家也有自己的利益考量，例如俄国想要进军西欧，英国不想让欧洲出现俄国强权，想要奥地利和普鲁士共同对付俄国，几经磋商由三国瓜分了波兰。法国这边也不能太弱，英国就瓜分了法国在海外的殖民地，后来看其他国家也太强了，还归还了部分殖民地。</p><p>后来，为了维持条约的稳定，俄罗斯牵头，奥地利普鲁士建立了神圣同盟，后来还加入了英国，以及君主上台后的法国。后来这个同盟就是为了维持君主制，以及各国的利益。</p>]]></content>
    
    
    <categories>
      
      <category>阅读</category>
      
      <category>全历史</category>
      
      <category>历史</category>
      
      <category>英国史</category>
      
    </categories>
    
    
    <tags>
      
      <tag>article</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1822年 雪莱之死：浪漫主义三巨头的命运</title>
    <link href="/2023/08/31/1822%E5%B9%B4%20%E9%9B%AA%E8%8E%B1%E4%B9%8B%E6%AD%BB%EF%BC%9A%E6%B5%AA%E6%BC%AB%E4%B8%BB%E4%B9%89%E4%B8%89%E5%B7%A8%E5%A4%B4%E7%9A%84%E5%91%BD%E8%BF%90/"/>
    <url>/2023/08/31/1822%E5%B9%B4%20%E9%9B%AA%E8%8E%B1%E4%B9%8B%E6%AD%BB%EF%BC%9A%E6%B5%AA%E6%BC%AB%E4%B8%BB%E4%B9%89%E4%B8%89%E5%B7%A8%E5%A4%B4%E7%9A%84%E5%91%BD%E8%BF%90/</url>
    
    <content type="html"><![CDATA[<p>慈济雪莱拜伦时英国的浪漫主义诗人。<br>慈济出生在普通家庭，但是对浪漫主义诗歌感兴趣，为了生存当了一名医生，但是私下一直坚持文学创作，随后拜入名师学习，随后写出了《孤独》但反响不好，随后迫于生存压力，不停搬家，后来在一棵李子树下写出名篇《夜莺颂》但是反响也不好，最终患上肺结核，26岁就去世了。</p><p>雪莱也是一个浪漫主义诗人，在日内瓦和拜伦相遇，两者相见如故，不就成为好友。不过在慈济去世后两年，雪莱溺死，而后六年拜伦在希腊的独立战争中死去。</p>]]></content>
    
    
    <categories>
      
      <category>阅读</category>
      
      <category>全历史</category>
      
      <category>历史</category>
      
      <category>英国史</category>
      
    </categories>
    
    
    <tags>
      
      <tag>article</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1831年 电气时代：法拉第与麦克斯韦奠基</title>
    <link href="/2023/08/31/1831%E5%B9%B4%20%E7%94%B5%E6%B0%94%E6%97%B6%E4%BB%A3%EF%BC%9A%E6%B3%95%E6%8B%89%E7%AC%AC%E4%B8%8E%E9%BA%A6%E5%85%8B%E6%96%AF%E9%9F%A6%E5%A5%A0%E5%9F%BA/"/>
    <url>/2023/08/31/1831%E5%B9%B4%20%E7%94%B5%E6%B0%94%E6%97%B6%E4%BB%A3%EF%BC%9A%E6%B3%95%E6%8B%89%E7%AC%AC%E4%B8%8E%E9%BA%A6%E5%85%8B%E6%96%AF%E9%9F%A6%E5%A5%A0%E5%9F%BA/</url>
    
    <content type="html"><![CDATA[<p>法拉第出生于一个贫穷的铁匠家庭，读了两年书就去铁匠铺当了学徒。他的一个老主顾被他的好学精神打动，带他去英国皇家学会听了戴维的讲座，讲座完毕后，法拉第抓紧机会将自己的笔记交给了戴维，戴维也被他的好学精神打动了，让他留下来作为他的学徒。</p><p>不过他这个学徒只能做一些端茶倒水，收拾资料的杂事，没有资格和戴维上餐桌和权贵商讨。法拉第也因此有点不满。</p><p>随后因为一次实验，法拉第误打误撞发现变化的磁场能够产生电力，但是由于英国有个不成文的规矩，如果导师研究某一领域，那么其学徒就不能从事该领域的研究。但是法拉第忍不住朋友的劝说，发表了论文，此举引燃了法拉第和戴维的矛盾。</p><p>因此法拉第的论文发表就有很多质疑的声音，说论文是抄袭的老师的，戴维并没有出面澄清，并且让法拉第转而研究其他领域。直到戴维死后，法拉第才又转向电磁学研究，戴维死之前也说，他最伟大的发现是发现了法拉第。</p><p>在法拉第发现电磁感应的那年，麦克斯韦在苏格兰出生了。他的人生像开了挂一样，19岁进入剑桥，23岁就毕业了看了法拉第的论文，从而对电磁感应产生了浓厚的兴趣。由于法拉第对于数学不太擅长，只擅长做实验，当时欧洲的风向也开始偏向于理论的研究，而数学是麦克斯韦的强项，后来写作了《电磁学的动力学理论》，搞了个方程组来解释整个电磁理论。这个的意义不亚于牛顿发现重力。</p>]]></content>
    
    
    <categories>
      
      <category>阅读</category>
      
      <category>全历史</category>
      
      <category>历史</category>
      
      <category>英国史</category>
      
    </categories>
    
    
    <tags>
      
      <tag>article</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1832年 议会改革</title>
    <link href="/2023/08/31/1832%E5%B9%B4%20%E8%AE%AE%E4%BC%9A%E6%94%B9%E9%9D%A9/"/>
    <url>/2023/08/31/1832%E5%B9%B4%20%E8%AE%AE%E4%BC%9A%E6%94%B9%E9%9D%A9/</url>
    
    <content type="html"><![CDATA[<p>随着工业革命的进行，农业不再是英国经济的支柱，工业逐渐重要起来。</p><p>但是，英国的议会人员分配还是和往常一样，新兴的工业城市并不是选取，英国的旧贵族仍然把持大权。</p><p>在这个背景下，英国新兴工厂主急需改变选举现状，增加议会代表为其发声。但是，改革之路困难重重，工厂主即便掌握了下议院，上议院还是会卡住他们的提案。</p><p>随后，工厂主们联合起来，强兑了英国银行的黄金，这么做会导致钱币信用崩溃，最终英国政府还是服软了，通过了改革法案，让议会名额按区域划分更加均匀。</p>]]></content>
    
    
    <categories>
      
      <category>阅读</category>
      
      <category>全历史</category>
      
      <category>历史</category>
      
      <category>英国史</category>
      
    </categories>
    
    
    <tags>
      
      <tag>article</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1833年 《废奴法案》颁布</title>
    <link href="/2023/08/31/1833%E5%B9%B4%20%E3%80%8A%E5%BA%9F%E5%A5%B4%E6%B3%95%E6%A1%88%E3%80%8B%E9%A2%81%E5%B8%83/"/>
    <url>/2023/08/31/1833%E5%B9%B4%20%E3%80%8A%E5%BA%9F%E5%A5%B4%E6%B3%95%E6%A1%88%E3%80%8B%E9%A2%81%E5%B8%83/</url>
    
    <content type="html"><![CDATA[<p>十八世纪中后期，黑奴的悲惨生活逐渐被抖露出来，人们普遍开始同情黑人，各地纷纷成立废除黑奴制的民间支持团体。</p><p>威廉·威伯福斯受到福音派牧师约翰·纽顿的影响，知道了黑人的悲惨命运，并且福音派本身就主张上帝面前人人平等，促使了威伯福斯开始从政，致力于废奴运动。</p><p>由于工业革命的蓬勃发展，英国的经济重心也开始由殖民地转向到本土。比起殖民地远程管理，治理的成本，国内的工业发展要划算得多。早先在海外的西印度派，利用关系疯抬国内糖类价格，这下本土派实力起来了，势必要打击西印度派，首当其冲的就是废除奴隶制。因此他们也看上了威伯福斯，让他扛起大旗正面抨击奴隶制度。</p><p>他们率先在法律上废除了奴隶贸易，但是奴隶制度依旧存在于殖民地中，因为英国规定过公民财产不容侵犯，解放奴隶是损害奴隶主的私人财产。后来，英国通过议会改革，更多的工厂主进入到议会，在他们一轮轮的抨击下，英国和殖民农场主商讨以贷款的方式换奴隶自由，就此英国彻底废除了奴隶制。</p>]]></content>
    
    
    <categories>
      
      <category>阅读</category>
      
      <category>全历史</category>
      
      <category>历史</category>
      
      <category>英国史</category>
      
    </categories>
    
    
    <tags>
      
      <tag>article</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1836年 宪章运动：工人们的首次斗争运动</title>
    <link href="/2023/08/31/1836%E5%B9%B4%20%E5%AE%AA%E7%AB%A0%E8%BF%90%E5%8A%A8%EF%BC%9A%E5%B7%A5%E4%BA%BA%E4%BB%AC%E7%9A%84%E9%A6%96%E6%AC%A1%E6%96%97%E4%BA%89%E8%BF%90%E5%8A%A8/"/>
    <url>/2023/08/31/1836%E5%B9%B4%20%E5%AE%AA%E7%AB%A0%E8%BF%90%E5%8A%A8%EF%BC%9A%E5%B7%A5%E4%BA%BA%E4%BB%AC%E7%9A%84%E9%A6%96%E6%AC%A1%E6%96%97%E4%BA%89%E8%BF%90%E5%8A%A8/</url>
    
    <content type="html"><![CDATA[<p>随着大工厂主大商人们纷纷进入议会，作为工业革命的主力群体工人却没有权力进入议会，因为英国规定进入议会需要一定的财政基础，这引发了工人们的不满，随后工人们组织起来发起了宪章运动。</p><p>第一次宪章运动，发动了128万人请愿，但是由于一部分冲动的起义军冒了出来导致请愿暗淡收场。</p><p>随后很快1840年第二次宪章运动兴起，奥康诺任领袖，这次还加了改善工人环境以及缩减工时，请愿人数是上次的两倍，还有罢工运动，但是随着奥康诺等领袖被逮捕，第二次运动也不了了之。</p><p>随后法国爆发二月革命，让英国工人又振奋起来，这次15万人带了550万的签名，甚至惊动了英国政府出动军队恐吓游行队伍，当时天气很热双方冲突似乎要爆发的时候，奥康诺怕摊上事，后面还是解散了游行的队伍。第三次宪章运动也宣告失败。</p>]]></content>
    
    
    <categories>
      
      <category>阅读</category>
      
      <category>全历史</category>
      
      <category>历史</category>
      
      <category>英国史</category>
      
    </categories>
    
    
    <tags>
      
      <tag>article</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1838年 狄更斯：《雾都孤儿》</title>
    <link href="/2023/08/31/1838%E5%B9%B4%20%E7%8B%84%E6%9B%B4%E6%96%AF%EF%BC%9A%E3%80%8A%E9%9B%BE%E9%83%BD%E5%AD%A4%E5%84%BF%E3%80%8B/"/>
    <url>/2023/08/31/1838%E5%B9%B4%20%E7%8B%84%E6%9B%B4%E6%96%AF%EF%BC%9A%E3%80%8A%E9%9B%BE%E9%83%BD%E5%AD%A4%E5%84%BF%E3%80%8B/</url>
    
    <content type="html"><![CDATA[<p>狄更斯出生于贫穷的一个家庭，很小的时候就当了童工，20多岁的时候在记者岗位上历练后，开始连载小说，这使他一举成名。</p><p>他当时的年代是维多利亚时期，人们普遍认为自己的贫困都是自己的不努力造成的，而狄更斯的经历似乎也应证了这一点。</p><p>后来狄更斯开始连载《雾都孤儿》，这部作品讲述了一个在伦敦济贫院成长的孩子，再缺少资金的情况下，吃饭穿衣都成问题的生活，每天还需要高强度工作。济贫院需要工作，也是来源于英国出台的新济贫法，里面贯彻了维多利亚时期的普遍价值观，勤劳致富。</p><p>这部作品受到了广泛的关注，引发了人们对童工境遇的同情，是一部现实主义批判小说，狄更斯也算是这类题材的奠基人。</p>]]></content>
    
    
    <categories>
      
      <category>阅读</category>
      
      <category>全历史</category>
      
      <category>历史</category>
      
      <category>英国史</category>
      
    </categories>
    
    
    <tags>
      
      <tag>article</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1840年 鸦片战争</title>
    <link href="/2023/08/31/1840%E5%B9%B4%20%E9%B8%A6%E7%89%87%E6%88%98%E4%BA%89/"/>
    <url>/2023/08/31/1840%E5%B9%B4%20%E9%B8%A6%E7%89%87%E6%88%98%E4%BA%89/</url>
    
    <content type="html"><![CDATA[<p>19世纪开始，英国向中国倾销鸦片以挽回在茶叶方面的贸易逆差。而后，清政府命林则徐虎门销烟，直接导致了中国和英国之间的战争。</p><p>英国方面称这次战争为第一次中英战争，或通商战争。英国此时的首相奉行”炮舰”政策，在议会投票之前就将军舰开往中国，虽然而后的投票结果也是偏向于首相这边的。</p><p>第一次战斗英方很快就击沉了中国的几艘战舰，而后道光派人谈判，说允许和英国通商，但是一直谈了几个月没结果，英军直接攻占了虎门炮台，第二天还攻占了香港岛。当时指挥作战的琦善和英军签订条约，割让香港岛。</p><p>但是英国人并不满足，而后又派军攻占虎门要塞占据了珠江的重要据点，当时的指挥作战的奕山被迫签订条约赔偿署城费600万两。而后英国人发现清政府挺好打，于是又出兵攻占厦门宁波等地，最后迫使清政府签订了《南京条约》。</p>]]></content>
    
    
    <categories>
      
      <category>阅读</category>
      
      <category>全历史</category>
      
      <category>历史</category>
      
      <category>英国史</category>
      
    </categories>
    
    
    <tags>
      
      <tag>article</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1846年 废除谷物法</title>
    <link href="/2023/08/31/1846%E5%B9%B4%20%E5%BA%9F%E9%99%A4%E8%B0%B7%E7%89%A9%E6%B3%95/"/>
    <url>/2023/08/31/1846%E5%B9%B4%20%E5%BA%9F%E9%99%A4%E8%B0%B7%E7%89%A9%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<p>拿破仑战争时期，英国为了应付战争需要，本土贵族大力投资农业，战争结束后进口恢复，贵族投资的农业遭到巨大损失，在这个背景下，推出了谷物法，规定只能采购本土的粮食，这项规定大幅度提高了农产品的价格。</p><p>这就引发了很多人的不满，其中大工厂主因为谷物法过高的粮价，就需要为工人买单，另外谷物法不符合自由贸易的原则，这些都是大工厂主所反对的。为此，工厂主为了说服废除谷物法，告诉工人工资很大部分被谷物收割了，告诉农民谷物大部分利润被贵族拿走了。为此还成立经济学人，专门写小册子宣传。</p><p>另外为了在选民上造势，还专门给部分没有资产的人钱，让其成为选民为其造势。但是保守派也成立了中央农业保护协会保护农业，告诉工人农业价格提高资本家也只会降低工资，粮价的下降只会导致农民更加贫困而已。</p><p>这样双方争锋相对，最后一个契机是爱尔兰饥荒，由于其作为马铃薯的主食闹了瘟疫又不能进口食物，这就造成了大规模的饥荒。时任英国首相的皮尔，虽然是保守派代表，但是在站在废除谷物法这方，他清楚看到废除后对英国更有利。因此，他也通过演讲等方式，最终还是通过了废除谷物法的决议。</p>]]></content>
    
    
    <categories>
      
      <category>阅读</category>
      
      <category>全历史</category>
      
      <category>历史</category>
      
      <category>英国史</category>
      
    </categories>
    
    
    <tags>
      
      <tag>article</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1851年 万国博览会</title>
    <link href="/2023/08/31/1851%E5%B9%B4%20%E4%B8%87%E5%9B%BD%E5%8D%9A%E8%A7%88%E4%BC%9A/"/>
    <url>/2023/08/31/1851%E5%B9%B4%20%E4%B8%87%E5%9B%BD%E5%8D%9A%E8%A7%88%E4%BC%9A/</url>
    
    <content type="html"><![CDATA[<p>随着英国工业革命的发展，英国国力得到空前提升，维多利亚女王的丈夫阿尔伯特亲王对科学十分推崇，在国内办了大大小小的博览会很多次，现在他想要邀请世界各国，办一次博览会。</p><p>首先是邀请了很多国家，随后成立皇家委员会筹款，然后说服反对派。最终还是在伦敦办成了。</p><p>此次博览会还邀请了其他世界各国14000万藏品，不过大多都是农业品，在英国工业品的衬托下，英国的工业品就是在秀肌肉，这也让其他世界各国看到了工业化的好处。并且世博会本身还让英国赚到了不少钱，名望也收获了不少，这也导致世界各国后来抢着办世博会。</p>]]></content>
    
    
    <categories>
      
      <category>阅读</category>
      
      <category>全历史</category>
      
      <category>历史</category>
      
      <category>英国史</category>
      
    </categories>
    
    
    <tags>
      
      <tag>article</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1852年 爱尔兰大饥荒</title>
    <link href="/2023/08/31/1852%E5%B9%B4%20%E7%88%B1%E5%B0%94%E5%85%B0%E5%A4%A7%E9%A5%A5%E8%8D%92/"/>
    <url>/2023/08/31/1852%E5%B9%B4%20%E7%88%B1%E5%B0%94%E5%85%B0%E5%A4%A7%E9%A5%A5%E8%8D%92/</url>
    
    <content type="html"><![CDATA[<p>爱尔兰从1801同英国合并后，英国一直把爱尔兰当成殖民地来看待，发展自己的工业，倾销工业品使得爱尔兰手工业被摧毁。那么爱尔兰支柱的产业就只有农业了。同时，在爱尔兰的大部分土地被英国大地主占据了，爱尔兰人只能拿到很多支离破碎的小土地且环境恶劣，在这种情况下，只能种植适应性强的土豆了。<br>在1845年-1852年爱尔兰农业产品中最主要的马铃薯，感染了真菌很快这种真菌感染了整个爱尔兰，导致爱尔兰农民颗粒无收。这个时候英国人的态度是奉行自由贸易原则，对爱尔兰这边的情况选择忽视，甚至还将爱尔兰的粮食运出去，并且这个时候英国人还废除了谷物法，虽说放开了对国外农产品的进口。但是也导致农产品价格大幅下降，爱尔兰人没捞到好处，同时英国的大地主在利益的驱使下开始搞畜牧业，这进一步加重了爱尔兰的食物短缺，又导致价格上涨，这让资本家又狠狠了赚了一笔钱。<br>这个时候英国还修订了《济贫法》，爱尔兰人想要进济贫院就要放弃土地，但是即便进去了济贫院也会因为恶劣的生存环境处于生存边缘，还需要劳动换取食物，英国人的算盘打得很响。<br>这个时候奥斯曼的苏丹都看不下去了想要捐款1万英镑,但因为维多利亚女王只捐了2000，于是劝说其捐了1000。<br>英国人的种种行径，让爱尔兰人不得不背井离乡去往英国或者北美殖民地，但是到了各地都还是饱受歧视，这也为爱尔兰独立埋下了仇恨的种子。</p>]]></content>
    
    
    <categories>
      
      <category>阅读</category>
      
      <category>全历史</category>
      
      <category>历史</category>
      
      <category>英国史</category>
      
    </categories>
    
    
    <tags>
      
      <tag>article</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1853年 首次现代战争：克里米亚战争</title>
    <link href="/2023/08/31/1853%E5%B9%B4%20%E9%A6%96%E6%AC%A1%E7%8E%B0%E4%BB%A3%E6%88%98%E4%BA%89%EF%BC%9A%E5%85%8B%E9%87%8C%E7%B1%B3%E4%BA%9A%E6%88%98%E4%BA%89/"/>
    <url>/2023/08/31/1853%E5%B9%B4%20%E9%A6%96%E6%AC%A1%E7%8E%B0%E4%BB%A3%E6%88%98%E4%BA%89%EF%BC%9A%E5%85%8B%E9%87%8C%E7%B1%B3%E4%BA%9A%E6%88%98%E4%BA%89/</url>
    
    <content type="html"><![CDATA[<p>7年战争后，欧洲签订了《维也纳条约》主要是维护的秩序稳定，防止出现一个过强的势力。而自那以后，俄国的实力大增，奥斯曼的势力则日渐衰微，俄国则将势力伸向巴尔干半岛对奥斯曼土耳其帝国宣战。<br>起初英法希望通过谈判的手段和平解决冲突，但是随着奥斯曼在锡诺普海战中战败，导致海军全灭，英法开始商讨联合对俄罗斯宣战。<br>在海军上面俄国打不过英法联军，但是在陆军上，英法的实力不如俄国，单是围攻一个塞瓦斯托波尔，就耗费了300多天，最后虽然胜利了，但是还是惨胜。这场战争结束后，俄国打消了往欧洲扩张的念头，同时也促使了英国开始自己内部的改革。</p>]]></content>
    
    
    <categories>
      
      <category>阅读</category>
      
      <category>全历史</category>
      
      <category>历史</category>
      
      <category>英国史</category>
      
    </categories>
    
    
    <tags>
      
      <tag>article</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1854年 文官制度改革</title>
    <link href="/2023/08/31/1854%E5%B9%B4%20%E6%96%87%E5%AE%98%E5%88%B6%E5%BA%A6%E6%94%B9%E9%9D%A9/"/>
    <url>/2023/08/31/1854%E5%B9%B4%20%E6%96%87%E5%AE%98%E5%88%B6%E5%BA%A6%E6%94%B9%E9%9D%A9/</url>
    
    <content type="html"><![CDATA[<p>英国经历过议会改革后，财力雄厚的人进入到议会，使议会的行政能力大幅提升，但是其中的底层行政官员，也就是公务员，还是由贵族指定的，也就是恩赐制导致行政效率低下且腐败。<br>这种情况下，屈威廉以前在东印度公司干过，那里为了贸易盈利，采用了文官制度也就是考试，有能力的人才能当官，这种制度下的东印度公司的管理层行政能力远远高于英国的政府行政能力。当他回到了议会后，就一直想要推行这样的文官制度，不过阻力也很大，毕竟当时英国的权力很大部分还是由部分旧贵族把持的，支持的自由党实力还不足以颠覆根本制度。<br>但无独有偶，英国对俄罗斯宣战后，在塞瓦斯托波尔派军3.5w人，结果损失惨重，但是大部分人并非死于炮火，而是死于效率低下贪腐官员提供的后勤保障。这件事情后，英国民愤也因此被激发，在民愤的压力下，英国首相下台，而新上任的首相通过两道枢密院的指令，实行了文官制度。</p>]]></content>
    
    
    <categories>
      
      <category>阅读</category>
      
      <category>全历史</category>
      
      <category>历史</category>
      
      <category>英国史</category>
      
    </categories>
    
    
    <tags>
      
      <tag>article</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1857年 印度民族大起义</title>
    <link href="/2023/08/31/1857%E5%B9%B4%20%E5%8D%B0%E5%BA%A6%E6%B0%91%E6%97%8F%E5%A4%A7%E8%B5%B7%E4%B9%89/"/>
    <url>/2023/08/31/1857%E5%B9%B4%20%E5%8D%B0%E5%BA%A6%E6%B0%91%E6%97%8F%E5%A4%A7%E8%B5%B7%E4%B9%89/</url>
    
    <content type="html"><![CDATA[<p>1600年英国设立的东印度公司控制印度，通过分化王公贵族的方式逐步控制了整个印度，但是在推行西化政策的同时，和当地的文化宗教起了冲突。<br>冲突的导火索是英国将涂有牛油的子弹发给了印度士兵，但是印度大部分信奉印度教或者伊斯兰教这两种宗教忌讳吃牛肉或者猪肉，再加之之前的种种区别对待，这导致这些印度雇佣兵打响了反对英国统治的第一枪。<br>随后，各地掀起了起义运动，因为不满英国的统治政策的王宫贵族也有不少，他们害怕英国逐步蚕食自己的领地，同时底层人民也反对英国的强硬宗教政策。<br>在这次运动中，章西女王是一个典型。按照英国律法规定，如果王公贵族后代无子嗣，那么他们的土地继承权将被英国收回，章西女王为了捍卫自己的领地，率领士兵拼死抵抗，但是还是不敌英国士兵，她也被称为印度的贞德。<br>这次起义运动最终还是失败了，因为并非全部领主都是一条心，他们比起赶走殖民者，更想维持社会的稳定，甚至还有一些领主协助英国镇压。英国也是利用此，分化各地领主，最终镇压了这次起义。<br>这次起义也让英国人改变了殖民策略，开始直辖管理印度，废除了莫卧儿王国国王，印度的莫卧儿王朝也就此结束。</p>]]></content>
    
    
    <categories>
      
      <category>阅读</category>
      
      <category>全历史</category>
      
      <category>历史</category>
      
      <category>英国史</category>
      
    </categories>
    
    
    <tags>
      
      <tag>article</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1859年 物种起源</title>
    <link href="/2023/08/31/1859%E5%B9%B4%20%E7%89%A9%E7%A7%8D%E8%B5%B7%E6%BA%90/"/>
    <url>/2023/08/31/1859%E5%B9%B4%20%E7%89%A9%E7%A7%8D%E8%B5%B7%E6%BA%90/</url>
    
    <content type="html"><![CDATA[<p>随着工业革命，科技发展，同时英国在海外建立了各类殖民地，人们前往世界各地变得更加容易，这就促使人们更加想要寻求博学知识。<br>在这个背景下，达尔文前往世界各地环球考察世界各地，并写成了小册子，《一个博物学家的考察日志》。这份小册子被植物学家胡克看见，对其非常感兴趣，并且在去考察南极之前见了达尔文一面，考察结束后。回国后，更进一步和达尔文接触，两人突然发现都认识赖尔教授，并且在教授的帮助下整理了各类见闻，写成了《物种起源》的雏形。<br>当时整理的时候，华莱士也在研究同样的领域，并且准备发表论文，这个时候赖尔催促达尔文赶紧发表，但是书中还有一些关键证据需要确认，于是只能折衷的让两人论文同时发表，让伦敦学会评判。但是华莱士看了达尔文的论文，被其观点影响转而支持达尔文。<br>论文的发表导致这本书还没出版，就引发了热议。而后刚出版1250本册子，一下被抢空，读后褒贬不一。教会对其嗤之以鼻，还嘲讽达尔文是猴子的后代；但也有赫胥黎这样的，支持达尔文的观点。</p>]]></content>
    
    
    <categories>
      
      <category>阅读</category>
      
      <category>全历史</category>
      
      <category>历史</category>
      
      <category>英国史</category>
      
    </categories>
    
    
    <tags>
      
      <tag>article</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1882年 占领埃及</title>
    <link href="/2023/08/31/1882%E5%B9%B4%20%E5%8D%A0%E9%A2%86%E5%9F%83%E5%8F%8A/"/>
    <url>/2023/08/31/1882%E5%B9%B4%20%E5%8D%A0%E9%A2%86%E5%9F%83%E5%8F%8A/</url>
    
    <content type="html"><![CDATA[<p>埃及在1875年爆发了财政危机，英国乘机买了苏伊士运河的股票，并同法国一同管理埃及，逐渐控制了埃及的经济。<br>当时的英国首相格莱斯顿，并不满足现状，想要出兵占领埃及。<br>随后，埃及爆发了民族运动，杀害了不少欧洲人，格莱斯顿以此为由，将军队派往到了埃及，明面上是为了维持苏伊士运河的稳定，但是此刻已经做好了出兵的准备。随后，埃及民族领袖奥拉比，为了防止意外，开始在岸边修筑炮台，这给了英国人借口，随后英军炮轰亚历山大城，最后出兵占领了埃及，扶植了傀儡政府。</p>]]></content>
    
    
    <categories>
      
      <category>阅读</category>
      
      <category>全历史</category>
      
      <category>历史</category>
      
      <category>英国史</category>
      
    </categories>
    
    
    <tags>
      
      <tag>article</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1899年 扩张终点：布尔战争</title>
    <link href="/2023/08/31/1899%E5%B9%B4%20%E6%89%A9%E5%BC%A0%E7%BB%88%E7%82%B9%EF%BC%9A%E5%B8%83%E5%B0%94%E6%88%98%E4%BA%89/"/>
    <url>/2023/08/31/1899%E5%B9%B4%20%E6%89%A9%E5%BC%A0%E7%BB%88%E7%82%B9%EF%BC%9A%E5%B8%83%E5%B0%94%E6%88%98%E4%BA%89/</url>
    
    <content type="html"><![CDATA[<p>1852年和1854年荷兰人在南非附近建立了德兰士瓦和奥兰治两个共和国，这个两个共和国成为英国殖民扩张的阻碍，因为阻碍了南北殖民地的链接。<br>随后英国在1880年发动战争，将其纳入统治范围，这次战争被称为第一次布尔战争，布尔人承认英国女王为宗主，但还是保留了自治的地位。值得一提的是，布尔人并非非洲原住民，是荷兰的移民，他们很早移民至此发展出异于荷兰和本土的文化，同时战斗意志高昂，装备也好于原住民。<br>随后，布尔人发现了一个大金矿，因此想要取得独立的地位，英国得知后，也想要完全吞并这两个地区，于是发动了第二次布尔战争。但是，和英国人预想的很轻松地就拿下，第一战就全线失败，损失了2800人。随后更是陆续投放了45万人，对殖民地实行残忍的焦土政策，在这种情况下，损失了10万人后，才艰难地同布尔人谈判取得了对这两个区域地控制权。<br>这场战争让英国人付出了惨重的代价，也成了英国殖民扩张的终点。</p>]]></content>
    
    
    <categories>
      
      <category>阅读</category>
      
      <category>全历史</category>
      
      <category>历史</category>
      
      <category>英国史</category>
      
    </categories>
    
    
    <tags>
      
      <tag>article</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1906年 工党崛起</title>
    <link href="/2023/08/31/1906%E5%B9%B4%20%E5%B7%A5%E5%85%9A%E5%B4%9B%E8%B5%B7/"/>
    <url>/2023/08/31/1906%E5%B9%B4%20%E5%B7%A5%E5%85%9A%E5%B4%9B%E8%B5%B7/</url>
    
    <content type="html"><![CDATA[<p>1906年工党成立，当时英国执政由两大党保守党和自由党轮流执政，它们是由传统的托利党和辉格党发展而来地，工党在这个局势下，抱自由党的大腿，在各种事务中支持自由党。<br>特别是一次世界大战中，工党帮助劝说停止罢工，配合打仗，积极供应战略物资，这些行为赢得了民众和政府地信赖，曾两次加入到联合席位中，逐渐积累了执政经验。<br>随后，工党因为不受重视，开始逐渐积累实力，最终成为了英国的第三大党派。在第二次世界大战后，选举成功上台执政。但是，由于其执政经验不足，实力不足组阁也只能选择自由党和保守党的人，势单力薄。因此，工党首相施行改善同德国和苏联贸易地决议地时候，被保守党抓住机会说工党是苏联共产党的内应，想要颠覆英国政权，铲除国内的资本家，大工厂主。随后，国际邮报公开了一封国际主席共产主义主席季诺维耶夫写给工党的信，这封信本身是工党先拿到的，本来也想公开却被保守党先行一步，这下彻底坐实了通共的嫌疑，工党首相只能匆匆辞职下台。<br>但是，工党吸取了这次的经验后，开始只关注国内事务，并且培养了自己的内阁政治势力，因为保守党难以解决国内失业问题，这种情况下1929年第二次上台执政。这次过后，自由党势力衰微，英国开始工党和保守党轮流执政。</p>]]></content>
    
    
    <categories>
      
      <category>阅读</category>
      
      <category>全历史</category>
      
      <category>历史</category>
      
      <category>英国史</category>
      
    </categories>
    
    
    <tags>
      
      <tag>article</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1911年 议会两院地位逆转</title>
    <link href="/2023/08/31/1911%E5%B9%B4%20%E8%AE%AE%E4%BC%9A%E4%B8%A4%E9%99%A2%E5%9C%B0%E4%BD%8D%E9%80%86%E8%BD%AC/"/>
    <url>/2023/08/31/1911%E5%B9%B4%20%E8%AE%AE%E4%BC%9A%E4%B8%A4%E9%99%A2%E5%9C%B0%E4%BD%8D%E9%80%86%E8%BD%AC/</url>
    
    <content type="html"><![CDATA[<p>英国传统上议会的权力是大于下议会的，因为上议会是贵族把持，下议会为普通平民把持。但是工业革命后，不少普通人发财致富进入到了下议会，提升了下议会的权力，但是还是无法跟上议会抗衡。<br>后来1906年自由党当选的时候，由于自由党想要讨好工人阶层提升工人阶级的福利，但是提升福利需要钱，于是提出收富人的财产税，还有遗产税，这项法案《人民预算案》很快在下议院通过，但是一直被卡在上议院，两院因此一直争吵，到了下一次选举的时候，人民还是选了自由党，这个时候上议院才松口通过了法案。<br>这个法案的艰难颁布，让自由党人认识到上议院权力过大，因此颁布了《议会法案》这个法案旨在给予下议院更多的财政立法权等，提升下议院的权力，但很明显这法案通不过上议院。由于上议院的贵族需要国王册封，自由党人威胁如果不通过法案，则会让国王册封更多的贵族到上议院稀释其权力。此时，上议院也分裂成两派，支持法案和否决的，这项法案最终经过几轮商讨还是通过了。<br>自此后，上议院就成为养老机构，基本没什么实权了。</p>]]></content>
    
    
    <categories>
      
      <category>阅读</category>
      
      <category>全历史</category>
      
      <category>历史</category>
      
      <category>英国史</category>
      
    </categories>
    
    
    <tags>
      
      <tag>article</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1916年 日德兰海战</title>
    <link href="/2023/08/31/1916%E5%B9%B4%20%E6%97%A5%E5%BE%B7%E5%85%B0%E6%B5%B7%E6%88%98/"/>
    <url>/2023/08/31/1916%E5%B9%B4%20%E6%97%A5%E5%BE%B7%E5%85%B0%E6%B5%B7%E6%88%98/</url>
    
    <content type="html"><![CDATA[<p>德军在陆上战争受阻想要从海上突破英国海军的封锁，但是不想英国人受到俄国人提供的德军密码本，英国人破译了德军的密码情报。<br>德国人计划是通过诱饵舰队引诱英军主力到伏击海域，然后让自家主力一举击溃英国海军。英国的计划也是同样的，双方的诱饵舰队相遇后，英国军队率先发动进攻，德国误以为主力舰队上钩了急忙撤退，英国诱饵舰队上头就去追击了，而后德军主力舰队赶到，英国舰队也而后赶到，双方在尼德兰海域展开大战。<br>英国舰队想要舰队排列开来，用突击舰队撕开口子然后分开歼灭德国舰队，但是并没有成功。到了天色晚了，英军想到用驱逐舰贴近德军舰队，其他舰队封锁航道的方式击溃德军，德军因此，只得奔逃回自家港口，英军在后面追，但是港口附近布置了鱼类阵地，英军只得封锁港口，这一战后，德军除了少量潜艇能够出港外，主力海军再也没能出过港口。</p>]]></content>
    
    
    <categories>
      
      <category>阅读</category>
      
      <category>全历史</category>
      
      <category>历史</category>
      
      <category>英国史</category>
      
    </categories>
    
    
    <tags>
      
      <tag>article</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1916年 索姆河战役</title>
    <link href="/2023/08/31/1916%E5%B9%B4%20%E7%B4%A2%E5%A7%86%E6%B2%B3%E6%88%98%E5%BD%B9/"/>
    <url>/2023/08/31/1916%E5%B9%B4%20%E7%B4%A2%E5%A7%86%E6%B2%B3%E6%88%98%E5%BD%B9/</url>
    
    <content type="html"><![CDATA[<p>一次世界大战爆发，英法在1915年的时候就在商讨怎么对付德国，想在1916年发动索姆河战役，全线进攻击垮德军，但是没想到凡尔登战役先打起来了，所以英国军队担当索姆河的主攻，法国军队担任辅助。<br>索姆河战役一开始，英军采用德军的战术，先对其阵地进行轰炸，等炸出一个口子来再让士兵进攻。但是德军挖了很深的战壕，设立了三条防线，让英法军队进攻受阻，第一天进攻就造成了5万人的伤亡，只推进到第一条防线。<br>随后英国拿出大杀器坦克，德军没有见过这样的钢铁怪物，英军倒是通过坦克拿下了第三道防线的几个要塞，但是随着战争的深入，德军也逐渐掌握了对付坦克的办法。<br>德军方面也有大杀器，马克沁重机枪，射速极快也是通过此让英法联军一天就有6万人的伤亡。另外还有毒气弹，双方战争无所不用其极，五个月死了133万人。<br>这场战役一直胶着着，知道下半年下雨了道路泥泞才缓解了攻势。</p>]]></content>
    
    
    <categories>
      
      <category>阅读</category>
      
      <category>全历史</category>
      
      <category>历史</category>
      
      <category>英国史</category>
      
    </categories>
    
    
    <tags>
      
      <tag>article</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1918年 女性如何获取选举权</title>
    <link href="/2023/08/31/1918%E5%B9%B4%20%E5%A5%B3%E6%80%A7%E5%A6%82%E4%BD%95%E8%8E%B7%E5%8F%96%E9%80%89%E4%B8%BE%E6%9D%83/"/>
    <url>/2023/08/31/1918%E5%B9%B4%20%E5%A5%B3%E6%80%A7%E5%A6%82%E4%BD%95%E8%8E%B7%E5%8F%96%E9%80%89%E4%B8%BE%E6%9D%83/</url>
    
    <content type="html"><![CDATA[<p>英国自议会改革后，大部分男性都有选举权，但是女性并没纳入其中。<br>随着大量女性参与到手工业中，逐渐富裕起来有了说话权，兴盛起来了女权运动，想要获取到选举权。<br>1897年，梅西特夫人第一次成立一个联合团体叫做全国妇女选举权社团联盟。这个社团里有一部分激进的女权主义者，成立了“妇女社会政治联盟”，主张用暴力的手段获取权力，在政府大楼外扔石头，刷漆，烧毁邮箱。<br>这样的方式换来的是大众的不屑和暴力的回应，甚至是性侵。<br>政府也对这样的激进女性主义者非常忌惮，经常抓捕她们进监狱，她们绝世就用管子强制喂食手段残忍，引起社会共情。政府不得不颁布法案，让其恢复自由，等待健康后在抓捕进监狱，其中有一个叫艾米莉的人，像这样被抓捕了13次一年时间里，而后在赛马比赛里，跑进跑道大举横幅导致被踩踏致死，引发了社会关注。<br>但真正让妇女获得重视的还是一战，大量男性被征兵，妇女成为英国本土的劳动力主力，战争结束后，英国政府承认妇女的努力，决定授予其选举权。而后的选举有三名妇女成功进入议会，这是一场伟大的胜利。</p>]]></content>
    
    
    <categories>
      
      <category>阅读</category>
      
      <category>全历史</category>
      
      <category>历史</category>
      
      <category>英国史</category>
      
    </categories>
    
    
    <tags>
      
      <tag>article</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1917年 巴以冲突：《巴尔福宣言》</title>
    <link href="/2023/08/31/1917%E5%B9%B4%20%E5%B7%B4%E4%BB%A5%E5%86%B2%E7%AA%81%EF%BC%9A%E3%80%8A%E5%B7%B4%E5%B0%94%E7%A6%8F%E5%AE%A3%E8%A8%80%E3%80%8B/"/>
    <url>/2023/08/31/1917%E5%B9%B4%20%E5%B7%B4%E4%BB%A5%E5%86%B2%E7%AA%81%EF%BC%9A%E3%80%8A%E5%B7%B4%E5%B0%94%E7%A6%8F%E5%AE%A3%E8%A8%80%E3%80%8B/</url>
    
    <content type="html"><![CDATA[<p>一次世界大战的时候，欧洲战事陷入胶着，犹太人复国运动这个时候也开始兴盛起来。<br>交战双方都想得到犹太人的支持，因为犹太人在上层掌握着不少商业实力，率先这么做的是英国。<br>英国首相阿斯奎斯是一个坚定的反犹主义者，坚决不支持犹太人复国，但是后来由于一战中战争失利，他不得不引咎辞职，随后上台的首相劳合乔治，受到一些犹太人的劝说，同意支持犹太人复国。复国地点为耶路撒冷，为此他说服议会，说这是一个英国进驻中东的好机会。他任命的贝尔福外交大臣，随后发表声明《贝尔福宣言》，支持了犹太人在耶路撒冷复国，随后英军也拿下耶路撒冷。<br>第一次世界大战后，这个宣言也得到欧美大国的承认，自此犹太复国主义者拿着这个宣言开始大举迁入巴勒斯坦，引发了很长时间的冲突。</p>]]></content>
    
    
    <categories>
      
      <category>阅读</category>
      
      <category>全历史</category>
      
      <category>历史</category>
      
      <category>英国史</category>
      
    </categories>
    
    
    <tags>
      
      <tag>article</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1921年 英伦痕迹：爱尔兰的独立与危机</title>
    <link href="/2023/08/31/1921%E5%B9%B4%20%E8%8B%B1%E4%BC%A6%E7%97%95%E8%BF%B9%EF%BC%9A%E7%88%B1%E5%B0%94%E5%85%B0%E7%9A%84%E7%8B%AC%E7%AB%8B%E4%B8%8E%E5%8D%B1%E6%9C%BA/"/>
    <url>/2023/08/31/1921%E5%B9%B4%20%E8%8B%B1%E4%BC%A6%E7%97%95%E8%BF%B9%EF%BC%9A%E7%88%B1%E5%B0%94%E5%85%B0%E7%9A%84%E7%8B%AC%E7%AB%8B%E4%B8%8E%E5%8D%B1%E6%9C%BA/</url>
    
    <content type="html"><![CDATA[<p>1801年爱尔兰正式并入英国作为英国的殖民地，提供粮食作物。而后，爱尔兰爆发大饥荒，英国却见死不救，同时爱尔兰本身信奉天主教，英国信奉新教，新教教徒总是欺压爱尔兰的天主教徒，激起了爱尔兰人的极大不满。<br>随后爱尔兰的追求独立运动空前高涨，但是愿望总是落空。到了一战后，各地的独立运动高涨，爱尔兰也掀起了独立运动，攻占了都柏林等重地，但是很快就被镇压了。随后爱尔兰的一个党派新芬党主张独立，在选举失败后索性开始自己宣布爱尔兰独立，并通过暴力手段去暗杀英国贵族，抢夺武器和资金。这种暴力手段民众起初不喜欢，但是随着英国的镇压报复力度加大，反而促使更多人加入其中。<br>后来英国在爱尔兰投入的人力和财力越来越多，觉得很不划算，只得签订条约承认其独立。但是爱尔兰还有部分人信奉了英国的新教，这部分人于是在北爱尔兰还是归英国管理。但是他们还是想要和爱尔兰自由邦一起也分裂成回归和独立派，自由邦的人因为实行君主立宪还是共和起了冲突，又打了内战。</p>]]></content>
    
    
    <categories>
      
      <category>阅读</category>
      
      <category>全历史</category>
      
      <category>历史</category>
      
      <category>英国史</category>
      
    </categories>
    
    
    <tags>
      
      <tag>article</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1928年 弗莱明发现青霉素</title>
    <link href="/2023/08/31/1928%E5%B9%B4%20%E5%BC%97%E8%8E%B1%E6%98%8E%E5%8F%91%E7%8E%B0%E9%9D%92%E9%9C%89%E7%B4%A0/"/>
    <url>/2023/08/31/1928%E5%B9%B4%20%E5%BC%97%E8%8E%B1%E6%98%8E%E5%8F%91%E7%8E%B0%E9%9D%92%E9%9C%89%E7%B4%A0/</url>
    
    <content type="html"><![CDATA[<p>1928年弗莱明再一次实验中，不小心让霉菌落到了培养皿上，他随后发现，这种霉菌对细菌有抑制作用，随后1929年发表了论文阐述了这一现象。但是他在提纯这里遇到了瓶颈，同时这件事也并没有引起太大的重视。<br>但随后二战爆发，弗洛里和他的助手钱恩觉得战争会对这种药物有很大的需求，因此他们上门拜访弗莱明，希望他能重启研究。<br>随后，他们在1941年提纯了青霉素，并在白鼠上进行了临床试验，效果显著，而后也将其注射到了一个受感染的少年上，少年也随之恢复健康。<br>而后，二战进入到了白热化阶段，英国对医疗物资需求加大。虽然忌惮这种新药的成熟度，但是医疗药物太缺少了，1942年北非的蒙哥马利将军就决定订了不少青霉素，而后拯救了很多士兵的性命，随后这种药开始大规模投产。</p>]]></content>
    
    
    <categories>
      
      <category>阅读</category>
      
      <category>全历史</category>
      
      <category>历史</category>
      
      <category>英国史</category>
      
    </categories>
    
    
    <tags>
      
      <tag>article</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1931年 英联邦诞生：《威斯敏斯特法案》颁布</title>
    <link href="/2023/08/31/1931%E5%B9%B4%20%E8%8B%B1%E8%81%94%E9%82%A6%E8%AF%9E%E7%94%9F%EF%BC%9A%E3%80%8A%E5%A8%81%E6%96%AF%E6%95%8F%E6%96%AF%E7%89%B9%E6%B3%95%E6%A1%88%E3%80%8B%E9%A2%81%E5%B8%83/"/>
    <url>/2023/08/31/1931%E5%B9%B4%20%E8%8B%B1%E8%81%94%E9%82%A6%E8%AF%9E%E7%94%9F%EF%BC%9A%E3%80%8A%E5%A8%81%E6%96%AF%E6%95%8F%E6%96%AF%E7%89%B9%E6%B3%95%E6%A1%88%E3%80%8B%E9%A2%81%E5%B8%83/</url>
    
    <content type="html"><![CDATA[<p>一次世界大战后，美国成为全欧洲的债主，英国的实力逐渐衰落。当时国际联盟也成立了，为了增加在国际联盟的话语权，以及减少在殖民地的花费，英国也开始给予殖民地更多的自治权。<br>在英国的殖民地分为直辖殖民地，保护国和自治领，作为最高等级的自治领，拥有军队自己自治国家，只是在外交上还是属于英国，无法主动对其他国家宣战。<br>像新西兰澳大利亚参与了一战，想要获取到更多的权力，因此1926年想要和英国通过立法确立这些国家的权力，然后英国出台了《贝尔福报告》，但是后面遭遇到了经济危机不得不放放这个报告。<br>随后1931年才正式通过了《威斯敏特法案》。但是通过后，这些英国殖民地的国家有些还不大情愿签署，因为想要英国的庇护。但是随着得到了美国的庇护后，就慢慢签署了。</p>]]></content>
    
    
    <categories>
      
      <category>阅读</category>
      
      <category>全历史</category>
      
      <category>历史</category>
      
      <category>英国史</category>
      
    </categories>
    
    
    <tags>
      
      <tag>article</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1932年 进口关税法：终结自由贸易</title>
    <link href="/2023/08/31/1932%E5%B9%B4%20%E8%BF%9B%E5%8F%A3%E5%85%B3%E7%A8%8E%E6%B3%95%EF%BC%9A%E7%BB%88%E7%BB%93%E8%87%AA%E7%94%B1%E8%B4%B8%E6%98%93/"/>
    <url>/2023/08/31/1932%E5%B9%B4%20%E8%BF%9B%E5%8F%A3%E5%85%B3%E7%A8%8E%E6%B3%95%EF%BC%9A%E7%BB%88%E7%BB%93%E8%87%AA%E7%94%B1%E8%B4%B8%E6%98%93/</url>
    
    <content type="html"><![CDATA[<p>一战后，英国实力衰落，再次之前英国一直实行自由贸易原则。但是现在美国的贸易已经超过英国，同时新兴的德国也是有赶超之势。<br>自此英国不得不考虑进行关税保护，但是国内一直有保守势力坚持自由贸易原则，当时的英国的首相老张伯伦，很想推行关税，但是作为折衷，只能在奢侈品上进行了收取关税，但是效果显著。<br>随后，经济危机到来，英国也受到了巨大的影响，在这种情况下，时任英国首相小张伯伦又开始推行他父亲的关税保护政策，推行了《进口关税法》，这次没遇到太大的阻力。<br>这也使英国式第一个走出危机的欧洲国家。</p>]]></content>
    
    
    <categories>
      
      <category>阅读</category>
      
      <category>全历史</category>
      
      <category>历史</category>
      
      <category>英国史</category>
      
    </categories>
    
    
    <tags>
      
      <tag>article</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1936年 凯恩斯主义</title>
    <link href="/2023/08/31/1936%E5%B9%B4%20%E5%87%AF%E6%81%A9%E6%96%AF%E4%B8%BB%E4%B9%89/"/>
    <url>/2023/08/31/1936%E5%B9%B4%20%E5%87%AF%E6%81%A9%E6%96%AF%E4%B8%BB%E4%B9%89/</url>
    
    <content type="html"><![CDATA[<p>马歇尔局部均衡理论认为市场可以自动调节供求，保证充分就业但是30年代的大萧条使该理论破产，凯恩斯主义成为主流。<br>凯恩斯成名还是在之前巴黎和会的时候，他对战胜国的嘴脸感到不满，认为这样瓜分德国伤害的是整个欧洲经济，果不其然大萧条后不仅德国，整个欧洲经济都陷入大萧条，凯恩斯也成为红人。<br>凯恩斯提出了“有效需求”，主张政府调控经济，通过财政赤字刺激经济等。但是凯恩斯主义也受到了质疑，例如政府调控经济是简单，但是退出就很难，很可能导致某些官员再次牟利。但是还是架不住凯恩斯主义受到世界各国的追捧。<br>虽然凯恩斯主义大获成功，但是凯恩斯本人却在代表英国同美国谈判战后经济新秩序的时候吃了亏，美国靠着庞大的经济实力，坐拥世界4分之三的黄金储量，让美元成为了世界货币，其他货币同美元挂钩。但是这种秩序也是凯恩斯所预想的不过主角是英国。</p>]]></content>
    
    
    <categories>
      
      <category>阅读</category>
      
      <category>全历史</category>
      
      <category>历史</category>
      
      <category>英国史</category>
      
    </categories>
    
    
    <tags>
      
      <tag>article</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1936年 爱德华八世退位</title>
    <link href="/2023/08/31/1936%E5%B9%B4%20%E7%88%B1%E5%BE%B7%E5%8D%8E%E5%85%AB%E4%B8%96%E9%80%80%E4%BD%8D/"/>
    <url>/2023/08/31/1936%E5%B9%B4%20%E7%88%B1%E5%BE%B7%E5%8D%8E%E5%85%AB%E4%B8%96%E9%80%80%E4%BD%8D/</url>
    
    <content type="html"><![CDATA[<p>德国纳粹党上台后，激起了英国各方的不满，这个时候国王爱德华本身也有德国王室血统，为表明和英国人民粘在一起的决心，王室改了德国的风格为英国的温莎风格。<br>后来爱德华爱上了亲纳粹的女人辛普森。随后想要迎娶她，但是按照英国宗教规定反对再婚，同时辛普森还是一个风流倜傥的女人，不仅亲近爱德华，还和德国驻英大使好上了，提供了不少情报给德国。这样的女人，英国首相提出的方案是放弃她，内阁辞职，国王退位。<br>爱德华不愿意放弃她，但是内阁退位的话，相当于因为国王自己私人原因颠覆几百年英国的首相制度，这比第一个还严重，因此国王只能选择主动退位，将其王位传给了弟弟乔治六世。<br>爱德华的这种行为，再加上其亲纳粹的立场，导致了民众对英王室的信任危机，但是后来乔治六世带领英国共同抵御纳粹，重新获得了民众的信任。</p>]]></content>
    
    
    <categories>
      
      <category>阅读</category>
      
      <category>全历史</category>
      
      <category>历史</category>
      
      <category>英国史</category>
      
    </categories>
    
    
    <tags>
      
      <tag>article</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1938年 慕尼黑协定</title>
    <link href="/2023/08/31/1938%E5%B9%B4%20%E6%85%95%E5%B0%BC%E9%BB%91%E5%8D%8F%E5%AE%9A/"/>
    <url>/2023/08/31/1938%E5%B9%B4%20%E6%85%95%E5%B0%BC%E9%BB%91%E5%8D%8F%E5%AE%9A/</url>
    
    <content type="html"><![CDATA[<p>30年代的经济危机也席卷了整个欧洲，德国和英国受到了不同程度的影响，只不过为了应对危机两国走向了不同的道路。<br>德国想要通过扩张应付危机，英国想要和平发展。1938年德国吞并了奥地利，随后索取捷克的苏台德地区。为了换取和平，英国首相张伯伦四处奔波，安抚希特勒说服其他国家，但是希特勒后来不止想要苏台德地区，随后为了解决这个冲突，英国联合法国德国意大利等国绕开捷克，开了慕尼黑会议，会议内容是捷克交出苏台德地区，以此换取欧洲和平。<br>对于捷克，英国以经济援助为要挟，最终捷克还是交出了苏台德。张伯伦回到英国后，说用一张纸换取了一代人的和平，不料后面德国还是不满足，后面出兵占领了整个捷克，张伯伦也成了众矢之的。<br>英国的这种绥靖政策纵使德国野心膨胀，加速了二战的爆发，仍然还是把英国拉近了第二次世界大战之中。</p>]]></content>
    
    
    <categories>
      
      <category>阅读</category>
      
      <category>全历史</category>
      
      <category>历史</category>
      
      <category>英国史</category>
      
    </categories>
    
    
    <tags>
      
      <tag>article</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1940年 不列颠空战</title>
    <link href="/2023/08/31/1940%E5%B9%B4%20%E4%B8%8D%E5%88%97%E9%A2%A0%E7%A9%BA%E6%88%98/"/>
    <url>/2023/08/31/1940%E5%B9%B4%20%E4%B8%8D%E5%88%97%E9%A2%A0%E7%A9%BA%E6%88%98/</url>
    
    <content type="html"><![CDATA[<p>随着德国拿下法国和低地国家后，进攻英伦三岛的”海狮计划”提上议程，当时任德国空军总司令的戈林夸下海口，可以通过空军轰炸就让英国人投降。<br>随后，1940年8月德国轰炸英国港口，德国和英国之间的空战就开始了。德国起初主要轰炸英国的飞机场，雷达等军用设施，这使英国的飞行器损失惨重，后来由于英国人轰炸了柏林，导致德国人报复无差别轰炸城市像伦敦这样的城市，这反倒给英国空军喘息的机会。<br>之后，德国人派出了400架轰炸机和700架战斗机，这是有史以来最大的航空编队，英国这边只有300架战斗机迎战。这次战斗德军损失79架飞机，而英国只损失了30架，这次德军元气大伤，德军认识到无法在英国掌握制空权后，开始逐步放弃海狮计划，转而将进攻矛头指向苏联。</p>]]></content>
    
    
    <categories>
      
      <category>阅读</category>
      
      <category>全历史</category>
      
      <category>历史</category>
      
      <category>英国史</category>
      
    </categories>
    
    
    <tags>
      
      <tag>article</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1940年 丘吉尔出任战时首相</title>
    <link href="/2023/08/31/1940%E5%B9%B4%20%E4%B8%98%E5%90%89%E5%B0%94%E5%87%BA%E4%BB%BB%E6%88%98%E6%97%B6%E9%A6%96%E7%9B%B8/"/>
    <url>/2023/08/31/1940%E5%B9%B4%20%E4%B8%98%E5%90%89%E5%B0%94%E5%87%BA%E4%BB%BB%E6%88%98%E6%97%B6%E9%A6%96%E7%9B%B8/</url>
    
    <content type="html"><![CDATA[<p>张伯伦的绥靖政策在德国出兵捷克后引发了英国各阶层的极大不满，反而是当初主战的丘吉尔成为了新的用户对象。<br>张伯伦所属的保守派很不喜欢丘吉尔，但是在1939年德国闪击波兰后，张伯伦随后就私下邀请丘吉尔入阁，就任海军大臣。随着战事进行，张伯伦屡屡失误，导致德国拿下挪威，者更让他成为众矢之的，张伯伦想要一个保守派另一个人物就任首相，但是就人望来看丘吉尔是最合适的，在一番试探之后，张伯伦没办法，只能退位，将首相让给丘吉尔。</p>]]></content>
    
    
    <categories>
      
      <category>阅读</category>
      
      <category>全历史</category>
      
      <category>历史</category>
      
      <category>英国史</category>
      
    </categories>
    
    
    <tags>
      
      <tag>article</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1940年 敦刻尔克大撤退</title>
    <link href="/2023/08/31/1940%E5%B9%B4%20%E6%95%A6%E5%88%BB%E5%B0%94%E5%85%8B%E5%A4%A7%E6%92%A4%E9%80%80/"/>
    <url>/2023/08/31/1940%E5%B9%B4%20%E6%95%A6%E5%88%BB%E5%B0%94%E5%85%8B%E5%A4%A7%E6%92%A4%E9%80%80/</url>
    
    <content type="html"><![CDATA[<p>德国闪击波兰后，随即英法宣战。法国当初为了防止德国卷土重来，特意修筑了一条坚固的防线，叫做马奇诺防线，右边接壤瑞士靠山，左边接壤比利时。但正是左边并没有完全修筑完毕，导致德国有机会从比利时荷兰这边包绕马奇诺防线。<br>德国人先是在荷兰地区发动佯攻，随后从阿登森林地区开进装甲师，随后奇袭色当包绕了英法军队。为了避免全军覆没，英法必须想办法撤退，而后英国主力部队撤到敦刻尔克，在法国的一只坚决抵抗的部队的阻击下成功撤离英法联军33万人。</p>]]></content>
    
    
    <categories>
      
      <category>阅读</category>
      
      <category>全历史</category>
      
      <category>历史</category>
      
      <category>英国史</category>
      
    </categories>
    
    
    <tags>
      
      <tag>article</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1942年 反败为胜：阿拉曼战役扭转局势</title>
    <link href="/2023/08/31/1942%E5%B9%B4%20%E5%8F%8D%E8%B4%A5%E4%B8%BA%E8%83%9C%EF%BC%9A%E9%98%BF%E6%8B%89%E6%9B%BC%E6%88%98%E5%BD%B9%E6%89%AD%E8%BD%AC%E5%B1%80%E5%8A%BF/"/>
    <url>/2023/08/31/1942%E5%B9%B4%20%E5%8F%8D%E8%B4%A5%E4%B8%BA%E8%83%9C%EF%BC%9A%E9%98%BF%E6%8B%89%E6%9B%BC%E6%88%98%E5%BD%B9%E6%89%AD%E8%BD%AC%E5%B1%80%E5%8A%BF/</url>
    
    <content type="html"><![CDATA[<p>1941年初，德意联军组建完毕，随后进军非洲连连胜利，将英军逼到了埃及的阿拉曼地区。<br>此时德军奔袭了很远的距离，补给线一直遭到英国海空军的侵袭，官兵补给不得以停止进攻。英国这边则得到了兵力的补充还有武器装备，飞机大炮等，随后正面发起进攻，但是德军早已布置了很多地雷，英军的进攻受挫，不得以改变进攻计划，转而进攻靠近南边的伤残德军部队。<br>随后，英军势如破竹，德军指挥官隆美尔为防止部队被包围，违背希特勒的命令，下令部队撤退，这之后德国想要从非洲打通和日本会师的计划落空了。</p>]]></content>
    
    
    <categories>
      
      <category>阅读</category>
      
      <category>全历史</category>
      
      <category>历史</category>
      
      <category>英国史</category>
      
    </categories>
    
    
    <tags>
      
      <tag>article</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1942年 新加坡战役：英军的至暗时刻</title>
    <link href="/2023/08/31/1942%E5%B9%B4%20%E6%96%B0%E5%8A%A0%E5%9D%A1%E6%88%98%E5%BD%B9%EF%BC%9A%E8%8B%B1%E5%86%9B%E7%9A%84%E8%87%B3%E6%9A%97%E6%97%B6%E5%88%BB/"/>
    <url>/2023/08/31/1942%E5%B9%B4%20%E6%96%B0%E5%8A%A0%E5%9D%A1%E6%88%98%E5%BD%B9%EF%BC%9A%E8%8B%B1%E5%86%9B%E7%9A%84%E8%87%B3%E6%9A%97%E6%97%B6%E5%88%BB/</url>
    
    <content type="html"><![CDATA[<p>1941年太平洋战争爆发，日本为了保障物资，决定夺取东南亚地区。<br>英国预料到日本会袭击东南亚地区，随后派出Z舰队，空军部队，再从印度和澳大利亚派遣援军到马来半岛，最终兵力达到13.5万人。<br>后来日本的Z舰队在前往阻击登陆部队作战时，被鱼雷轰炸机狂轰滥炸，全军覆没。而英国人的空军，因为日本有间谍安插其中，导致英国人的一举一动被日本看在眼里，随后日本在其起飞前轰炸其飞机场，并利用英国和澳大利亚空军的矛盾逐一击破，英国空军被迫撤回印度。<br>但是就算如此，英国陆军人数还是优于日军的，但是日军用自行车在丛林里穿梭，打了英国人一个措手不及，又因为几次战略失误，丢掉了重要堡垒，最终撤离到新加坡，最后被迫剩余8万余人向英国投降。<br>此战可以说是英国历史上最惨重的失败，丘吉尔也说这是英国的至暗时刻。</p>]]></content>
    
    
    <categories>
      
      <category>阅读</category>
      
      <category>全历史</category>
      
      <category>历史</category>
      
      <category>英国史</category>
      
    </categories>
    
    
    <tags>
      
      <tag>article</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1943年 计算机之父与德军的战斗</title>
    <link href="/2023/08/31/1943%E5%B9%B4%20%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%B9%8B%E7%88%B6%E4%B8%8E%E5%BE%B7%E5%86%9B%E7%9A%84%E6%88%98%E6%96%97/"/>
    <url>/2023/08/31/1943%E5%B9%B4%20%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%B9%8B%E7%88%B6%E4%B8%8E%E5%BE%B7%E5%86%9B%E7%9A%84%E6%88%98%E6%96%97/</url>
    
    <content type="html"><![CDATA[<p>1942年的时候，英国打仗十分的困难，亚洲战场丢掉了东南亚的控制，非洲战场被德国人赶到了阿拉曼地区。而这个时候，苏联那边传来斯大林格勒保卫战的捷报，影响力进一步扩大，为了给自己更多的筹码，英国在请报上下了很大的气力。<br>一战的时候，英国就曾通过情报战胜国德军，到了二战，德国采用的密码机为恩尼格玛密码机，分为接受和发送两边，它会自动对信息进行加密，随后由接收方解码。它的加密可能性可以达到1亿亿种，为了破译它英国召集了最精英的一批人，图灵就是其中之一。<br>图灵因参与的计算机研究，被英国军方看重进行密码破译研究，他通过一些手段将可能性降低到了10万种，随后也制造机器辅助破译研究。他还利用德军的一些习惯，例如播报天气，还有连续输入相同密文等，进一步缩小范围，最终破译了德军的密码。<br>这份密码帮助英国击沉了海洋中很大部分的U型潜艇，并取得诺曼底登陆的胜利等，可以说拯救了上千万人的性命。</p>]]></content>
    
    
    <categories>
      
      <category>阅读</category>
      
      <category>全历史</category>
      
      <category>历史</category>
      
      <category>英国史</category>
      
    </categories>
    
    
    <tags>
      
      <tag>article</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1952年 雾锁伦敦</title>
    <link href="/2023/08/31/1952%E5%B9%B4%20%E9%9B%BE%E9%94%81%E4%BC%A6%E6%95%A6/"/>
    <url>/2023/08/31/1952%E5%B9%B4%20%E9%9B%BE%E9%94%81%E4%BC%A6%E6%95%A6/</url>
    
    <content type="html"><![CDATA[<p>二战结束后，英国工业大发展，采取了许多新技术发展工业，煤炭作为燃料被广泛采用。<br>1952年12月5日开始，伦敦有毒的烟雾聚集五天，导致约4000人的死亡。同时，两个月后，又有8000多人死亡，成千上万的人患上了呼吸性的疾病。英国当局却称死亡和烟雾并没有相关性，因为英国政府明白如果不用煤炭发展工业，那么国内的就业就会崩坏，国外的欠款也无法还清。<br>但是人民不断请愿，在人们的巨大压力下，英国政府不得不重视环境问题，1956年《空气清洁法》问世，成为世界现代意义上的空气污染防治法，要求对工厂设施和煤炭进行改造，实现冬季集中供暖，并设立无烟区等。后续又出台了一系列法案，伦敦烟雾总算才控制下来。</p>]]></content>
    
    
    <categories>
      
      <category>阅读</category>
      
      <category>全历史</category>
      
      <category>历史</category>
      
      <category>英国史</category>
      
    </categories>
    
    
    <tags>
      
      <tag>article</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1960年 披头士摇滚</title>
    <link href="/2023/08/31/1960%E5%B9%B4%20%E6%8A%AB%E5%A4%B4%E5%A3%AB%E6%91%87%E6%BB%9A/"/>
    <url>/2023/08/31/1960%E5%B9%B4%20%E6%8A%AB%E5%A4%B4%E5%A3%AB%E6%91%87%E6%BB%9A/</url>
    
    <content type="html"><![CDATA[<p>二战后，世界经济高速发展，年轻一代的观念在发生巨变。<br>1961年爱泼斯坦见到俱乐部驻唱的四个男孩，他被那种狂热躁动的演唱打动了，随后做了他们的经纪人，随后五年时间里，确立乐队形象，找制作公司，随后成为风靡一时摇滚飓风，甚至披头士的风潮刮到了美国。<br>但随着爱泼斯坦的去世乐队的矛盾越来越多，最终乐队于1970年解散。</p>]]></content>
    
    
    <categories>
      
      <category>阅读</category>
      
      <category>全历史</category>
      
      <category>历史</category>
      
      <category>英国史</category>
      
    </categories>
    
    
    <tags>
      
      <tag>article</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1979年 撒切尔夫人上台</title>
    <link href="/2023/08/31/1979%E5%B9%B4%20%E6%92%92%E5%88%87%E5%B0%94%E5%A4%AB%E4%BA%BA%E4%B8%8A%E5%8F%B0/"/>
    <url>/2023/08/31/1979%E5%B9%B4%20%E6%92%92%E5%88%87%E5%B0%94%E5%A4%AB%E4%BA%BA%E4%B8%8A%E5%8F%B0/</url>
    
    <content type="html"><![CDATA[<p>撒切尔夫人在保守党种崛起的，那个时候已经50岁了。1974年英国保守党内部派别林立，撒切尔夫人对内示弱，对外尖酸刻薄但不失幽默，在党内撒切尔夫人的竞争对手一个不干了，另一个党魁则和撒切尔夫人签订协定将其支持者转入门下，以此抵抗现任党魁，就这样撒切尔夫人在1975年成为保守党党魁。<br>接下来撒切尔要竞争首相之位了，但是面对当时的工党首相卡拉汉，撒切尔屡屡处于下风，直到三年后，找到了机会。<br>因为工党政府一直实行高福利和国有化，导致生产效率低下，失业率高，当时一张保守党混进失业人群排队的海报被宣发了出来，引起了人们的剧烈共鸣，将矛头指向了工党上，而当时工党首相卡拉汉则在加勒比海阳光中休闲，激怒了英国民众。保守党支持率飙升。<br>最终到了选举那天，撒切尔以311对310票微弱的优势竞选成功，开始十一年的执政生涯，随后他紧缩财政，拆解福利，私有化，打击工会，打击恐怖组织，发动马岛战争。</p>]]></content>
    
    
    <categories>
      
      <category>阅读</category>
      
      <category>全历史</category>
      
      <category>历史</category>
      
      <category>英国史</category>
      
    </categories>
    
    
    <tags>
      
      <tag>article</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>43年 罗马征服不列颠</title>
    <link href="/2023/08/31/43%E5%B9%B4%20%E7%BD%97%E9%A9%AC%E5%BE%81%E6%9C%8D%E4%B8%8D%E5%88%97%E9%A2%A0/"/>
    <url>/2023/08/31/43%E5%B9%B4%20%E7%BD%97%E9%A9%AC%E5%BE%81%E6%9C%8D%E4%B8%8D%E5%88%97%E9%A2%A0/</url>
    
    <content type="html"><![CDATA[<p>公元前一世纪，不列颠和高卢存在贸易往来，在罗马攻打高卢的时候支持高卢，引起了罗马总督凯撒的注意。</p><p>凯撒在公元前55年和54年连续进攻不列颠，与不列颠签订了停战协议，随后两国之间贸易往来增多了。</p><p>公元41年，罗马皇帝被刺杀，新上任的克劳狄乌斯被近卫军拥立为皇帝，而后克劳狄为了稳定民心，发动了对不列颠的征服。公元43年，克劳狄派亲信 奥路斯·普劳提乌斯 先行征讨，他率领4万大军，分三路进攻，很快12位不列颠皇帝俯首称臣。</p>]]></content>
    
    
    <categories>
      
      <category>阅读</category>
      
      <category>全历史</category>
      
      <category>历史</category>
      
      <category>英国史</category>
      
    </categories>
    
    
    <tags>
      
      <tag>article</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>597年 奥古斯丁入英：基督教的到来与崛起</title>
    <link href="/2023/08/31/597%E5%B9%B4%20%E5%A5%A5%E5%8F%A4%E6%96%AF%E4%B8%81%E5%85%A5%E8%8B%B1%EF%BC%9A%E5%9F%BA%E7%9D%A3%E6%95%99%E7%9A%84%E5%88%B0%E6%9D%A5%E4%B8%8E%E5%B4%9B%E8%B5%B7/"/>
    <url>/2023/08/31/597%E5%B9%B4%20%E5%A5%A5%E5%8F%A4%E6%96%AF%E4%B8%81%E5%85%A5%E8%8B%B1%EF%BC%9A%E5%9F%BA%E7%9D%A3%E6%95%99%E7%9A%84%E5%88%B0%E6%9D%A5%E4%B8%8E%E5%B4%9B%E8%B5%B7/</url>
    
    <content type="html"><![CDATA[<p>公元5世纪，罗马衰落，盎格鲁撒克逊人侵袭不列颠岛，并逐渐成为主体居民。</p><p>罗马教皇 格里高利一世。他想去英国传教，随后派修道院院长奥古斯丁前往英国传教。奥古斯丁通过逐渐渗透的方式，例如将寺庙的祭拜神像替换成基督徒的十字架，耶稣画像，从而逐渐使北部的一些国王开始接受了基督教。</p><p>同时由于，盎格鲁撒克逊人刚来英国，处于一个统一的过程，也需要基督教帮助维持社会稳定。</p>]]></content>
    
    
    <categories>
      
      <category>阅读</category>
      
      <category>全历史</category>
      
      <category>历史</category>
      
      <category>英国史</category>
      
    </categories>
    
    
    <tags>
      
      <tag>article</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>871年 七国时代：阿尔弗雷德大帝的舞台</title>
    <link href="/2023/08/31/871%E5%B9%B4%20%E4%B8%83%E5%9B%BD%E6%97%B6%E4%BB%A3%EF%BC%9A%E9%98%BF%E5%B0%94%E5%BC%97%E9%9B%B7%E5%BE%B7%E5%A4%A7%E5%B8%9D%E7%9A%84%E8%88%9E%E5%8F%B0/"/>
    <url>/2023/08/31/871%E5%B9%B4%20%E4%B8%83%E5%9B%BD%E6%97%B6%E4%BB%A3%EF%BC%9A%E9%98%BF%E5%B0%94%E5%BC%97%E9%9B%B7%E5%BE%B7%E5%A4%A7%E5%B8%9D%E7%9A%84%E8%88%9E%E5%8F%B0/</url>
    
    <content type="html"><![CDATA[<p>公元5世纪，罗马人撤离，盎格鲁撒克逊人逐渐成为不列颠岛上的主体居民。</p><p>随后400多年的时间，他们建立起了七大王国。</p><p>公元8世纪末到9世纪初，北欧海盗维京人入侵不列颠岛，阿尔弗雷德虽屡屡受挫，但在878年，阿尔弗雷德在埃丁顿与维京人决一死战获得胜利。这一战成为英格兰抗击维京海盗的转折，从此换来了较为长时间的安定。同时，凝聚了整个英格兰王国。</p><p>公元9世纪，阿尔弗雷德大帝统一了英格兰的文化政治。他的维塞克斯王国，类似于中国的秦国，统一了其他六国。他也被称为国父。</p>]]></content>
    
    
    <categories>
      
      <category>阅读</category>
      
      <category>全历史</category>
      
      <category>历史</category>
      
      <category>英国史</category>
      
    </categories>
    
    
    <tags>
      
      <tag>article</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>BC600年 凯尔特人开发不列颠岛</title>
    <link href="/2023/08/31/BC600%E5%B9%B4%20%E5%87%AF%E5%B0%94%E7%89%B9%E4%BA%BA%E5%BC%80%E5%8F%91%E4%B8%8D%E5%88%97%E9%A2%A0%E5%B2%9B/"/>
    <url>/2023/08/31/BC600%E5%B9%B4%20%E5%87%AF%E5%B0%94%E7%89%B9%E4%BA%BA%E5%BC%80%E5%8F%91%E4%B8%8D%E5%88%97%E9%A2%A0%E5%B2%9B/</url>
    
    <content type="html"><![CDATA[<p>不列颠岛的巨石阵是原住民修建的。从BC2500年，经过五十代人的努力。<br>不列颠岛原住民属于采集狩猎文明，崇拜太阳等自然，形成了祭司，祭司成了权力最大的人。</p><p>凯尔特人是印欧语系的民族，最初生活在东欧随后一路向西，来到了奥地利，随后散布在欧洲大陆。<br>公元前700年左右，带着铁器到了不列颠岛。<br>凯尔特人很快融入原住民的社会，分成了很多部落，部落之间争夺土地，上百个部落而后就形成一个个的小王国。</p>]]></content>
    
    
    <categories>
      
      <category>阅读</category>
      
      <category>全历史</category>
      
      <category>历史</category>
      
      <category>英国史</category>
      
    </categories>
    
    
    <tags>
      
      <tag>article</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1051年 前九年之役：安倍氏的覆灭</title>
    <link href="/2023/08/31/1051%E5%B9%B4%20%E5%89%8D%E4%B9%9D%E5%B9%B4%E4%B9%8B%E5%BD%B9%EF%BC%9A%E5%AE%89%E5%80%8D%E6%B0%8F%E7%9A%84%E8%A6%86%E7%81%AD/"/>
    <url>/2023/08/31/1051%E5%B9%B4%20%E5%89%8D%E4%B9%9D%E5%B9%B4%E4%B9%8B%E5%BD%B9%EF%BC%9A%E5%AE%89%E5%80%8D%E6%B0%8F%E7%9A%84%E8%A6%86%E7%81%AD/</url>
    
    <content type="html"><![CDATA[<p>1051年由于安倍氏的势力庞大起来，停止了对朝廷缴纳贡租，这个时候朝廷派陆奥守藤原登任出兵试探安倍氏。但是这场战斗由安倍的胜利结束，藤原登任只能离开了陆奥。</p><p>随后由源赖义接替他收拾烂摊子，由于当时皇帝大赦天下，赦免了安倍氏叛乱的罪状，安倍赖良也有意向修复朝廷关系，随后就和平了。</p><p>1056年，源赖义经过阿九丽川河畔在这里露营的时候，遭到袭击他们认定这是安倍氏因为藤原光贞拒绝了让她妹妹和安倍赖良儿子的婚姻的报复。</p><p>赖源义手下有两个人是安倍赖良的女婿，其中一人被怀疑反叛而被杀死，另一个索性就反了投了安倍赖良。赖源义对安倍作战期初陷入了僵局，而后他劝说安倍氏的安倍富忠反叛，而此成功伏击杀死了安倍赖良。随后，赖源义本想就此结束，但是朝廷还是想要彻底拿下安倍家族。</p><p>但是战争又陷入了僵局，1062年，这个时候朝廷向清源氏求援，这才最终拿下安倍氏。但是代价是清源氏得到了部分安倍氏的力量，成了奥羽地区的霸主。</p>]]></content>
    
    
    <categories>
      
      <category>阅读</category>
      
      <category>全历史</category>
      
      <category>历史</category>
      
      <category>日本史</category>
      
    </categories>
    
    
    <tags>
      
      <tag>article</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1016年 藤原道长任摄政：摄关政治建立</title>
    <link href="/2023/08/31/1016%E5%B9%B4%20%E8%97%A4%E5%8E%9F%E9%81%93%E9%95%BF%E4%BB%BB%E6%91%84%E6%94%BF%EF%BC%9A%E6%91%84%E5%85%B3%E6%94%BF%E6%B2%BB%E5%BB%BA%E7%AB%8B/"/>
    <url>/2023/08/31/1016%E5%B9%B4%20%E8%97%A4%E5%8E%9F%E9%81%93%E9%95%BF%E4%BB%BB%E6%91%84%E6%94%BF%EF%BC%9A%E6%91%84%E5%85%B3%E6%94%BF%E6%B2%BB%E5%BB%BA%E7%AB%8B/</url>
    
    <content type="html"><![CDATA[<p>976年，冷泉天皇继位，但是这位天皇精神不太正常，可能是日本皇室长期近亲结婚的结果。于是，权臣藤原实赖开始辅佐天皇，并很快掌握了朝廷大局，逐步让藤原氏建立起摄关政治。</p><p>摄关政治说的是摄政和关白，摄政是天皇还小的时候代替天皇行国政，关白则是等到天皇成年后辅佐天皇统理政治。这个掌管摄关政治的藤原氏，实际上掌握了日本政治实权，控制天皇的废立。</p><p>这种政治能够形成，实际上是日本对地方贵族的掌控力弱，导致地方贵族能够形成实力，靠着强大的势力跻身朝廷影响政局。这些强大的贵族，一边通过联姻控制权利，另一方面继续凭借自身地位兼并土地。</p><p>藤原氏经过一代代人的努力，到了藤原道长的时候家族在朝中的势力达到了顶峰。他以三条天皇有眼疾为由，劝其退位并将皇位传授于九岁外孙一条天皇，藤原道长作为一条天皇外祖父进行摄政。</p><p>藤原家族大了内部也会有争端，藤原道长的外侄很有能力，很快职位甚至高于道长，但是老道的道长最终争取到了关白的职位。而后，道长意识到其是一个威胁，再一次他的外侄伊周因为自己恋人私通法皇，并采取行动伏击法皇的时候，果断抓住其罪状。并策划了其他两项罪状将其流放，最终击败政敌。</p><p>但是摄关政治本身也具有不稳定性，例如如果藤原道长没有女儿嫁入皇宫，没有天皇和藤原氏之女诞生男性后裔，这种制度就难以为继。而后，冷泉天皇就是没能和藤原氏皇后诞下皇子，最终让藤原氏开始衰弱。</p>]]></content>
    
    
    <categories>
      
      <category>阅读</category>
      
      <category>全历史</category>
      
      <category>历史</category>
      
      <category>日本史</category>
      
    </categories>
    
    
    <tags>
      
      <tag>article</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1083年 后三年之役：源氏名震天下</title>
    <link href="/2023/08/31/1083%E5%B9%B4%20%E5%90%8E%E4%B8%89%E5%B9%B4%E4%B9%8B%E5%BD%B9%EF%BC%9A%E6%BA%90%E6%B0%8F%E5%90%8D%E9%9C%87%E5%A4%A9%E4%B8%8B/"/>
    <url>/2023/08/31/1083%E5%B9%B4%20%E5%90%8E%E4%B8%89%E5%B9%B4%E4%B9%8B%E5%BD%B9%EF%BC%9A%E6%BA%90%E6%B0%8F%E5%90%8D%E9%9C%87%E5%A4%A9%E4%B8%8B/</url>
    
    <content type="html"><![CDATA[<p>在1051年-1062年平顶安倍赖时的叛乱前九年战役中清源武则立了大功，朝廷让他做了镇守府从五位下，还将安倍氏的六个郡都赏赐给了他。</p><p>清原武则去世后，传位给了他的孙子清源真衡。此时他的兄弟有清源家衡和清源清衡。清源家衡是清原武则的儿子清源武贞再娶的而生的，清源清衡则是当时安倍氏覆灭后，清原武则将藤原经清的遗孀给了他的继子。</p><p>由于清原武则性情豪横，引起了族内很多人的不满，特别是他的姑父吉彦武秀后面还联合他的两个血缘不是很深厚的弟弟一起参与反叛他的行动来。</p><p>当时源义家刚好上任陆奥来，清源真衡就请求其帮助平顶两个弟弟，帮助他驻守领地。帮助防守住了两个弟弟的袭击。</p><p>而后清源真衡在追击姑父的途中病死，于是这两个弟弟也不折腾了，随后源义家作为陆奥的最高长官，将清源真衡留下的六个领地均分给了这两个人。但是清源家衡不满无清源血缘关系的继子能够拿到一半土地，一气之下夜袭清源清衡的居所杀光了几乎所有人，清源清衡侥幸逃了出来，随后请源义家主持公道。</p><p>源义家也很是义气，源义家的三弟辞去朝廷要职后一起帮助哥哥镇压叛乱，最终还自掏腰包对参战的武士封赏，这也得到了很高的声望。</p>]]></content>
    
    
    <categories>
      
      <category>阅读</category>
      
      <category>全历史</category>
      
      <category>历史</category>
      
      <category>日本史</category>
      
    </categories>
    
    
    <tags>
      
      <tag>article</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1086年 白河天皇开设院政：上承摄关，下启武家</title>
    <link href="/2023/08/31/1086%E5%B9%B4%20%E7%99%BD%E6%B2%B3%E5%A4%A9%E7%9A%87%E5%BC%80%E8%AE%BE%E9%99%A2%E6%94%BF%EF%BC%9A%E4%B8%8A%E6%89%BF%E6%91%84%E5%85%B3%EF%BC%8C%E4%B8%8B%E5%90%AF%E6%AD%A6%E5%AE%B6/"/>
    <url>/2023/08/31/1086%E5%B9%B4%20%E7%99%BD%E6%B2%B3%E5%A4%A9%E7%9A%87%E5%BC%80%E8%AE%BE%E9%99%A2%E6%94%BF%EF%BC%9A%E4%B8%8A%E6%89%BF%E6%91%84%E5%85%B3%EF%BC%8C%E4%B8%8B%E5%90%AF%E6%AD%A6%E5%AE%B6/</url>
    
    <content type="html"><![CDATA[<p>藤原家族把手摄关政治很长的时间，本来通过联姻等手段巩固权力，但是后来藤原家族并没有诞下子嗣，这导致后来不得以让三条天皇继位。</p><p>三条天皇对藤原家族把握朝政飞扬跋扈的态度很不满意，同时也有很多其他家族的人也很是不满，可是三条天皇还没有大展宏图就很快去世了，继位的是白河天皇。</p><p>白河天皇继位没多久就主动退位成太上皇，建立了院政处理政事，实际上摄关政治只会影响到当政天皇的政令，但是不会影响到太上皇，这也是白河天皇用于抵抗藤原家族摄关政治的手段。</p><p>但是院政并没有巩固皇权，反而引发了很多纷争，例如皇室争夺皇位和实权，各类贵族的对立，虽然这一院政开设一个多世纪夺回了实权，却也因为种种纷争不得以借助武士阶级的力量，导致武士阶层力量变得庞大起来。</p>]]></content>
    
    
    <categories>
      
      <category>阅读</category>
      
      <category>全历史</category>
      
      <category>历史</category>
      
      <category>日本史</category>
      
    </categories>
    
    
    <tags>
      
      <tag>article</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1156年 保元之乱：武者之世的开启</title>
    <link href="/2023/08/31/1156%E5%B9%B4%20%E4%BF%9D%E5%85%83%E4%B9%8B%E4%B9%B1%EF%BC%9A%E6%AD%A6%E8%80%85%E4%B9%8B%E4%B8%96%E7%9A%84%E5%BC%80%E5%90%AF/"/>
    <url>/2023/08/31/1156%E5%B9%B4%20%E4%BF%9D%E5%85%83%E4%B9%8B%E4%B9%B1%EF%BC%9A%E6%AD%A6%E8%80%85%E4%B9%8B%E4%B8%96%E7%9A%84%E5%BC%80%E5%90%AF/</url>
    
    <content type="html"><![CDATA[<p>白河法皇开辟了院政政治后，除了成为太上皇，还可以出家成为法皇，地位同样重要。他的后代基本也继承了他的这套院政体系。鸟羽天皇因为白河法皇让其让位给他的儿子崇德而心生不满，因此后来等白河法皇去世后，强迫崇德退位让位于自己的兄弟近卫天皇，然而近卫天皇去世太快，后经过推举选择了后白河继位于天皇。</p><p>崇德天皇对自己强迫禅让一事感到十分愤怒，于是暗中培养势力。形成了崇德派系，同样的后白河天皇也在培养自己的势力，形成了后白河天皇系。</p><p>两者矛盾在1156年一月鸟羽法皇去世后,越来越大，只差一声哨响。</p><p>随后7月11日，平安京白河派势力几个小时就打败了崇德派。随后就是对其发配，问斩；对支持白河的平氏和源氏家族封赏，这两大家族也逐渐壮大起来，武士阶层初次尝到好处，这也奠定了后面的武士壮大混战的局面。</p>]]></content>
    
    
    <categories>
      
      <category>阅读</category>
      
      <category>全历史</category>
      
      <category>历史</category>
      
      <category>日本史</category>
      
    </categories>
    
    
    <tags>
      
      <tag>article</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1159年 平治之乱：封赏不均带来的政变</title>
    <link href="/2023/08/31/1159%E5%B9%B4%20%E5%B9%B3%E6%B2%BB%E4%B9%8B%E4%B9%B1%EF%BC%9A%E5%B0%81%E8%B5%8F%E4%B8%8D%E5%9D%87%E5%B8%A6%E6%9D%A5%E7%9A%84%E6%94%BF%E5%8F%98/"/>
    <url>/2023/08/31/1159%E5%B9%B4%20%E5%B9%B3%E6%B2%BB%E4%B9%8B%E4%B9%B1%EF%BC%9A%E5%B0%81%E8%B5%8F%E4%B8%8D%E5%9D%87%E5%B8%A6%E6%9D%A5%E7%9A%84%E6%94%BF%E5%8F%98/</url>
    
    <content type="html"><![CDATA[<p>保元之乱结束后，后白河天皇却没有重用功劳最大的两个功臣，源义朝和平清盛，转而培养了自己的心腹藤原通宪，后世多称为信西（他的法号）。后白河天皇将希望兼并很多的新出现的庄园，因此请自己的亲信信西全权办理此事。</p><p>信西则专用自己的派系，这个时候他也需要武士阶级的支持于是选择了平清盛，重用了他给他加官进爵，然而源义朝却只得了一个左马头也就是牧场管理员，他心有不甘，于是后面联合藤原信赖，乘着平清盛外出参拜的间隙，很快占领了皇宫，软禁了白河上皇。追杀死了信西。</p><p>而后平清盛听闻后，再安置好了皇室成员后，立刻举兵攻打了源义朝的部队，随后打败源义朝和藤原信赖，这一战藤原信赖和源义朝一派几乎全军覆没，平氏一族因此飞黄腾达。</p>]]></content>
    
    
    <categories>
      
      <category>阅读</category>
      
      <category>全历史</category>
      
      <category>历史</category>
      
      <category>日本史</category>
      
    </categories>
    
    
    <tags>
      
      <tag>article</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1180年 富士川之战：源氏的翻身之役</title>
    <link href="/2023/08/31/1180%E5%B9%B4%20%E5%AF%8C%E5%A3%AB%E5%B7%9D%E4%B9%8B%E6%88%98%EF%BC%9A%E6%BA%90%E6%B0%8F%E7%9A%84%E7%BF%BB%E8%BA%AB%E4%B9%8B%E5%BD%B9/"/>
    <url>/2023/08/31/1180%E5%B9%B4%20%E5%AF%8C%E5%A3%AB%E5%B7%9D%E4%B9%8B%E6%88%98%EF%BC%9A%E6%BA%90%E6%B0%8F%E7%9A%84%E7%BF%BB%E8%BA%AB%E4%B9%8B%E5%BD%B9/</url>
    
    <content type="html"><![CDATA[<p>自平治之乱后，平清盛作为铲除叛军藤原信赖和源义朝的功臣，且本身势力也十分强大，因而平步青云飞黄腾达。</p><p>平治之乱结束后，他起初支持二条天皇，但是自己的妻子的妹妹和白河天皇撮合生下了高仓天皇后转而支持高仓天皇。随后等二条天皇死后，他和后白河上皇立高仓天皇为皇太子。</p><p>而后平清盛和后白河天皇进入了短暂的蜜月期，这个时候官位也一度达到了最高。但是后来平清盛的无休止扩张引起了后白河天皇的不满，因此趁着他的亲人死后，没收其财产间接打击了平清盛的势力。</p><p>而后终于在他儿子平重盛死后，后白河天皇又没收其财产，这导致平清盛受不了，直接反叛将白河天皇幽禁在鸟羽殿。而后又赶下高仓天皇，扶植自己的外孙登上皇位。</p><p>他的种种行为引发了皇室和地方贵族的不满，这个时候之前被保留下来的源氏后裔，源义朝得到岳父北条家的支持，召集了旧部。但是第一战就失败了，而后平家转头进攻，但是因为平家长途奔袭，补给缺乏，最后在和源氏对峙的过程中撤军了，这一战源氏不战而胜，使得平家的政权发生了动荡。</p>]]></content>
    
    
    <categories>
      
      <category>阅读</category>
      
      <category>全历史</category>
      
      <category>历史</category>
      
      <category>日本史</category>
      
    </categories>
    
    
    <tags>
      
      <tag>article</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1185年 坛浦之战：平源兴灭之战</title>
    <link href="/2023/08/31/1185%E5%B9%B4%20%E5%9D%9B%E6%B5%A6%E4%B9%8B%E6%88%98%EF%BC%9A%E5%B9%B3%E6%BA%90%E5%85%B4%E7%81%AD%E4%B9%8B%E6%88%98/"/>
    <url>/2023/08/31/1185%E5%B9%B4%20%E5%9D%9B%E6%B5%A6%E4%B9%8B%E6%88%98%EF%BC%9A%E5%B9%B3%E6%BA%90%E5%85%B4%E7%81%AD%E4%B9%8B%E6%88%98/</url>
    
    <content type="html"><![CDATA[<p>1185年源义经率军在屋岛击败平氏军队丢掉了濑户内海的地盘，平氏丧失了大量的兵员和地方家族的支持。</p><p>3月24日，源赖朝率领源氏军与平宗盛领导的平氏军在关门海峡的坛浦展开决战。决战双方平氏有500艘战船，源氏有840艘战船，源氏下令攻击舵手和水手以降低对手船只的机动性，并且依靠正面的潮流，撞击平氏的战船，或者冲上平氏的战船展开白刃战。</p><p>最终在这场战役中消灭了平氏的最后有生力量，最终源赖朝取代平清盛，成为日本权利顶峰，开始建立镰仓幕府，并逼迫天皇封其为征夷大将军。</p>]]></content>
    
    
    <categories>
      
      <category>阅读</category>
      
      <category>全历史</category>
      
      <category>历史</category>
      
      <category>日本史</category>
      
    </categories>
    
    
    <tags>
      
      <tag>article</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1190年 源赖朝任征夷大将军：幕府政权的建立</title>
    <link href="/2023/08/31/1190%E5%B9%B4%20%E6%BA%90%E8%B5%96%E6%9C%9D%E4%BB%BB%E5%BE%81%E5%A4%B7%E5%A4%A7%E5%B0%86%E5%86%9B%EF%BC%9A%E5%B9%95%E5%BA%9C%E6%94%BF%E6%9D%83%E7%9A%84%E5%BB%BA%E7%AB%8B/"/>
    <url>/2023/08/31/1190%E5%B9%B4%20%E6%BA%90%E8%B5%96%E6%9C%9D%E4%BB%BB%E5%BE%81%E5%A4%B7%E5%A4%A7%E5%B0%86%E5%86%9B%EF%BC%9A%E5%B9%95%E5%BA%9C%E6%94%BF%E6%9D%83%E7%9A%84%E5%BB%BA%E7%AB%8B/</url>
    
    <content type="html"><![CDATA[<p>源赖朝击败了平家后，被封为右近卫大将军。此后他登上了权力顶峰后，就在考虑如何获取到武士阶层的支持，因为他不想成为下一个平清盛。</p><p>因此他对于想要做官的武士，他卡住了人事，将这些人培养成自己的”御家人”，相当于自己的家臣，通过保证他们的土地，甚至让他们获取新的土地，笼络了不少武士阶层。</p><p>接下来他要面对的是后白河天皇，他希望将权力伸入到朝廷里，但是却又不想太过于张扬以至于落个源赖朝的下场。于是表面上装作忠臣，提出”议奏”制，将臣子地决议报告到天皇那里定夺。实际上间接地操控了政事。</p><p>随后又控制了天皇的后宫，在这个时候他提出想要担任征夷大将军的提案，但是被否决了。他也没发难，等到天皇死后，后鸟羽天皇继位后，强迫其封了自己征夷大将军。</p><p>像这样源赖朝实际建立了公私分离的幕府政权体系，地方掌握国家军权的强大武士操控着朝政。</p>]]></content>
    
    
    <categories>
      
      <category>阅读</category>
      
      <category>全历史</category>
      
      <category>历史</category>
      
      <category>日本史</category>
      
    </categories>
    
    
    <tags>
      
      <tag>article</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1221年 承久之乱：天皇发起的谋反</title>
    <link href="/2023/08/31/1221%E5%B9%B4%20%E6%89%BF%E4%B9%85%E4%B9%8B%E4%B9%B1%EF%BC%9A%E5%A4%A9%E7%9A%87%E5%8F%91%E8%B5%B7%E7%9A%84%E8%B0%8B%E5%8F%8D/"/>
    <url>/2023/08/31/1221%E5%B9%B4%20%E6%89%BF%E4%B9%85%E4%B9%8B%E4%B9%B1%EF%BC%9A%E5%A4%A9%E7%9A%87%E5%8F%91%E8%B5%B7%E7%9A%84%E8%B0%8B%E5%8F%8D/</url>
    
    <content type="html"><![CDATA[<p>源赖朝去世后，继任者难以服众，引发不满和争斗。</p><p>在这个过程中源赖朝妻子北条政子那边家族北条时政，开始在斗争中取得优势，逐步铲除了源氏的势力，随后还扶植幕府将军。而后发现其不好控制，甚至杀了他。但也因此被迫退休，由儿子北条义时执政。</p><p>后鸟羽上皇看到幕府的争斗后，觉得有机可趁，便起兵讨伐北条义时，但是也只招募到1万多人，反之幕府这边19万人，兵分三路，很快就取得了胜利。随后流放了皇族，也是这个时候幕府的权力空前膨胀。</p>]]></content>
    
    
    <categories>
      
      <category>阅读</category>
      
      <category>全历史</category>
      
      <category>历史</category>
      
      <category>日本史</category>
      
    </categories>
    
    
    <tags>
      
      <tag>article</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1280年 弘安之役：镰仓幕府的最后辉煌</title>
    <link href="/2023/08/31/1280%E5%B9%B4%20%E5%BC%98%E5%AE%89%E4%B9%8B%E5%BD%B9%EF%BC%9A%E9%95%B0%E4%BB%93%E5%B9%95%E5%BA%9C%E7%9A%84%E6%9C%80%E5%90%8E%E8%BE%89%E7%85%8C/"/>
    <url>/2023/08/31/1280%E5%B9%B4%20%E5%BC%98%E5%AE%89%E4%B9%8B%E5%BD%B9%EF%BC%9A%E9%95%B0%E4%BB%93%E5%B9%95%E5%BA%9C%E7%9A%84%E6%9C%80%E5%90%8E%E8%BE%89%E7%85%8C/</url>
    
    <content type="html"><![CDATA[<p>1274年，文永之役中，元朝入侵日本失败，忽必烈在1280年8月，忽必烈召集群臣正式拟定对日的作战计划。此时的元帝国，已经灭亡了强敌南宋，获得了大批的降兵和战船，还有藩属国高句丽的协助，这次的对日作战可谓是势在必得。</p><p>元军为了保险起见，兵分两路，一路从朝鲜出发由忻都带领大概4万人，配置和部署和文永之役差不多。另外一路为江南军，从浙江出发，携带了很多农具和谷种工匠，做好了登录九州后稳扎稳打的准备。这批部队大概十万人。</p><p>当时的镰仓幕府的掌权人北条时宗，吃了文永之役的亏，于是在九州容易登录的地区博多湾一带修建了延绵20公里，高两米的”海上长城”。还将九州地区的大名换成了自己的亲信，为了抵抗元军做足了准备。</p><p>元军的进攻路线和上一次一样，先后攻克了附近的岛屿，本来氏打算等待江南军会师后，一起进攻。但是当时忻都进攻太顺利了，想要一下拿下登录九州。但是，面对准备充分的日军，一直陷入拉锯战无法前进，并且当时天气炎热营内爆发了瘟疫，不得已只能撤军到岛上等待江南军。</p><p>6月18日顺利和江南军会师，但是江南军的将领范文虎是南宋降将，本身实力不强，由于当时已经找不到其他人统领水军，只能让他上了。但是后来8月1日，百年难得一遇的超级台风席卷了元军舰队，导致元军数千艘战船葬身海底。</p><p>范文虎见势不妙，叫上了忻都带领剩下的舰队迅速逃亡回国内，导致被遗弃在鹰岛上的近万名士兵，被接憧而至的日军全数歼灭或者俘虏。</p><p>北条时宗经过两次抗击元军，声名大振权势达到顶峰。</p>]]></content>
    
    
    <categories>
      
      <category>阅读</category>
      
      <category>全历史</category>
      
      <category>历史</category>
      
      <category>日本史</category>
      
    </categories>
    
    
    <tags>
      
      <tag>article</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1274年 文永之役：一次戏剧性的胜利</title>
    <link href="/2023/08/31/1274%E5%B9%B4%20%E6%96%87%E6%B0%B8%E4%B9%8B%E5%BD%B9%EF%BC%9A%E4%B8%80%E6%AC%A1%E6%88%8F%E5%89%A7%E6%80%A7%E7%9A%84%E8%83%9C%E5%88%A9/"/>
    <url>/2023/08/31/1274%E5%B9%B4%20%E6%96%87%E6%B0%B8%E4%B9%8B%E5%BD%B9%EF%BC%9A%E4%B8%80%E6%AC%A1%E6%88%8F%E5%89%A7%E6%80%A7%E7%9A%84%E8%83%9C%E5%88%A9/</url>
    
    <content type="html"><![CDATA[<p>1268年忽必烈向日本发出文书要求其臣服于蒙古，日本拒绝了。</p><p>1274年忽必烈出兵日本，忻都率领5000高句丽士兵，2万汉人士兵组成东路军东征日本。联军率先拿下周边岛屿，随后登陆到日本九州的福冈附近。</p><p>当时执政是北条家族，他们率领武士们层层阻击但也还是难以抵挡蒙古军队的攻势。</p><p>这个时候，忻都看到自己的部队深入敌军腹地，补给不便，且日军武士展现出了强大的抵抗精神，自己的副帅也因受伤而不得不退到船上，因此到了晚上的时候，他下令部队撤回到船上。</p><p>但是晚上的时候，突然天气大变，风暴导致半数以上的士兵葬身鱼腹。最后侥幸活下来的士兵，少部分被日军俘虏，剩下大部分士气也丧失殆尽不得以撤回到朝鲜，第一次的交锋就以这种意想不到的方式结束了，日军取得了胜利。</p>]]></content>
    
    
    <categories>
      
      <category>阅读</category>
      
      <category>全历史</category>
      
      <category>历史</category>
      
      <category>日本史</category>
      
    </categories>
    
    
    <tags>
      
      <tag>article</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1325年 正中、元弘之变：锲而不舍的倒幕运动</title>
    <link href="/2023/08/31/1325%E5%B9%B4%20%E6%AD%A3%E4%B8%AD%E3%80%81%E5%85%83%E5%BC%98%E4%B9%8B%E5%8F%98%EF%BC%9A%E9%94%B2%E8%80%8C%E4%B8%8D%E8%88%8D%E7%9A%84%E5%80%92%E5%B9%95%E8%BF%90%E5%8A%A8/"/>
    <url>/2023/08/31/1325%E5%B9%B4%20%E6%AD%A3%E4%B8%AD%E3%80%81%E5%85%83%E5%BC%98%E4%B9%8B%E5%8F%98%EF%BC%9A%E9%94%B2%E8%80%8C%E4%B8%8D%E8%88%8D%E7%9A%84%E5%80%92%E5%B9%95%E8%BF%90%E5%8A%A8/</url>
    
    <content type="html"><![CDATA[<p>后醍醐天皇因不满幕府把持天皇继承权，动了反叛的心思。</p><p>第一次联合了能臣日野俊基和日野资朝，打算趁武士去维持祭祀仪式治安的时候，直导京都。但是这个计划被泄露了，随后幕府立即查抄了倒幕骨干，后醍醐天皇屈尊解释此时无关才免于责罚，这就是正中之变。</p><p>随后后醍醐天皇韬光养晦等待下一次机会，它集结了原有旧部，以及动员了很多僧兵和恶党，准备很充分，但是1331年计划败露，倒幕骨干被逮捕，但未殃及后醍醐天皇。但是4个月后天皇按耐不住，带着象征皇室的神器离开皇宫，前往笠置山以此为据点号召勤王，但是很快就沦陷了，天皇也被流放到隐歧岛，这就是元弘之变。</p><p>虽然两场计划都失败了，但是天皇威望还在，且国内倒幕运动此起彼伏。后醍醐天皇还最终逃出来，号召倒幕，而幕府的征讨大将足利高氏和新田义贞临阵倒戈，最终给了幕府致命一击，导致幕府灭亡。</p>]]></content>
    
    
    <categories>
      
      <category>阅读</category>
      
      <category>全历史</category>
      
      <category>历史</category>
      
      <category>日本史</category>
      
    </categories>
    
    
    <tags>
      
      <tag>article</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1333年 建武新政：皇权复兴的失败尝试</title>
    <link href="/2023/08/31/1333%E5%B9%B4%20%E5%BB%BA%E6%AD%A6%E6%96%B0%E6%94%BF%EF%BC%9A%E7%9A%87%E6%9D%83%E5%A4%8D%E5%85%B4%E7%9A%84%E5%A4%B1%E8%B4%A5%E5%B0%9D%E8%AF%95/"/>
    <url>/2023/08/31/1333%E5%B9%B4%20%E5%BB%BA%E6%AD%A6%E6%96%B0%E6%94%BF%EF%BC%9A%E7%9A%87%E6%9D%83%E5%A4%8D%E5%85%B4%E7%9A%84%E5%A4%B1%E8%B4%A5%E5%B0%9D%E8%AF%95/</url>
    
    <content type="html"><![CDATA[<p>灭亡镰仓幕府后，后醍醐天皇改国号为建武，论功行赏给了第一功臣足利高氏一个很高的架空官位，以及赐字的最高礼遇。但是，实际上足利高氏的权力相较于之前是有所缩小，这引发其不满。</p><p>后醍醐天皇随后进行的一系列改革，都围绕着收回土地展开进行，而根本问题是因为日本的土地兼并频繁，这个并没有得到解决，导致底层武士阶层的不满。还有一批本应该在对抗蒙古的战斗中奖赏的武士，也并没有得到奖赏，这也进一步导致这批武士的不满，他们联手起来开始反叛后醍醐天皇。</p><p>后醍醐天皇由于忌惮足利高氏的实力，不敢让其镇压叛军，但是足利高氏违抗命令自行出兵，走出了反叛新政府的第一步。</p>]]></content>
    
    
    <categories>
      
      <category>阅读</category>
      
      <category>全历史</category>
      
      <category>历史</category>
      
      <category>日本史</category>
      
    </categories>
    
    
    <tags>
      
      <tag>article</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1335年 延原之乱：室町幕府建立</title>
    <link href="/2023/08/31/1335%E5%B9%B4%20%E5%BB%B6%E5%8E%9F%E4%B9%8B%E4%B9%B1%EF%BC%9A%E5%AE%A4%E7%94%BA%E5%B9%95%E5%BA%9C%E5%BB%BA%E7%AB%8B/"/>
    <url>/2023/08/31/1335%E5%B9%B4%20%E5%BB%B6%E5%8E%9F%E4%B9%8B%E4%B9%B1%EF%BC%9A%E5%AE%A4%E7%94%BA%E5%B9%95%E5%BA%9C%E5%BB%BA%E7%AB%8B/</url>
    
    <content type="html"><![CDATA[<p>由于后醍醐天皇并未能平衡好各方势力，进行了激进的改革，引发了武士阶层的再度叛乱。武士阶层进攻的方向是足利高氏所在的镰仓地区，理因由足利高氏出面镇压叛乱，但是后醍醐天皇忌惮其势力，因此派了别的人，但是足利高氏并未坐以待毙，自行出兵镇压叛乱，并很快镇压了叛乱。</p><p>回去后，在弟弟足利直义建议下，开始自行封赏功臣并在镰仓地区拥兵自重。这一行为被后醍醐天皇认定为叛乱，随即出兵讨伐他。</p><p>足利高氏一开始还是很怂的，开始认错，甚至是出家要求朝廷赦免自己的家族，但是朝廷依旧不依不饶。最开始的战斗足利高氏节节败退，但随后他不抱希望的召集全国武士对抗后醍醐天皇，最终在决战中取得了胜利。后足利军进入京都，拥立光严天皇。</p><p>在后来的战斗中，后醍醐天皇集结了不少的势力进行反攻，从京都赶走了足利高氏。但在后面的战斗中，足利高氏还是取得了胜利，并将天皇软禁在京都花山院。但随后后醍醐天皇跑了出去，在吉野地区建立了新的政权，就此南北朝开始对立。</p>]]></content>
    
    
    <categories>
      
      <category>阅读</category>
      
      <category>全历史</category>
      
      <category>历史</category>
      
      <category>日本史</category>
      
    </categories>
    
    
    <tags>
      
      <tag>article</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1350年 观应之乱：室町幕府的内部分裂</title>
    <link href="/2023/08/31/1350%E5%B9%B4%20%E8%A7%82%E5%BA%94%E4%B9%8B%E4%B9%B1%EF%BC%9A%E5%AE%A4%E7%94%BA%E5%B9%95%E5%BA%9C%E7%9A%84%E5%86%85%E9%83%A8%E5%88%86%E8%A3%82/"/>
    <url>/2023/08/31/1350%E5%B9%B4%20%E8%A7%82%E5%BA%94%E4%B9%8B%E4%B9%B1%EF%BC%9A%E5%AE%A4%E7%94%BA%E5%B9%95%E5%BA%9C%E7%9A%84%E5%86%85%E9%83%A8%E5%88%86%E8%A3%82/</url>
    
    <content type="html"><![CDATA[<p>随着足利尊氏在战场上不断取得优势，击败了南朝的几位名将，室町幕府内部的危机开始浮出水面。</p><p>这个时候主政的直义派势力十分强大，由于当时南朝名将凋亡，后醍醐天皇去世，北朝重心转向内政。但是，随后不久南朝楠木进攻京都，足利尊氏派的高师直兄弟前去征讨，这一战促使北朝军队大破南朝首都吉野，足利尊氏的势力开始大大增强，直义派开始渐渐陷入劣势。</p><p>1349年直义受不了高氏兄弟，随即上书要求罢免他们。但是高氏兄弟先下手为强，为了追捕直义还包围了足利尊氏的府邸，最终迫使其出家，并且流放了他的亲信。这一切事件，实际上就是足利尊氏和高师直一同谋划的。</p><p>1350年北朝改年号为观应，这年10月，直义的养子发起叛乱，直义乘乱逃脱到南朝，接受南朝旨意讨伐足利尊氏。并在后来的战斗中，大破京都。</p><p>但是事情很快发生了转机，足利尊氏下令接受南朝的统领，南北朝实现了统一，但是代价是南朝支持其讨伐足利直义。随后，足利尊氏在战斗中大败直义军，并而后毒杀了直义。</p>]]></content>
    
    
    <categories>
      
      <category>阅读</category>
      
      <category>全历史</category>
      
      <category>历史</category>
      
      <category>日本史</category>
      
    </categories>
    
    
    <tags>
      
      <tag>article</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1401年 堪合贸易：明日贸易与海盗</title>
    <link href="/2023/08/31/1401%E5%B9%B4%20%E5%A0%AA%E5%90%88%E8%B4%B8%E6%98%93%EF%BC%9A%E6%98%8E%E6%97%A5%E8%B4%B8%E6%98%93%E4%B8%8E%E6%B5%B7%E7%9B%97/"/>
    <url>/2023/08/31/1401%E5%B9%B4%20%E5%A0%AA%E5%90%88%E8%B4%B8%E6%98%93%EF%BC%9A%E6%98%8E%E6%97%A5%E8%B4%B8%E6%98%93%E4%B8%8E%E6%B5%B7%E7%9B%97/</url>
    
    <content type="html"><![CDATA[<p>1352年观应之乱后，室町幕府虽然解决了内部分裂问题，但是在长期的战争中，各地方大名做大拥兵自重，叛乱不断。直到第二代将军足利义诠去世后，也没能解决这个问题。</p><p>而后三代将军足利义满上任时，只有十岁内部争斗权力严重。但是，足利义满他是一个很有手段的人，渐渐平息了幕府内部和北朝的纷争，到了1392年，终于实现了南北朝的统一。</p><p>他是一个附庸风雅的人，喜欢文学建筑，主张和明朝进行贸易。但是和明朝进行贸易的地点九州还在地方大名手中，它通过一系列手段最终取得了九州的贸易权，在1401年正式开始和明朝的贸易。</p><p>明朝制定了严格的海禁政策，只允许在少部分地方进行政策允许的外贸。要贸易的国家需要首先向明朝进贡，随后政府以赏赐的形式给予商品和堪合证。堪合证是贸易的依据，每次进行进贡需要拿出上一次的堪合证，进贡完会发放下一次的堪合证，这种贸易也就是堪合贸易。由于和明朝之间的贸易利润丰厚，期间日本还爆发了几次争夺贸易权的战争，到了战国时代后，日本内乱最终终止了同明朝的贸易。</p>]]></content>
    
    
    <categories>
      
      <category>阅读</category>
      
      <category>全历史</category>
      
      <category>历史</category>
      
      <category>日本史</category>
      
    </categories>
    
    
    <tags>
      
      <tag>article</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1438年 永享之乱：乱世的前奏</title>
    <link href="/2023/08/31/1438%E5%B9%B4%20%E6%B0%B8%E4%BA%AB%E4%B9%8B%E4%B9%B1%EF%BC%9A%E4%B9%B1%E4%B8%96%E7%9A%84%E5%89%8D%E5%A5%8F/"/>
    <url>/2023/08/31/1438%E5%B9%B4%20%E6%B0%B8%E4%BA%AB%E4%B9%8B%E4%B9%B1%EF%BC%9A%E4%B9%B1%E4%B8%96%E7%9A%84%E5%89%8D%E5%A5%8F/</url>
    
    <content type="html"><![CDATA[<p>幕府将军足利义持因病去世，并没有留下遗嘱由谁继位，这个时候大臣建议采取抽签的形式从他的几个后代中选择后继者，以此排除足利持氏继位的野心。因为，足利持氏虽说也是足利的后代，但是出身为镰仓公方并没有担当过将军之位，重臣都认为他的人品和能力不能担任将军一职。随后由义圆继位，继位后改名义教。</p><p>他上任后率先想要除掉持氏，于是拉拢辅佐持氏的筱川公方足利满直，承诺可以获取其封底为奖励除掉持氏。但是满直也怕义教等他们两败俱伤进而坐收渔翁之利，因此一直没有动静。</p><p>后来，持氏的野心越来越大，甚至私自给自己儿子赐字”义”，这件事被告密后，持氏知道告密者后出兵上杉宪实，上衫宪实随机求援足利义教。足利义教知道后，出兵讨伐持氏，最终剿灭了持氏。</p>]]></content>
    
    
    <categories>
      
      <category>阅读</category>
      
      <category>全历史</category>
      
      <category>历史</category>
      
      <category>日本史</category>
      
    </categories>
    
    
    <tags>
      
      <tag>article</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1441年 嘉吉之乱：将军大权旁落</title>
    <link href="/2023/08/31/1441%E5%B9%B4%20%E5%98%89%E5%90%89%E4%B9%8B%E4%B9%B1%EF%BC%9A%E5%B0%86%E5%86%9B%E5%A4%A7%E6%9D%83%E6%97%81%E8%90%BD/"/>
    <url>/2023/08/31/1441%E5%B9%B4%20%E5%98%89%E5%90%89%E4%B9%8B%E4%B9%B1%EF%BC%9A%E5%B0%86%E5%86%9B%E5%A4%A7%E6%9D%83%E6%97%81%E8%90%BD/</url>
    
    <content type="html"><![CDATA[<p>足利义教继位后，由于其是抽签选中且当时将军的权势也在逐渐下降。因此，他必须对外保证强大的权威，但是正是这种对权利的过分注重，导致引发了各地地方实力派的不满。</p><p>赤松满佑的弟弟再一次得罪了足利义教后，其领地很快被剥夺，这导致他认为足利义教很快会对他出手，因此他决定放手一搏，将其宴请到家里，随后设伏杀掉了他。</p><p>但是后来幕府的大臣聚集起来，任足利义教的7岁儿子上位，并出兵最终讨伐了赤松满佑，嘉吉之乱结束。</p><p>但是由于孩子只有七岁，这意味着大权将落入管领之手，这也引发了更大的政治混乱。</p>]]></content>
    
    
    <categories>
      
      <category>阅读</category>
      
      <category>全历史</category>
      
      <category>历史</category>
      
      <category>日本史</category>
      
    </categories>
    
    
    <tags>
      
      <tag>article</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1467年 应仁之乱：战国时代的开端</title>
    <link href="/2023/08/31/1467%E5%B9%B4%20%E5%BA%94%E4%BB%81%E4%B9%8B%E4%B9%B1%EF%BC%9A%E6%88%98%E5%9B%BD%E6%97%B6%E4%BB%A3%E7%9A%84%E5%BC%80%E7%AB%AF/"/>
    <url>/2023/08/31/1467%E5%B9%B4%20%E5%BA%94%E4%BB%81%E4%B9%8B%E4%B9%B1%EF%BC%9A%E6%88%98%E5%9B%BD%E6%97%B6%E4%BB%A3%E7%9A%84%E5%BC%80%E7%AB%AF/</url>
    
    <content type="html"><![CDATA[<p>室町幕府的第六代将军在嘉吉之乱中被杀，而新上任的第七代将军上任一年便因病去世。只好让年仅8岁的足利义政担当将军之位。</p><p>足利义政对持续混乱的政局感到厌烦，到了29岁的时候，他还没有子嗣，便想将将军之位传给弟弟，弟弟并不想继承这个位置，但是哥哥承诺即便自己有了子嗣，也会让其出家，不问政事。他的弟弟足利义视才勉强同意继承将军之位。</p><p>但不久后，足利义政喜得一子，他的妻子富子想要自己的儿子继承皇位，便联合山名宗全想要将义视拉下来。但是义视自己也有亲信，也是山下宗全的政敌细川胜元。</p><p>随后由于细川胜元的一个亲信被宗全势力给铲除了，细川胜元咽不下这口气，以保护天皇的名号，召集盟军16万组成东军。宗全这边也集结了11万士兵，称为西军，双方战斗你来我往损失不小，互有胜利。</p><p>直到双方的领导人在1473年后相继去世，后继者细川胜元的儿子政元和宗全的儿子政弘达成和解。并在1477年政弘撤权西军，结束了小规模的战争，这场长达十年的动乱终于结束。</p>]]></content>
    
    
    <categories>
      
      <category>阅读</category>
      
      <category>全历史</category>
      
      <category>历史</category>
      
      <category>日本史</category>
      
    </categories>
    
    
    <tags>
      
      <tag>article</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1455年 享德之乱：开启关东大混战</title>
    <link href="/2023/08/31/1455%E5%B9%B4%20%E4%BA%AB%E5%BE%B7%E4%B9%8B%E4%B9%B1%EF%BC%9A%E5%BC%80%E5%90%AF%E5%85%B3%E4%B8%9C%E5%A4%A7%E6%B7%B7%E6%88%98/"/>
    <url>/2023/08/31/1455%E5%B9%B4%20%E4%BA%AB%E5%BE%B7%E4%B9%8B%E4%B9%B1%EF%BC%9A%E5%BC%80%E5%90%AF%E5%85%B3%E4%B8%9C%E5%A4%A7%E6%B7%B7%E6%88%98/</url>
    
    <content type="html"><![CDATA[<p>事情追溯到永享之乱，当初因为上杉宪实的告密，最终引来幕府军剿灭了足利持氏的势力，足利持氏也因此自焚而死。</p><p>因此上杉一派取得了对关东地区的绝对掌控权，为了避免其一人做大，朝廷随后派足利持氏的儿子足利成氏前往关东担任关东公方的职务。由于上杉宪实认识到自己弑杀主上的错误，他出了家，以洗刷罪孽将权利让给了自己的儿子上杉宪忠。因此足利持氏的愤怒几乎全部花在了他身上。</p><p>在享德三年，他用计谋引诱上杉宪忠到了镰仓最终带人将其暗杀。上杉家的势力知道后，第一时间召集部队要扬言为其报仇。双方在关东地区打的难解难分的时候，幕府军后面攻占了镰仓老巢，足利成氏最后只能逃到下总国古河城，享德之乱结束。</p>]]></content>
    
    
    <categories>
      
      <category>阅读</category>
      
      <category>全历史</category>
      
      <category>历史</category>
      
      <category>日本史</category>
      
    </categories>
    
    
    <tags>
      
      <tag>article</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1476年 长尾景春之乱：关东战国时代的序幕</title>
    <link href="/2023/08/31/1476%E5%B9%B4%20%E9%95%BF%E5%B0%BE%E6%99%AF%E6%98%A5%E4%B9%8B%E4%B9%B1%EF%BC%9A%E5%85%B3%E4%B8%9C%E6%88%98%E5%9B%BD%E6%97%B6%E4%BB%A3%E7%9A%84%E5%BA%8F%E5%B9%95/"/>
    <url>/2023/08/31/1476%E5%B9%B4%20%E9%95%BF%E5%B0%BE%E6%99%AF%E6%98%A5%E4%B9%8B%E4%B9%B1%EF%BC%9A%E5%85%B3%E4%B8%9C%E6%88%98%E5%9B%BD%E6%97%B6%E4%BB%A3%E7%9A%84%E5%BA%8F%E5%B9%95/</url>
    
    <content type="html"><![CDATA[<p>1476年长尾景春因为没有继承长衫氏的首席家臣之位，心生不满发起叛乱。</p><p>叛乱之前他想联合太田道灌，但是他没有答应长尾景春，反而把消息透露给了长衫氏族长，显定。随即太田道灌同显定商讨如何镇压叛乱。但是显定不愿推翻之前的决定，同时也不愿向长尾景春妥协。</p><p>最后长尾景春发起了叛乱，切断了城内的补给，上杉军不战自退，最后在太田道灌的指挥下，最终平定了长尾景春的叛乱，但也和足利成氏签订合约承认其领国统治权。</p>]]></content>
    
    
    <categories>
      
      <category>阅读</category>
      
      <category>全历史</category>
      
      <category>历史</category>
      
      <category>日本史</category>
      
    </categories>
    
    
    <tags>
      
      <tag>article</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1487年 长享延德之乱：杀鸡不成，丢了性命</title>
    <link href="/2023/08/31/1487%E5%B9%B4%20%E9%95%BF%E4%BA%AB%E5%BB%B6%E5%BE%B7%E4%B9%8B%E4%B9%B1%EF%BC%9A%E6%9D%80%E9%B8%A1%E4%B8%8D%E6%88%90%EF%BC%8C%E4%B8%A2%E4%BA%86%E6%80%A7%E5%91%BD/"/>
    <url>/2023/08/31/1487%E5%B9%B4%20%E9%95%BF%E4%BA%AB%E5%BB%B6%E5%BE%B7%E4%B9%8B%E4%B9%B1%EF%BC%9A%E6%9D%80%E9%B8%A1%E4%B8%8D%E6%88%90%EF%BC%8C%E4%B8%A2%E4%BA%86%E6%80%A7%E5%91%BD/</url>
    
    <content type="html"><![CDATA[<p>应仁之乱中，幕府内斗使足利家元气大伤，此时继位的足利义尚急于恢复幕府权威，一直想借助战争树立威信。</p><p>后来六角家发生内乱，六角高濑击败了东极家取得了近江区域，而该区域距离京都很近，这样让幕府如芒在背。于是足利义尚借此出兵，但是六角家知道正面难以抗击幕府军，于是退守山林，跟幕府军打游击，幕府军损失惨重，却又无可奈何，这个时候参与征讨的加贺军后院起火，他们不得不撤军。但是想到不能无功而返，于是进攻附近同样叛乱的净土真宗但是由于其和太后富子有关系，群臣都反对，最终足利义尚一肚子气很快就在营帐中死了。</p><p>而后足利义材继位，他一上来就想复仇，并在1491年发起了对近江的第二次进攻，这次杀死了六角家同族的山内政纲，六角高赖见此又跑回山林，为了避免陷入游击中，足利义材下令撤军，任命高赖的儿子为近江守护，对外宣称取得了胜利。</p><p>这两次战争幕府并没有起到杀鸡儆猴的作用，相反地方大名看到了幕府对地方事务的软弱无力。</p>]]></content>
    
    
    <categories>
      
      <category>阅读</category>
      
      <category>全历史</category>
      
      <category>历史</category>
      
      <category>日本史</category>
      
    </categories>
    
    
    <tags>
      
      <tag>article</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1488年 本愿寺占领加贺国：最强宗教大名诞生</title>
    <link href="/2023/08/31/1488%E5%B9%B4%20%E6%9C%AC%E6%84%BF%E5%AF%BA%E5%8D%A0%E9%A2%86%E5%8A%A0%E8%B4%BA%E5%9B%BD%EF%BC%9A%E6%9C%80%E5%BC%BA%E5%AE%97%E6%95%99%E5%A4%A7%E5%90%8D%E8%AF%9E%E7%94%9F/"/>
    <url>/2023/08/31/1488%E5%B9%B4%20%E6%9C%AC%E6%84%BF%E5%AF%BA%E5%8D%A0%E9%A2%86%E5%8A%A0%E8%B4%BA%E5%9B%BD%EF%BC%9A%E6%9C%80%E5%BC%BA%E5%AE%97%E6%95%99%E5%A4%A7%E5%90%8D%E8%AF%9E%E7%94%9F/</url>
    
    <content type="html"><![CDATA[<p>本愿寺是日本佛教净土真宗一派，由于日本佛教没有不准结婚生子的戒律，因此本愿寺这一派法主一直是以血缘关系传承的。莲如是第七代法主的儿子，但是他的母亲只是一个奴仆，因此他六岁的时候遭到本愿寺家驱逐，他从小得不到家族的重视。</p><p>但是也因此他能够修行除了佛法之外的其他的书籍。而后，他开始把本愿寺的教义编撰成方便传播的书信形式，就是”御文”，这种方式很受当时那些穷苦百姓的欢迎。因为百姓长期处于乱世，御文说到极乐世界给了他们很大的希望。</p><p>后来他日本佛教母山判定为异端，决定对其制裁。莲如只好逃出京都，最后到了北陆地方的吉崎，重建山门。并在这里建立了不小的势力，帮助了加贺这边富樫大名的家族内战，并取得了胜利。但是结果却是被其严格限制宗教势力，并被赶了出去，随后他并不甘心，并在其家主跟随幕府军征讨六角氏的时候，占领了加贺。自此，最强宗教大名诞生了。</p>]]></content>
    
    
    <categories>
      
      <category>阅读</category>
      
      <category>全历史</category>
      
      <category>历史</category>
      
      <category>日本史</category>
      
    </categories>
    
    
    <tags>
      
      <tag>article</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1493年 北条早云窃夺伊豆半岛</title>
    <link href="/2023/08/31/1493%E5%B9%B4%20%E5%8C%97%E6%9D%A1%E6%97%A9%E4%BA%91%E7%AA%83%E5%A4%BA%E4%BC%8A%E8%B1%86%E5%8D%8A%E5%B2%9B/"/>
    <url>/2023/08/31/1493%E5%B9%B4%20%E5%8C%97%E6%9D%A1%E6%97%A9%E4%BA%91%E7%AA%83%E5%A4%BA%E4%BC%8A%E8%B1%86%E5%8D%8A%E5%B2%9B/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>阅读</category>
      
      <category>全历史</category>
      
      <category>历史</category>
      
      <category>日本史</category>
      
    </categories>
    
    
    <tags>
      
      <tag>article</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1495年 奇袭小田原</title>
    <link href="/2023/08/31/1495%E5%B9%B4%20%E5%A5%87%E8%A2%AD%E5%B0%8F%E7%94%B0%E5%8E%9F/"/>
    <url>/2023/08/31/1495%E5%B9%B4%20%E5%A5%87%E8%A2%AD%E5%B0%8F%E7%94%B0%E5%8E%9F/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>阅读</category>
      
      <category>全历史</category>
      
      <category>历史</category>
      
      <category>日本史</category>
      
    </categories>
    
    
    <tags>
      
      <tag>article</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1493年 明应政变</title>
    <link href="/2023/08/31/1493%E5%B9%B4%20%E6%98%8E%E5%BA%94%E6%94%BF%E5%8F%98/"/>
    <url>/2023/08/31/1493%E5%B9%B4%20%E6%98%8E%E5%BA%94%E6%94%BF%E5%8F%98/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>阅读</category>
      
      <category>全历史</category>
      
      <category>历史</category>
      
      <category>日本史</category>
      
    </categories>
    
    
    <tags>
      
      <tag>article</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1507年 细川之变</title>
    <link href="/2023/08/31/1507%E5%B9%B4%20%E7%BB%86%E5%B7%9D%E4%B9%8B%E5%8F%98/"/>
    <url>/2023/08/31/1507%E5%B9%B4%20%E7%BB%86%E5%B7%9D%E4%B9%8B%E5%8F%98/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>阅读</category>
      
      <category>全历史</category>
      
      <category>历史</category>
      
      <category>日本史</category>
      
    </categories>
    
    
    <tags>
      
      <tag>article</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1508年 大内义行上洛</title>
    <link href="/2023/08/31/1508%E5%B9%B4%20%E5%A4%A7%E5%86%85%E4%B9%89%E8%A1%8C%E4%B8%8A%E6%B4%9B/"/>
    <url>/2023/08/31/1508%E5%B9%B4%20%E5%A4%A7%E5%86%85%E4%B9%89%E8%A1%8C%E4%B8%8A%E6%B4%9B/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>阅读</category>
      
      <category>全历史</category>
      
      <category>历史</category>
      
      <category>日本史</category>
      
    </categories>
    
    
    <tags>
      
      <tag>article</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1538年 国府台合战</title>
    <link href="/2023/08/31/1538%E5%B9%B4%20%E5%9B%BD%E5%BA%9C%E5%8F%B0%E5%90%88%E6%88%98/"/>
    <url>/2023/08/31/1538%E5%B9%B4%20%E5%9B%BD%E5%BA%9C%E5%8F%B0%E5%90%88%E6%88%98/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>阅读</category>
      
      <category>全历史</category>
      
      <category>历史</category>
      
      <category>日本史</category>
      
    </categories>
    
    
    <tags>
      
      <tag>article</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1546年 河越奇袭战</title>
    <link href="/2023/08/31/1546%E5%B9%B4%20%E6%B2%B3%E8%B6%8A%E5%A5%87%E8%A2%AD%E6%88%98/"/>
    <url>/2023/08/31/1546%E5%B9%B4%20%E6%B2%B3%E8%B6%8A%E5%A5%87%E8%A2%AD%E6%88%98/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>阅读</category>
      
      <category>全历史</category>
      
      <category>历史</category>
      
      <category>日本史</category>
      
    </categories>
    
    
    <tags>
      
      <tag>article</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1542年 天文之乱</title>
    <link href="/2023/08/31/1542%E5%B9%B4%20%E5%A4%A9%E6%96%87%E4%B9%8B%E4%B9%B1/"/>
    <url>/2023/08/31/1542%E5%B9%B4%20%E5%A4%A9%E6%96%87%E4%B9%8B%E4%B9%B1/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>阅读</category>
      
      <category>全历史</category>
      
      <category>历史</category>
      
      <category>日本史</category>
      
    </categories>
    
    
    <tags>
      
      <tag>article</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1554年 甲相骏三国同盟</title>
    <link href="/2023/08/31/1554%E5%B9%B4%20%E7%94%B2%E7%9B%B8%E9%AA%8F%E4%B8%89%E5%9B%BD%E5%90%8C%E7%9B%9F/"/>
    <url>/2023/08/31/1554%E5%B9%B4%20%E7%94%B2%E7%9B%B8%E9%AA%8F%E4%B8%89%E5%9B%BD%E5%90%8C%E7%9B%9F/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>阅读</category>
      
      <category>全历史</category>
      
      <category>历史</category>
      
      <category>日本史</category>
      
    </categories>
    
    
    <tags>
      
      <tag>article</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1542年 斋藤道三占据美浓</title>
    <link href="/2023/08/31/1542%E5%B9%B4%20%E6%96%8B%E8%97%A4%E9%81%93%E4%B8%89%E5%8D%A0%E6%8D%AE%E7%BE%8E%E6%B5%93/"/>
    <url>/2023/08/31/1542%E5%B9%B4%20%E6%96%8B%E8%97%A4%E9%81%93%E4%B8%89%E5%8D%A0%E6%8D%AE%E7%BE%8E%E6%B5%93/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>阅读</category>
      
      <category>全历史</category>
      
      <category>历史</category>
      
      <category>日本史</category>
      
    </categories>
    
    
    <tags>
      
      <tag>article</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1555年 长宗我部国亲统一土佐</title>
    <link href="/2023/08/31/1555%E5%B9%B4%20%E9%95%BF%E5%AE%97%E6%88%91%E9%83%A8%E5%9B%BD%E4%BA%B2%E7%BB%9F%E4%B8%80%E5%9C%9F%E4%BD%90/"/>
    <url>/2023/08/31/1555%E5%B9%B4%20%E9%95%BF%E5%AE%97%E6%88%91%E9%83%A8%E5%9B%BD%E4%BA%B2%E7%BB%9F%E4%B8%80%E5%9C%9F%E4%BD%90/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>阅读</category>
      
      <category>全历史</category>
      
      <category>历史</category>
      
      <category>日本史</category>
      
    </categories>
    
    
    <tags>
      
      <tag>article</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1551年 越后统一</title>
    <link href="/2023/08/31/1551%E5%B9%B4%20%E8%B6%8A%E5%90%8E%E7%BB%9F%E4%B8%80/"/>
    <url>/2023/08/31/1551%E5%B9%B4%20%E8%B6%8A%E5%90%8E%E7%BB%9F%E4%B8%80/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>阅读</category>
      
      <category>全历史</category>
      
      <category>历史</category>
      
      <category>日本史</category>
      
    </categories>
    
    
    <tags>
      
      <tag>article</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1555年 严岛之战</title>
    <link href="/2023/08/31/1555%E5%B9%B4%20%E4%B8%A5%E5%B2%9B%E4%B9%8B%E6%88%98/"/>
    <url>/2023/08/31/1555%E5%B9%B4%20%E4%B8%A5%E5%B2%9B%E4%B9%8B%E6%88%98/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>阅读</category>
      
      <category>全历史</category>
      
      <category>历史</category>
      
      <category>日本史</category>
      
    </categories>
    
    
    <tags>
      
      <tag>article</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1556年 长良川之战</title>
    <link href="/2023/08/31/1556%E5%B9%B4%20%E9%95%BF%E8%89%AF%E5%B7%9D%E4%B9%8B%E6%88%98/"/>
    <url>/2023/08/31/1556%E5%B9%B4%20%E9%95%BF%E8%89%AF%E5%B7%9D%E4%B9%8B%E6%88%98/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>阅读</category>
      
      <category>全历史</category>
      
      <category>历史</category>
      
      <category>日本史</category>
      
    </categories>
    
    
    <tags>
      
      <tag>article</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1559年 尾张统一</title>
    <link href="/2023/08/31/1559%E5%B9%B4%20%E5%B0%BE%E5%BC%A0%E7%BB%9F%E4%B8%80/"/>
    <url>/2023/08/31/1559%E5%B9%B4%20%E5%B0%BE%E5%BC%A0%E7%BB%9F%E4%B8%80/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>阅读</category>
      
      <category>全历史</category>
      
      <category>历史</category>
      
      <category>日本史</category>
      
    </categories>
    
    
    <tags>
      
      <tag>article</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1561年 川中岛之战</title>
    <link href="/2023/08/31/1561%E5%B9%B4%20%E5%B7%9D%E4%B8%AD%E5%B2%9B%E4%B9%8B%E6%88%98/"/>
    <url>/2023/08/31/1561%E5%B9%B4%20%E5%B7%9D%E4%B8%AD%E5%B2%9B%E4%B9%8B%E6%88%98/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>阅读</category>
      
      <category>全历史</category>
      
      <category>历史</category>
      
      <category>日本史</category>
      
    </categories>
    
    
    <tags>
      
      <tag>article</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1560年 桶狭间之战</title>
    <link href="/2023/08/31/1560%E5%B9%B4%20%E6%A1%B6%E7%8B%AD%E9%97%B4%E4%B9%8B%E6%88%98/"/>
    <url>/2023/08/31/1560%E5%B9%B4%20%E6%A1%B6%E7%8B%AD%E9%97%B4%E4%B9%8B%E6%88%98/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>阅读</category>
      
      <category>全历史</category>
      
      <category>历史</category>
      
      <category>日本史</category>
      
    </categories>
    
    
    <tags>
      
      <tag>article</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1563年 青州同盟</title>
    <link href="/2023/08/31/1563%E5%B9%B4%20%E9%9D%92%E5%B7%9E%E5%90%8C%E7%9B%9F/"/>
    <url>/2023/08/31/1563%E5%B9%B4%20%E9%9D%92%E5%B7%9E%E5%90%8C%E7%9B%9F/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>阅读</category>
      
      <category>全历史</category>
      
      <category>历史</category>
      
      <category>日本史</category>
      
    </categories>
    
    
    <tags>
      
      <tag>article</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1564年 第二次国府台战争</title>
    <link href="/2023/08/31/1564%E5%B9%B4%20%E7%AC%AC%E4%BA%8C%E6%AC%A1%E5%9B%BD%E5%BA%9C%E5%8F%B0%E6%88%98%E4%BA%89/"/>
    <url>/2023/08/31/1564%E5%B9%B4%20%E7%AC%AC%E4%BA%8C%E6%AC%A1%E5%9B%BD%E5%BA%9C%E5%8F%B0%E6%88%98%E4%BA%89/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>阅读</category>
      
      <category>全历史</category>
      
      <category>历史</category>
      
      <category>日本史</category>
      
    </categories>
    
    
    <tags>
      
      <tag>article</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1565年 拥护足利义昭上洛</title>
    <link href="/2023/08/31/1565%E5%B9%B4%20%E6%8B%A5%E6%8A%A4%E8%B6%B3%E5%88%A9%E4%B9%89%E6%98%AD%E4%B8%8A%E6%B4%9B/"/>
    <url>/2023/08/31/1565%E5%B9%B4%20%E6%8B%A5%E6%8A%A4%E8%B6%B3%E5%88%A9%E4%B9%89%E6%98%AD%E4%B8%8A%E6%B4%9B/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>阅读</category>
      
      <category>全历史</category>
      
      <category>历史</category>
      
      <category>日本史</category>
      
    </categories>
    
    
    <tags>
      
      <tag>article</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1565年 永禄之变</title>
    <link href="/2023/08/31/1565%E5%B9%B4%20%E6%B0%B8%E7%A6%84%E4%B9%8B%E5%8F%98/"/>
    <url>/2023/08/31/1565%E5%B9%B4%20%E6%B0%B8%E7%A6%84%E4%B9%8B%E5%8F%98/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>阅读</category>
      
      <category>全历史</category>
      
      <category>历史</category>
      
      <category>日本史</category>
      
    </categories>
    
    
    <tags>
      
      <tag>article</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1566年 第二次月山富田城之战</title>
    <link href="/2023/08/31/1566%E5%B9%B4%20%E7%AC%AC%E4%BA%8C%E6%AC%A1%E6%9C%88%E5%B1%B1%E5%AF%8C%E7%94%B0%E5%9F%8E%E4%B9%8B%E6%88%98/"/>
    <url>/2023/08/31/1566%E5%B9%B4%20%E7%AC%AC%E4%BA%8C%E6%AC%A1%E6%9C%88%E5%B1%B1%E5%AF%8C%E7%94%B0%E5%9F%8E%E4%B9%8B%E6%88%98/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>阅读</category>
      
      <category>全历史</category>
      
      <category>历史</category>
      
      <category>日本史</category>
      
    </categories>
    
    
    <tags>
      
      <tag>article</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1568年 骏河侵攻</title>
    <link href="/2023/08/31/1568%E5%B9%B4%20%E9%AA%8F%E6%B2%B3%E4%BE%B5%E6%94%BB/"/>
    <url>/2023/08/31/1568%E5%B9%B4%20%E9%AA%8F%E6%B2%B3%E4%BE%B5%E6%94%BB/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>阅读</category>
      
      <category>全历史</category>
      
      <category>历史</category>
      
      <category>日本史</category>
      
    </categories>
    
    
    <tags>
      
      <tag>article</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1567年 稻叶山城之战</title>
    <link href="/2023/08/31/1567%E5%B9%B4%20%E7%A8%BB%E5%8F%B6%E5%B1%B1%E5%9F%8E%E4%B9%8B%E6%88%98/"/>
    <url>/2023/08/31/1567%E5%B9%B4%20%E7%A8%BB%E5%8F%B6%E5%B1%B1%E5%9F%8E%E4%B9%8B%E6%88%98/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>阅读</category>
      
      <category>全历史</category>
      
      <category>历史</category>
      
      <category>日本史</category>
      
    </categories>
    
    
    <tags>
      
      <tag>article</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1569年 三增岭之战</title>
    <link href="/2023/08/31/1569%E5%B9%B4%20%E4%B8%89%E5%A2%9E%E5%B2%AD%E4%B9%8B%E6%88%98/"/>
    <url>/2023/08/31/1569%E5%B9%B4%20%E4%B8%89%E5%A2%9E%E5%B2%AD%E4%B9%8B%E6%88%98/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>阅读</category>
      
      <category>全历史</category>
      
      <category>历史</category>
      
      <category>日本史</category>
      
    </categories>
    
    
    <tags>
      
      <tag>article</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1570年 姉川合战</title>
    <link href="/2023/08/31/1570%E5%B9%B4%20%E5%A7%89%E5%B7%9D%E5%90%88%E6%88%98/"/>
    <url>/2023/08/31/1570%E5%B9%B4%20%E5%A7%89%E5%B7%9D%E5%90%88%E6%88%98/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>阅读</category>
      
      <category>全历史</category>
      
      <category>历史</category>
      
      <category>日本史</category>
      
    </categories>
    
    
    <tags>
      
      <tag>article</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1570年 金崎之战</title>
    <link href="/2023/08/31/1570%E5%B9%B4%20%E9%87%91%E5%B4%8E%E4%B9%8B%E6%88%98/"/>
    <url>/2023/08/31/1570%E5%B9%B4%20%E9%87%91%E5%B4%8E%E4%B9%8B%E6%88%98/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>阅读</category>
      
      <category>全历史</category>
      
      <category>历史</category>
      
      <category>日本史</category>
      
    </categories>
    
    
    <tags>
      
      <tag>article</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1571年 火烧比睿山</title>
    <link href="/2023/08/31/1571%E5%B9%B4%20%E7%81%AB%E7%83%A7%E6%AF%94%E7%9D%BF%E5%B1%B1/"/>
    <url>/2023/08/31/1571%E5%B9%B4%20%E7%81%AB%E7%83%A7%E6%AF%94%E7%9D%BF%E5%B1%B1/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>阅读</category>
      
      <category>全历史</category>
      
      <category>历史</category>
      
      <category>日本史</category>
      
    </categories>
    
    
    <tags>
      
      <tag>article</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1573年 信长驱逐义昭</title>
    <link href="/2023/08/31/1573%E5%B9%B4%20%E4%BF%A1%E9%95%BF%E9%A9%B1%E9%80%90%E4%B9%89%E6%98%AD/"/>
    <url>/2023/08/31/1573%E5%B9%B4%20%E4%BF%A1%E9%95%BF%E9%A9%B1%E9%80%90%E4%B9%89%E6%98%AD/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>阅读</category>
      
      <category>全历史</category>
      
      <category>历史</category>
      
      <category>日本史</category>
      
    </categories>
    
    
    <tags>
      
      <tag>article</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1572年 三方原合战</title>
    <link href="/2023/08/31/1572%E5%B9%B4%20%E4%B8%89%E6%96%B9%E5%8E%9F%E5%90%88%E6%88%98/"/>
    <url>/2023/08/31/1572%E5%B9%B4%20%E4%B8%89%E6%96%B9%E5%8E%9F%E5%90%88%E6%88%98/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>阅读</category>
      
      <category>全历史</category>
      
      <category>历史</category>
      
      <category>日本史</category>
      
    </categories>
    
    
    <tags>
      
      <tag>article</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1575年 长筱(xiao)之战</title>
    <link href="/2023/08/31/1575%E5%B9%B4%20%E9%95%BF%E7%AD%B1(xiao)%E4%B9%8B%E6%88%98/"/>
    <url>/2023/08/31/1575%E5%B9%B4%20%E9%95%BF%E7%AD%B1(xiao)%E4%B9%8B%E6%88%98/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>阅读</category>
      
      <category>全历史</category>
      
      <category>历史</category>
      
      <category>日本史</category>
      
    </categories>
    
    
    <tags>
      
      <tag>article</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1577年 上杉谦信占领能登国</title>
    <link href="/2023/08/31/1577%E5%B9%B4%20%E4%B8%8A%E6%9D%89%E8%B0%A6%E4%BF%A1%E5%8D%A0%E9%A2%86%E8%83%BD%E7%99%BB%E5%9B%BD/"/>
    <url>/2023/08/31/1577%E5%B9%B4%20%E4%B8%8A%E6%9D%89%E8%B0%A6%E4%BF%A1%E5%8D%A0%E9%A2%86%E8%83%BD%E7%99%BB%E5%9B%BD/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>阅读</category>
      
      <category>全历史</category>
      
      <category>历史</category>
      
      <category>日本史</category>
      
    </categories>
    
    
    <tags>
      
      <tag>article</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1577年 松永久秀自杀</title>
    <link href="/2023/08/31/1577%E5%B9%B4%20%E6%9D%BE%E6%B0%B8%E4%B9%85%E7%A7%80%E8%87%AA%E6%9D%80/"/>
    <url>/2023/08/31/1577%E5%B9%B4%20%E6%9D%BE%E6%B0%B8%E4%B9%85%E7%A7%80%E8%87%AA%E6%9D%80/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>阅读</category>
      
      <category>全历史</category>
      
      <category>历史</category>
      
      <category>日本史</category>
      
    </categories>
    
    
    <tags>
      
      <tag>article</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1578年 御馆之乱</title>
    <link href="/2023/08/31/1578%E5%B9%B4%20%E5%BE%A1%E9%A6%86%E4%B9%8B%E4%B9%B1/"/>
    <url>/2023/08/31/1578%E5%B9%B4%20%E5%BE%A1%E9%A6%86%E4%B9%8B%E4%B9%B1/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>阅读</category>
      
      <category>全历史</category>
      
      <category>历史</category>
      
      <category>日本史</category>
      
    </categories>
    
    
    <tags>
      
      <tag>article</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1580年 石山本愿寺之战</title>
    <link href="/2023/08/31/1580%E5%B9%B4%20%E7%9F%B3%E5%B1%B1%E6%9C%AC%E6%84%BF%E5%AF%BA%E4%B9%8B%E6%88%98/"/>
    <url>/2023/08/31/1580%E5%B9%B4%20%E7%9F%B3%E5%B1%B1%E6%9C%AC%E6%84%BF%E5%AF%BA%E4%B9%8B%E6%88%98/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>阅读</category>
      
      <category>全历史</category>
      
      <category>历史</category>
      
      <category>日本史</category>
      
    </categories>
    
    
    <tags>
      
      <tag>article</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1582年 本能寺之变</title>
    <link href="/2023/08/31/1582%E5%B9%B4%20%E6%9C%AC%E8%83%BD%E5%AF%BA%E4%B9%8B%E5%8F%98/"/>
    <url>/2023/08/31/1582%E5%B9%B4%20%E6%9C%AC%E8%83%BD%E5%AF%BA%E4%B9%8B%E5%8F%98/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>阅读</category>
      
      <category>全历史</category>
      
      <category>历史</category>
      
      <category>日本史</category>
      
    </categories>
    
    
    <tags>
      
      <tag>article</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1582年 中国大返还</title>
    <link href="/2023/08/31/1582%E5%B9%B4%20%E4%B8%AD%E5%9B%BD%E5%A4%A7%E8%BF%94%E8%BF%98/"/>
    <url>/2023/08/31/1582%E5%B9%B4%20%E4%B8%AD%E5%9B%BD%E5%A4%A7%E8%BF%94%E8%BF%98/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>阅读</category>
      
      <category>全历史</category>
      
      <category>历史</category>
      
      <category>日本史</category>
      
    </categories>
    
    
    <tags>
      
      <tag>article</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1582年 甲州征伐</title>
    <link href="/2023/08/31/1582%E5%B9%B4%20%E7%94%B2%E5%B7%9E%E5%BE%81%E4%BC%90/"/>
    <url>/2023/08/31/1582%E5%B9%B4%20%E7%94%B2%E5%B7%9E%E5%BE%81%E4%BC%90/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>阅读</category>
      
      <category>全历史</category>
      
      <category>历史</category>
      
      <category>日本史</category>
      
    </categories>
    
    
    <tags>
      
      <tag>article</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1582年 贱岳合战</title>
    <link href="/2023/08/31/1582%E5%B9%B4%20%E8%B4%B1%E5%B2%B3%E5%90%88%E6%88%98/"/>
    <url>/2023/08/31/1582%E5%B9%B4%20%E8%B4%B1%E5%B2%B3%E5%90%88%E6%88%98/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>阅读</category>
      
      <category>全历史</category>
      
      <category>历史</category>
      
      <category>日本史</category>
      
    </categories>
    
    
    <tags>
      
      <tag>article</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1585年 丰城秀吉就任关白</title>
    <link href="/2023/08/31/1585%E5%B9%B4%20%E4%B8%B0%E5%9F%8E%E7%A7%80%E5%90%89%E5%B0%B1%E4%BB%BB%E5%85%B3%E7%99%BD/"/>
    <url>/2023/08/31/1585%E5%B9%B4%20%E4%B8%B0%E5%9F%8E%E7%A7%80%E5%90%89%E5%B0%B1%E4%BB%BB%E5%85%B3%E7%99%BD/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>阅读</category>
      
      <category>全历史</category>
      
      <category>历史</category>
      
      <category>日本史</category>
      
    </categories>
    
    
    <tags>
      
      <tag>article</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1583年 柴田胜家自杀身亡</title>
    <link href="/2023/08/31/1583%E5%B9%B4%20%E6%9F%B4%E7%94%B0%E8%83%9C%E5%AE%B6%E8%87%AA%E6%9D%80%E8%BA%AB%E4%BA%A1/"/>
    <url>/2023/08/31/1583%E5%B9%B4%20%E6%9F%B4%E7%94%B0%E8%83%9C%E5%AE%B6%E8%87%AA%E6%9D%80%E8%BA%AB%E4%BA%A1/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>阅读</category>
      
      <category>全历史</category>
      
      <category>历史</category>
      
      <category>日本史</category>
      
    </categories>
    
    
    <tags>
      
      <tag>article</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1585年 粟之巢之变</title>
    <link href="/2023/08/31/1585%E5%B9%B4%20%E7%B2%9F%E4%B9%8B%E5%B7%A2%E4%B9%8B%E5%8F%98/"/>
    <url>/2023/08/31/1585%E5%B9%B4%20%E7%B2%9F%E4%B9%8B%E5%B7%A2%E4%B9%8B%E5%8F%98/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>阅读</category>
      
      <category>全历史</category>
      
      <category>历史</category>
      
      <category>日本史</category>
      
    </categories>
    
    
    <tags>
      
      <tag>article</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1586年 岛津氏统一九州岛</title>
    <link href="/2023/08/31/1586%E5%B9%B4%20%E5%B2%9B%E6%B4%A5%E6%B0%8F%E7%BB%9F%E4%B8%80%E4%B9%9D%E5%B7%9E%E5%B2%9B/"/>
    <url>/2023/08/31/1586%E5%B9%B4%20%E5%B2%9B%E6%B4%A5%E6%B0%8F%E7%BB%9F%E4%B8%80%E4%B9%9D%E5%B7%9E%E5%B2%9B/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>阅读</category>
      
      <category>全历史</category>
      
      <category>历史</category>
      
      <category>日本史</category>
      
    </categories>
    
    
    <tags>
      
      <tag>article</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1585年 长宗我部统一四国</title>
    <link href="/2023/08/31/1585%E5%B9%B4%20%E9%95%BF%E5%AE%97%E6%88%91%E9%83%A8%E7%BB%9F%E4%B8%80%E5%9B%9B%E5%9B%BD/"/>
    <url>/2023/08/31/1585%E5%B9%B4%20%E9%95%BF%E5%AE%97%E6%88%91%E9%83%A8%E7%BB%9F%E4%B8%80%E5%9B%9B%E5%9B%BD/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>阅读</category>
      
      <category>全历史</category>
      
      <category>历史</category>
      
      <category>日本史</category>
      
    </categories>
    
    
    <tags>
      
      <tag>article</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1596年 庆长之役</title>
    <link href="/2023/08/31/1596%E5%B9%B4%20%E5%BA%86%E9%95%BF%E4%B9%8B%E5%BD%B9/"/>
    <url>/2023/08/31/1596%E5%B9%B4%20%E5%BA%86%E9%95%BF%E4%B9%8B%E5%BD%B9/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>阅读</category>
      
      <category>全历史</category>
      
      <category>历史</category>
      
      <category>日本史</category>
      
    </categories>
    
    
    <tags>
      
      <tag>article</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1592年 文禄之役</title>
    <link href="/2023/08/31/1592%E5%B9%B4%20%E6%96%87%E7%A6%84%E4%B9%8B%E5%BD%B9/"/>
    <url>/2023/08/31/1592%E5%B9%B4%20%E6%96%87%E7%A6%84%E4%B9%8B%E5%BD%B9/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>阅读</category>
      
      <category>全历史</category>
      
      <category>历史</category>
      
      <category>日本史</category>
      
    </categories>
    
    
    <tags>
      
      <tag>article</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1603年 德川家康任征夷大将军</title>
    <link href="/2023/08/31/1603%E5%B9%B4%20%E5%BE%B7%E5%B7%9D%E5%AE%B6%E5%BA%B7%E4%BB%BB%E5%BE%81%E5%A4%B7%E5%A4%A7%E5%B0%86%E5%86%9B/"/>
    <url>/2023/08/31/1603%E5%B9%B4%20%E5%BE%B7%E5%B7%9D%E5%AE%B6%E5%BA%B7%E4%BB%BB%E5%BE%81%E5%A4%B7%E5%A4%A7%E5%B0%86%E5%86%9B/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>阅读</category>
      
      <category>全历史</category>
      
      <category>历史</category>
      
      <category>日本史</category>
      
    </categories>
    
    
    <tags>
      
      <tag>article</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1600年 关原合战</title>
    <link href="/2023/08/31/1600%E5%B9%B4%20%E5%85%B3%E5%8E%9F%E5%90%88%E6%88%98/"/>
    <url>/2023/08/31/1600%E5%B9%B4%20%E5%85%B3%E5%8E%9F%E5%90%88%E6%88%98/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>阅读</category>
      
      <category>全历史</category>
      
      <category>历史</category>
      
      <category>日本史</category>
      
    </categories>
    
    
    <tags>
      
      <tag>article</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1637年 岛原之乱</title>
    <link href="/2023/08/31/1637%E5%B9%B4%20%E5%B2%9B%E5%8E%9F%E4%B9%8B%E4%B9%B1/"/>
    <url>/2023/08/31/1637%E5%B9%B4%20%E5%B2%9B%E5%8E%9F%E4%B9%8B%E4%B9%B1/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>阅读</category>
      
      <category>全历史</category>
      
      <category>历史</category>
      
      <category>日本史</category>
      
    </categories>
    
    
    <tags>
      
      <tag>article</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1615年 大阪夏之战</title>
    <link href="/2023/08/31/1615%E5%B9%B4%20%E5%A4%A7%E9%98%AA%E5%A4%8F%E4%B9%8B%E6%88%98/"/>
    <url>/2023/08/31/1615%E5%B9%B4%20%E5%A4%A7%E9%98%AA%E5%A4%8F%E4%B9%8B%E6%88%98/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>阅读</category>
      
      <category>全历史</category>
      
      <category>历史</category>
      
      <category>日本史</category>
      
    </categories>
    
    
    <tags>
      
      <tag>article</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1702年 赤穗事件</title>
    <link href="/2023/08/31/1702%E5%B9%B4%20%E8%B5%A4%E7%A9%97%E4%BA%8B%E4%BB%B6/"/>
    <url>/2023/08/31/1702%E5%B9%B4%20%E8%B5%A4%E7%A9%97%E4%BA%8B%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>阅读</category>
      
      <category>全历史</category>
      
      <category>历史</category>
      
      <category>日本史</category>
      
    </categories>
    
    
    <tags>
      
      <tag>article</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1815年 兰学的兴起</title>
    <link href="/2023/08/31/1815%E5%B9%B4%20%E5%85%B0%E5%AD%A6%E7%9A%84%E5%85%B4%E8%B5%B7/"/>
    <url>/2023/08/31/1815%E5%B9%B4%20%E5%85%B0%E5%AD%A6%E7%9A%84%E5%85%B4%E8%B5%B7/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>阅读</category>
      
      <category>全历史</category>
      
      <category>历史</category>
      
      <category>日本史</category>
      
    </categories>
    
    
    <tags>
      
      <tag>article</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1841年 天保改革</title>
    <link href="/2023/08/31/1841%E5%B9%B4%20%E5%A4%A9%E4%BF%9D%E6%94%B9%E9%9D%A9/"/>
    <url>/2023/08/31/1841%E5%B9%B4%20%E5%A4%A9%E4%BF%9D%E6%94%B9%E9%9D%A9/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>阅读</category>
      
      <category>全历史</category>
      
      <category>历史</category>
      
      <category>日本史</category>
      
    </categories>
    
    
    <tags>
      
      <tag>article</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1853年 黑船事件</title>
    <link href="/2023/08/31/1853%E5%B9%B4%20%E9%BB%91%E8%88%B9%E4%BA%8B%E4%BB%B6/"/>
    <url>/2023/08/31/1853%E5%B9%B4%20%E9%BB%91%E8%88%B9%E4%BA%8B%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>阅读</category>
      
      <category>全历史</category>
      
      <category>历史</category>
      
      <category>日本史</category>
      
    </categories>
    
    
    <tags>
      
      <tag>article</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1858年 安政大狱</title>
    <link href="/2023/08/31/1858%E5%B9%B4%20%E5%AE%89%E6%94%BF%E5%A4%A7%E7%8B%B1/"/>
    <url>/2023/08/31/1858%E5%B9%B4%20%E5%AE%89%E6%94%BF%E5%A4%A7%E7%8B%B1/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>阅读</category>
      
      <category>全历史</category>
      
      <category>历史</category>
      
      <category>日本史</category>
      
    </categories>
    
    
    <tags>
      
      <tag>article</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1866年 萨长同盟</title>
    <link href="/2023/08/31/1866%E5%B9%B4%20%E8%90%A8%E9%95%BF%E5%90%8C%E7%9B%9F/"/>
    <url>/2023/08/31/1866%E5%B9%B4%20%E8%90%A8%E9%95%BF%E5%90%8C%E7%9B%9F/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>阅读</category>
      
      <category>全历史</category>
      
      <category>历史</category>
      
      <category>日本史</category>
      
    </categories>
    
    
    <tags>
      
      <tag>article</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1867年 大政奉还</title>
    <link href="/2023/08/31/1867%E5%B9%B4%20%E5%A4%A7%E6%94%BF%E5%A5%89%E8%BF%98/"/>
    <url>/2023/08/31/1867%E5%B9%B4%20%E5%A4%A7%E6%94%BF%E5%A5%89%E8%BF%98/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>阅读</category>
      
      <category>全历史</category>
      
      <category>历史</category>
      
      <category>日本史</category>
      
    </categories>
    
    
    <tags>
      
      <tag>article</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1868年 戊辰战争</title>
    <link href="/2023/08/31/1868%E5%B9%B4%20%E6%88%8A%E8%BE%B0%E6%88%98%E4%BA%89/"/>
    <url>/2023/08/31/1868%E5%B9%B4%20%E6%88%8A%E8%BE%B0%E6%88%98%E4%BA%89/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>阅读</category>
      
      <category>全历史</category>
      
      <category>历史</category>
      
      <category>日本史</category>
      
    </categories>
    
    
    <tags>
      
      <tag>article</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1864年 池田屋事件</title>
    <link href="/2023/08/31/1864%E5%B9%B4%20%E6%B1%A0%E7%94%B0%E5%B1%8B%E4%BA%8B%E4%BB%B6/"/>
    <url>/2023/08/31/1864%E5%B9%B4%20%E6%B1%A0%E7%94%B0%E5%B1%8B%E4%BA%8B%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>阅读</category>
      
      <category>全历史</category>
      
      <category>历史</category>
      
      <category>日本史</category>
      
    </categories>
    
    
    <tags>
      
      <tag>article</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1871年 废藩置县</title>
    <link href="/2023/08/31/1871%E5%B9%B4%20%E5%BA%9F%E8%97%A9%E7%BD%AE%E5%8E%BF/"/>
    <url>/2023/08/31/1871%E5%B9%B4%20%E5%BA%9F%E8%97%A9%E7%BD%AE%E5%8E%BF/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>阅读</category>
      
      <category>全历史</category>
      
      <category>历史</category>
      
      <category>日本史</category>
      
    </categories>
    
    
    <tags>
      
      <tag>article</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1877年 西南战争</title>
    <link href="/2023/08/31/1877%E5%B9%B4%20%E8%A5%BF%E5%8D%97%E6%88%98%E4%BA%89/"/>
    <url>/2023/08/31/1877%E5%B9%B4%20%E8%A5%BF%E5%8D%97%E6%88%98%E4%BA%89/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>阅读</category>
      
      <category>全历史</category>
      
      <category>历史</category>
      
      <category>日本史</category>
      
    </categories>
    
    
    <tags>
      
      <tag>article</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1878年 纪尾井坂之变</title>
    <link href="/2023/08/31/1878%E5%B9%B4%20%E7%BA%AA%E5%B0%BE%E4%BA%95%E5%9D%82%E4%B9%8B%E5%8F%98/"/>
    <url>/2023/08/31/1878%E5%B9%B4%20%E7%BA%AA%E5%B0%BE%E4%BA%95%E5%9D%82%E4%B9%8B%E5%8F%98/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>阅读</category>
      
      <category>全历史</category>
      
      <category>历史</category>
      
      <category>日本史</category>
      
    </categories>
    
    
    <tags>
      
      <tag>article</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1885年 福泽谕吉发表《脱亚入欧论》</title>
    <link href="/2023/08/31/1885%E5%B9%B4%20%E7%A6%8F%E6%B3%BD%E8%B0%95%E5%90%89%E5%8F%91%E8%A1%A8%E3%80%8A%E8%84%B1%E4%BA%9A%E5%85%A5%E6%AC%A7%E8%AE%BA%E3%80%8B/"/>
    <url>/2023/08/31/1885%E5%B9%B4%20%E7%A6%8F%E6%B3%BD%E8%B0%95%E5%90%89%E5%8F%91%E8%A1%A8%E3%80%8A%E8%84%B1%E4%BA%9A%E5%85%A5%E6%AC%A7%E8%AE%BA%E3%80%8B/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>阅读</category>
      
      <category>全历史</category>
      
      <category>历史</category>
      
      <category>日本史</category>
      
    </categories>
    
    
    <tags>
      
      <tag>article</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1883年 鹿鸣馆外交</title>
    <link href="/2023/08/31/1883%E5%B9%B4%20%E9%B9%BF%E9%B8%A3%E9%A6%86%E5%A4%96%E4%BA%A4/"/>
    <url>/2023/08/31/1883%E5%B9%B4%20%E9%B9%BF%E9%B8%A3%E9%A6%86%E5%A4%96%E4%BA%A4/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>阅读</category>
      
      <category>全历史</category>
      
      <category>历史</category>
      
      <category>日本史</category>
      
    </categories>
    
    
    <tags>
      
      <tag>article</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1889年 《大日本帝国宪法》颁布</title>
    <link href="/2023/08/31/1889%E5%B9%B4%20%E3%80%8A%E5%A4%A7%E6%97%A5%E6%9C%AC%E5%B8%9D%E5%9B%BD%E5%AE%AA%E6%B3%95%E3%80%8B%E9%A2%81%E5%B8%83/"/>
    <url>/2023/08/31/1889%E5%B9%B4%20%E3%80%8A%E5%A4%A7%E6%97%A5%E6%9C%AC%E5%B8%9D%E5%9B%BD%E5%AE%AA%E6%B3%95%E3%80%8B%E9%A2%81%E5%B8%83/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>阅读</category>
      
      <category>全历史</category>
      
      <category>历史</category>
      
      <category>日本史</category>
      
    </categories>
    
    
    <tags>
      
      <tag>article</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1904年 日俄战争</title>
    <link href="/2023/08/31/1904%E5%B9%B4%20%E6%97%A5%E4%BF%84%E6%88%98%E4%BA%89/"/>
    <url>/2023/08/31/1904%E5%B9%B4%20%E6%97%A5%E4%BF%84%E6%88%98%E4%BA%89/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>阅读</category>
      
      <category>全历史</category>
      
      <category>历史</category>
      
      <category>日本史</category>
      
    </categories>
    
    
    <tags>
      
      <tag>article</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1905年 《朴茨茅斯和约》签订</title>
    <link href="/2023/08/31/1905%E5%B9%B4%20%E3%80%8A%E6%9C%B4%E8%8C%A8%E8%8C%85%E6%96%AF%E5%92%8C%E7%BA%A6%E3%80%8B%E7%AD%BE%E8%AE%A2/"/>
    <url>/2023/08/31/1905%E5%B9%B4%20%E3%80%8A%E6%9C%B4%E8%8C%A8%E8%8C%85%E6%96%AF%E5%92%8C%E7%BA%A6%E3%80%8B%E7%AD%BE%E8%AE%A2/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>阅读</category>
      
      <category>全历史</category>
      
      <category>历史</category>
      
      <category>日本史</category>
      
    </categories>
    
    
    <tags>
      
      <tag>article</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1909年 安重根刺杀伊藤博文</title>
    <link href="/2023/08/31/1909%E5%B9%B4%20%E5%AE%89%E9%87%8D%E6%A0%B9%E5%88%BA%E6%9D%80%E4%BC%8A%E8%97%A4%E5%8D%9A%E6%96%87/"/>
    <url>/2023/08/31/1909%E5%B9%B4%20%E5%AE%89%E9%87%8D%E6%A0%B9%E5%88%BA%E6%9D%80%E4%BC%8A%E8%97%A4%E5%8D%9A%E6%96%87/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>阅读</category>
      
      <category>全历史</category>
      
      <category>历史</category>
      
      <category>日本史</category>
      
    </categories>
    
    
    <tags>
      
      <tag>article</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1910年 日韩合并</title>
    <link href="/2023/08/31/1910%E5%B9%B4%20%E6%97%A5%E9%9F%A9%E5%90%88%E5%B9%B6/"/>
    <url>/2023/08/31/1910%E5%B9%B4%20%E6%97%A5%E9%9F%A9%E5%90%88%E5%B9%B6/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>阅读</category>
      
      <category>全历史</category>
      
      <category>历史</category>
      
      <category>日本史</category>
      
    </categories>
    
    
    <tags>
      
      <tag>article</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1910年 幸德事件</title>
    <link href="/2023/08/31/1910%E5%B9%B4%20%E5%B9%B8%E5%BE%B7%E4%BA%8B%E4%BB%B6/"/>
    <url>/2023/08/31/1910%E5%B9%B4%20%E5%B9%B8%E5%BE%B7%E4%BA%8B%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>阅读</category>
      
      <category>全历史</category>
      
      <category>历史</category>
      
      <category>日本史</category>
      
    </categories>
    
    
    <tags>
      
      <tag>article</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1912年 第一次宪政拥护运动</title>
    <link href="/2023/08/31/1912%E5%B9%B4%20%E7%AC%AC%E4%B8%80%E6%AC%A1%E5%AE%AA%E6%94%BF%E6%8B%A5%E6%8A%A4%E8%BF%90%E5%8A%A8/"/>
    <url>/2023/08/31/1912%E5%B9%B4%20%E7%AC%AC%E4%B8%80%E6%AC%A1%E5%AE%AA%E6%94%BF%E6%8B%A5%E6%8A%A4%E8%BF%90%E5%8A%A8/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>阅读</category>
      
      <category>全历史</category>
      
      <category>历史</category>
      
      <category>日本史</category>
      
    </categories>
    
    
    <tags>
      
      <tag>article</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1914年 日本对德宣战</title>
    <link href="/2023/08/31/1914%E5%B9%B4%20%E6%97%A5%E6%9C%AC%E5%AF%B9%E5%BE%B7%E5%AE%A3%E6%88%98/"/>
    <url>/2023/08/31/1914%E5%B9%B4%20%E6%97%A5%E6%9C%AC%E5%AF%B9%E5%BE%B7%E5%AE%A3%E6%88%98/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>阅读</category>
      
      <category>全历史</category>
      
      <category>历史</category>
      
      <category>日本史</category>
      
    </categories>
    
    
    <tags>
      
      <tag>article</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1915年 日本提出“二十一条”抢占中国青岛</title>
    <link href="/2023/08/31/1915%E5%B9%B4%20%E6%97%A5%E6%9C%AC%E6%8F%90%E5%87%BA%E2%80%9C%E4%BA%8C%E5%8D%81%E4%B8%80%E6%9D%A1%E2%80%9D%E6%8A%A2%E5%8D%A0%E4%B8%AD%E5%9B%BD%E9%9D%92%E5%B2%9B/"/>
    <url>/2023/08/31/1915%E5%B9%B4%20%E6%97%A5%E6%9C%AC%E6%8F%90%E5%87%BA%E2%80%9C%E4%BA%8C%E5%8D%81%E4%B8%80%E6%9D%A1%E2%80%9D%E6%8A%A2%E5%8D%A0%E4%B8%AD%E5%9B%BD%E9%9D%92%E5%B2%9B/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>阅读</category>
      
      <category>全历史</category>
      
      <category>历史</category>
      
      <category>日本史</category>
      
    </categories>
    
    
    <tags>
      
      <tag>article</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1918年 日本干涉西伯利亚</title>
    <link href="/2023/08/31/1918%E5%B9%B4%20%E6%97%A5%E6%9C%AC%E5%B9%B2%E6%B6%89%E8%A5%BF%E4%BC%AF%E5%88%A9%E4%BA%9A/"/>
    <url>/2023/08/31/1918%E5%B9%B4%20%E6%97%A5%E6%9C%AC%E5%B9%B2%E6%B6%89%E8%A5%BF%E4%BC%AF%E5%88%A9%E4%BA%9A/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>阅读</category>
      
      <category>全历史</category>
      
      <category>历史</category>
      
      <category>日本史</category>
      
    </categories>
    
    
    <tags>
      
      <tag>article</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1919年 日本参加巴黎和会</title>
    <link href="/2023/08/31/1919%E5%B9%B4%20%E6%97%A5%E6%9C%AC%E5%8F%82%E5%8A%A0%E5%B7%B4%E9%BB%8E%E5%92%8C%E4%BC%9A/"/>
    <url>/2023/08/31/1919%E5%B9%B4%20%E6%97%A5%E6%9C%AC%E5%8F%82%E5%8A%A0%E5%B7%B4%E9%BB%8E%E5%92%8C%E4%BC%9A/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>阅读</category>
      
      <category>全历史</category>
      
      <category>历史</category>
      
      <category>日本史</category>
      
    </categories>
    
    
    <tags>
      
      <tag>article</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1924年 第二次宪政拥护运动</title>
    <link href="/2023/08/31/1924%E5%B9%B4%20%E7%AC%AC%E4%BA%8C%E6%AC%A1%E5%AE%AA%E6%94%BF%E6%8B%A5%E6%8A%A4%E8%BF%90%E5%8A%A8/"/>
    <url>/2023/08/31/1924%E5%B9%B4%20%E7%AC%AC%E4%BA%8C%E6%AC%A1%E5%AE%AA%E6%94%BF%E6%8B%A5%E6%8A%A4%E8%BF%90%E5%8A%A8/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>阅读</category>
      
      <category>全历史</category>
      
      <category>历史</category>
      
      <category>日本史</category>
      
    </categories>
    
    
    <tags>
      
      <tag>article</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1930年 日本签署《伦敦海军条约》</title>
    <link href="/2023/08/31/1930%E5%B9%B4%20%E6%97%A5%E6%9C%AC%E7%AD%BE%E7%BD%B2%E3%80%8A%E4%BC%A6%E6%95%A6%E6%B5%B7%E5%86%9B%E6%9D%A1%E7%BA%A6%E3%80%8B/"/>
    <url>/2023/08/31/1930%E5%B9%B4%20%E6%97%A5%E6%9C%AC%E7%AD%BE%E7%BD%B2%E3%80%8A%E4%BC%A6%E6%95%A6%E6%B5%B7%E5%86%9B%E6%9D%A1%E7%BA%A6%E3%80%8B/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>阅读</category>
      
      <category>全历史</category>
      
      <category>历史</category>
      
      <category>日本史</category>
      
    </categories>
    
    
    <tags>
      
      <tag>article</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1932年 五一五事件</title>
    <link href="/2023/08/31/1932%E5%B9%B4%20%E4%BA%94%E4%B8%80%E4%BA%94%E4%BA%8B%E4%BB%B6/"/>
    <url>/2023/08/31/1932%E5%B9%B4%20%E4%BA%94%E4%B8%80%E4%BA%94%E4%BA%8B%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>阅读</category>
      
      <category>全历史</category>
      
      <category>历史</category>
      
      <category>日本史</category>
      
    </categories>
    
    
    <tags>
      
      <tag>article</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1933年 日本退出国联</title>
    <link href="/2023/08/31/1933%E5%B9%B4%20%E6%97%A5%E6%9C%AC%E9%80%80%E5%87%BA%E5%9B%BD%E8%81%94/"/>
    <url>/2023/08/31/1933%E5%B9%B4%20%E6%97%A5%E6%9C%AC%E9%80%80%E5%87%BA%E5%9B%BD%E8%81%94/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>阅读</category>
      
      <category>全历史</category>
      
      <category>历史</category>
      
      <category>日本史</category>
      
    </categories>
    
    
    <tags>
      
      <tag>article</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1931年 日本入侵中国东北</title>
    <link href="/2023/08/31/1931%E5%B9%B4%20%E6%97%A5%E6%9C%AC%E5%85%A5%E4%BE%B5%E4%B8%AD%E5%9B%BD%E4%B8%9C%E5%8C%97/"/>
    <url>/2023/08/31/1931%E5%B9%B4%20%E6%97%A5%E6%9C%AC%E5%85%A5%E4%BE%B5%E4%B8%AD%E5%9B%BD%E4%B8%9C%E5%8C%97/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>阅读</category>
      
      <category>全历史</category>
      
      <category>历史</category>
      
      <category>日本史</category>
      
    </categories>
    
    
    <tags>
      
      <tag>article</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1936年 二二六事件</title>
    <link href="/2023/08/31/1936%E5%B9%B4%20%E4%BA%8C%E4%BA%8C%E5%85%AD%E4%BA%8B%E4%BB%B6/"/>
    <url>/2023/08/31/1936%E5%B9%B4%20%E4%BA%8C%E4%BA%8C%E5%85%AD%E4%BA%8B%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>阅读</category>
      
      <category>全历史</category>
      
      <category>历史</category>
      
      <category>日本史</category>
      
    </categories>
    
    
    <tags>
      
      <tag>article</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1937年 日本扩大侵华战争</title>
    <link href="/2023/08/31/1937%E5%B9%B4%20%E6%97%A5%E6%9C%AC%E6%89%A9%E5%A4%A7%E4%BE%B5%E5%8D%8E%E6%88%98%E4%BA%89/"/>
    <url>/2023/08/31/1937%E5%B9%B4%20%E6%97%A5%E6%9C%AC%E6%89%A9%E5%A4%A7%E4%BE%B5%E5%8D%8E%E6%88%98%E4%BA%89/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>阅读</category>
      
      <category>全历史</category>
      
      <category>历史</category>
      
      <category>日本史</category>
      
    </categories>
    
    
    <tags>
      
      <tag>article</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1937年 卢沟桥事变</title>
    <link href="/2023/08/31/1937%E5%B9%B4%20%E5%8D%A2%E6%B2%9F%E6%A1%A5%E4%BA%8B%E5%8F%98/"/>
    <url>/2023/08/31/1937%E5%B9%B4%20%E5%8D%A2%E6%B2%9F%E6%A1%A5%E4%BA%8B%E5%8F%98/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>阅读</category>
      
      <category>全历史</category>
      
      <category>历史</category>
      
      <category>日本史</category>
      
    </categories>
    
    
    <tags>
      
      <tag>article</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1939年 诺门坎战役</title>
    <link href="/2023/08/31/1939%E5%B9%B4%20%E8%AF%BA%E9%97%A8%E5%9D%8E%E6%88%98%E5%BD%B9/"/>
    <url>/2023/08/31/1939%E5%B9%B4%20%E8%AF%BA%E9%97%A8%E5%9D%8E%E6%88%98%E5%BD%B9/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>阅读</category>
      
      <category>全历史</category>
      
      <category>历史</category>
      
      <category>日本史</category>
      
    </categories>
    
    
    <tags>
      
      <tag>article</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1938年 近卫文磨声明建立东亚新秩序</title>
    <link href="/2023/08/31/1938%E5%B9%B4%20%E8%BF%91%E5%8D%AB%E6%96%87%E7%A3%A8%E5%A3%B0%E6%98%8E%E5%BB%BA%E7%AB%8B%E4%B8%9C%E4%BA%9A%E6%96%B0%E7%A7%A9%E5%BA%8F/"/>
    <url>/2023/08/31/1938%E5%B9%B4%20%E8%BF%91%E5%8D%AB%E6%96%87%E7%A3%A8%E5%A3%B0%E6%98%8E%E5%BB%BA%E7%AB%8B%E4%B8%9C%E4%BA%9A%E6%96%B0%E7%A7%A9%E5%BA%8F/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>阅读</category>
      
      <category>全历史</category>
      
      <category>历史</category>
      
      <category>日本史</category>
      
    </categories>
    
    
    <tags>
      
      <tag>article</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1941年 东条英机出任日本首相</title>
    <link href="/2023/08/31/1941%E5%B9%B4%20%E4%B8%9C%E6%9D%A1%E8%8B%B1%E6%9C%BA%E5%87%BA%E4%BB%BB%E6%97%A5%E6%9C%AC%E9%A6%96%E7%9B%B8/"/>
    <url>/2023/08/31/1941%E5%B9%B4%20%E4%B8%9C%E6%9D%A1%E8%8B%B1%E6%9C%BA%E5%87%BA%E4%BB%BB%E6%97%A5%E6%9C%AC%E9%A6%96%E7%9B%B8/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>阅读</category>
      
      <category>全历史</category>
      
      <category>历史</category>
      
      <category>日本史</category>
      
    </categories>
    
    
    <tags>
      
      <tag>article</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1941年 《日苏中立条约》签订</title>
    <link href="/2023/08/31/1941%E5%B9%B4%20%E3%80%8A%E6%97%A5%E8%8B%8F%E4%B8%AD%E7%AB%8B%E6%9D%A1%E7%BA%A6%E3%80%8B%E7%AD%BE%E8%AE%A2/"/>
    <url>/2023/08/31/1941%E5%B9%B4%20%E3%80%8A%E6%97%A5%E8%8B%8F%E4%B8%AD%E7%AB%8B%E6%9D%A1%E7%BA%A6%E3%80%8B%E7%AD%BE%E8%AE%A2/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>阅读</category>
      
      <category>全历史</category>
      
      <category>历史</category>
      
      <category>日本史</category>
      
    </categories>
    
    
    <tags>
      
      <tag>article</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1941年 珍珠港事件：虎！虎！虎!</title>
    <link href="/2023/08/31/1941%E5%B9%B4%20%E7%8F%8D%E7%8F%A0%E6%B8%AF%E4%BA%8B%E4%BB%B6%EF%BC%9A%E8%99%8E%EF%BC%81%E8%99%8E%EF%BC%81%E8%99%8E!/"/>
    <url>/2023/08/31/1941%E5%B9%B4%20%E7%8F%8D%E7%8F%A0%E6%B8%AF%E4%BA%8B%E4%BB%B6%EF%BC%9A%E8%99%8E%EF%BC%81%E8%99%8E%EF%BC%81%E8%99%8E!/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>阅读</category>
      
      <category>全历史</category>
      
      <category>历史</category>
      
      <category>日本史</category>
      
    </categories>
    
    
    <tags>
      
      <tag>article</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1941年 日美谈判</title>
    <link href="/2023/08/31/1941%E5%B9%B4%20%E6%97%A5%E7%BE%8E%E8%B0%88%E5%88%A4/"/>
    <url>/2023/08/31/1941%E5%B9%B4%20%E6%97%A5%E7%BE%8E%E8%B0%88%E5%88%A4/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>阅读</category>
      
      <category>全历史</category>
      
      <category>历史</category>
      
      <category>日本史</category>
      
    </categories>
    
    
    <tags>
      
      <tag>article</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1944年 东条英机下台</title>
    <link href="/2023/08/31/1944%E5%B9%B4%20%E4%B8%9C%E6%9D%A1%E8%8B%B1%E6%9C%BA%E4%B8%8B%E5%8F%B0/"/>
    <url>/2023/08/31/1944%E5%B9%B4%20%E4%B8%9C%E6%9D%A1%E8%8B%B1%E6%9C%BA%E4%B8%8B%E5%8F%B0/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>阅读</category>
      
      <category>全历史</category>
      
      <category>历史</category>
      
      <category>日本史</category>
      
    </categories>
    
    
    <tags>
      
      <tag>article</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1945年 日本投降</title>
    <link href="/2023/08/31/1945%E5%B9%B4%20%E6%97%A5%E6%9C%AC%E6%8A%95%E9%99%8D/"/>
    <url>/2023/08/31/1945%E5%B9%B4%20%E6%97%A5%E6%9C%AC%E6%8A%95%E9%99%8D/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>阅读</category>
      
      <category>全历史</category>
      
      <category>历史</category>
      
      <category>日本史</category>
      
    </categories>
    
    
    <tags>
      
      <tag>article</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1945年 自由党成立</title>
    <link href="/2023/08/31/1945%E5%B9%B4%20%E8%87%AA%E7%94%B1%E5%85%9A%E6%88%90%E7%AB%8B/"/>
    <url>/2023/08/31/1945%E5%B9%B4%20%E8%87%AA%E7%94%B1%E5%85%9A%E6%88%90%E7%AB%8B/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>阅读</category>
      
      <category>全历史</category>
      
      <category>历史</category>
      
      <category>日本史</category>
      
    </categories>
    
    
    <tags>
      
      <tag>article</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1946年 《日本国宪法》颁布</title>
    <link href="/2023/08/31/1946%E5%B9%B4%20%E3%80%8A%E6%97%A5%E6%9C%AC%E5%9B%BD%E5%AE%AA%E6%B3%95%E3%80%8B%E9%A2%81%E5%B8%83/"/>
    <url>/2023/08/31/1946%E5%B9%B4%20%E3%80%8A%E6%97%A5%E6%9C%AC%E5%9B%BD%E5%AE%AA%E6%B3%95%E3%80%8B%E9%A2%81%E5%B8%83/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>阅读</category>
      
      <category>全历史</category>
      
      <category>历史</category>
      
      <category>日本史</category>
      
    </categories>
    
    
    <tags>
      
      <tag>article</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1948年 第二次吉田内阁</title>
    <link href="/2023/08/31/1948%E5%B9%B4%20%E7%AC%AC%E4%BA%8C%E6%AC%A1%E5%90%89%E7%94%B0%E5%86%85%E9%98%81/"/>
    <url>/2023/08/31/1948%E5%B9%B4%20%E7%AC%AC%E4%BA%8C%E6%AC%A1%E5%90%89%E7%94%B0%E5%86%85%E9%98%81/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>阅读</category>
      
      <category>全历史</category>
      
      <category>历史</category>
      
      <category>日本史</category>
      
    </categories>
    
    
    <tags>
      
      <tag>article</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1946年 日本发表《人间宣言》</title>
    <link href="/2023/08/31/1946%E5%B9%B4%20%E6%97%A5%E6%9C%AC%E5%8F%91%E8%A1%A8%E3%80%8A%E4%BA%BA%E9%97%B4%E5%AE%A3%E8%A8%80%E3%80%8B/"/>
    <url>/2023/08/31/1946%E5%B9%B4%20%E6%97%A5%E6%9C%AC%E5%8F%91%E8%A1%A8%E3%80%8A%E4%BA%BA%E9%97%B4%E5%AE%A3%E8%A8%80%E3%80%8B/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>阅读</category>
      
      <category>全历史</category>
      
      <category>历史</category>
      
      <category>日本史</category>
      
    </categories>
    
    
    <tags>
      
      <tag>article</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1951年 《旧金山和约》签订</title>
    <link href="/2023/08/31/1951%E5%B9%B4%20%E3%80%8A%E6%97%A7%E9%87%91%E5%B1%B1%E5%92%8C%E7%BA%A6%E3%80%8B%E7%AD%BE%E8%AE%A2/"/>
    <url>/2023/08/31/1951%E5%B9%B4%20%E3%80%8A%E6%97%A7%E9%87%91%E5%B1%B1%E5%92%8C%E7%BA%A6%E3%80%8B%E7%AD%BE%E8%AE%A2/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>阅读</category>
      
      <category>全历史</category>
      
      <category>历史</category>
      
      <category>日本史</category>
      
    </categories>
    
    
    <tags>
      
      <tag>article</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1955年 五五年体制形成</title>
    <link href="/2023/08/31/1955%E5%B9%B4%20%E4%BA%94%E4%BA%94%E5%B9%B4%E4%BD%93%E5%88%B6%E5%BD%A2%E6%88%90/"/>
    <url>/2023/08/31/1955%E5%B9%B4%20%E4%BA%94%E4%BA%94%E5%B9%B4%E4%BD%93%E5%88%B6%E5%BD%A2%E6%88%90/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>阅读</category>
      
      <category>全历史</category>
      
      <category>历史</category>
      
      <category>日本史</category>
      
    </categories>
    
    
    <tags>
      
      <tag>article</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1956年 《日苏共同宣言》签订</title>
    <link href="/2023/08/31/1956%E5%B9%B4%20%E3%80%8A%E6%97%A5%E8%8B%8F%E5%85%B1%E5%90%8C%E5%AE%A3%E8%A8%80%E3%80%8B%E7%AD%BE%E8%AE%A2/"/>
    <url>/2023/08/31/1956%E5%B9%B4%20%E3%80%8A%E6%97%A5%E8%8B%8F%E5%85%B1%E5%90%8C%E5%AE%A3%E8%A8%80%E3%80%8B%E7%AD%BE%E8%AE%A2/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>阅读</category>
      
      <category>全历史</category>
      
      <category>历史</category>
      
      <category>日本史</category>
      
    </categories>
    
    
    <tags>
      
      <tag>article</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1960年 国民所得倍增计划</title>
    <link href="/2023/08/31/1960%E5%B9%B4%20%E5%9B%BD%E6%B0%91%E6%89%80%E5%BE%97%E5%80%8D%E5%A2%9E%E8%AE%A1%E5%88%92/"/>
    <url>/2023/08/31/1960%E5%B9%B4%20%E5%9B%BD%E6%B0%91%E6%89%80%E5%BE%97%E5%80%8D%E5%A2%9E%E8%AE%A1%E5%88%92/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>阅读</category>
      
      <category>全历史</category>
      
      <category>历史</category>
      
      <category>日本史</category>
      
    </categories>
    
    
    <tags>
      
      <tag>article</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1955年 社会党统一</title>
    <link href="/2023/08/31/1955%E5%B9%B4%20%E7%A4%BE%E4%BC%9A%E5%85%9A%E7%BB%9F%E4%B8%80/"/>
    <url>/2023/08/31/1955%E5%B9%B4%20%E7%A4%BE%E4%BC%9A%E5%85%9A%E7%BB%9F%E4%B8%80/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>阅读</category>
      
      <category>全历史</category>
      
      <category>历史</category>
      
      <category>日本史</category>
      
    </categories>
    
    
    <tags>
      
      <tag>article</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1960年 《日美安保条约》签订</title>
    <link href="/2023/08/31/1960%E5%B9%B4%20%E3%80%8A%E6%97%A5%E7%BE%8E%E5%AE%89%E4%BF%9D%E6%9D%A1%E7%BA%A6%E3%80%8B%E7%AD%BE%E8%AE%A2/"/>
    <url>/2023/08/31/1960%E5%B9%B4%20%E3%80%8A%E6%97%A5%E7%BE%8E%E5%AE%89%E4%BF%9D%E6%9D%A1%E7%BA%A6%E3%80%8B%E7%AD%BE%E8%AE%A2/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>阅读</category>
      
      <category>全历史</category>
      
      <category>历史</category>
      
      <category>日本史</category>
      
    </categories>
    
    
    <tags>
      
      <tag>article</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1966年 黑雾事件</title>
    <link href="/2023/08/31/1966%E5%B9%B4%20%E9%BB%91%E9%9B%BE%E4%BA%8B%E4%BB%B6/"/>
    <url>/2023/08/31/1966%E5%B9%B4%20%E9%BB%91%E9%9B%BE%E4%BA%8B%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>阅读</category>
      
      <category>全历史</category>
      
      <category>历史</category>
      
      <category>日本史</category>
      
    </categories>
    
    
    <tags>
      
      <tag>article</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1970年 三岛事件</title>
    <link href="/2023/08/31/1970%E5%B9%B4%20%E4%B8%89%E5%B2%9B%E4%BA%8B%E4%BB%B6/"/>
    <url>/2023/08/31/1970%E5%B9%B4%20%E4%B8%89%E5%B2%9B%E4%BA%8B%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>阅读</category>
      
      <category>全历史</category>
      
      <category>历史</category>
      
      <category>日本史</category>
      
    </categories>
    
    
    <tags>
      
      <tag>article</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1965年 《日韩基本关系条约》签订</title>
    <link href="/2023/08/31/1965%E5%B9%B4%20%E3%80%8A%E6%97%A5%E9%9F%A9%E5%9F%BA%E6%9C%AC%E5%85%B3%E7%B3%BB%E6%9D%A1%E7%BA%A6%E3%80%8B%E7%AD%BE%E8%AE%A2/"/>
    <url>/2023/08/31/1965%E5%B9%B4%20%E3%80%8A%E6%97%A5%E9%9F%A9%E5%9F%BA%E6%9C%AC%E5%85%B3%E7%B3%BB%E6%9D%A1%E7%BA%A6%E3%80%8B%E7%AD%BE%E8%AE%A2/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>阅读</category>
      
      <category>全历史</category>
      
      <category>历史</category>
      
      <category>日本史</category>
      
    </categories>
    
    
    <tags>
      
      <tag>article</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1972年 冲绳返还</title>
    <link href="/2023/08/31/1972%E5%B9%B4%20%E5%86%B2%E7%BB%B3%E8%BF%94%E8%BF%98/"/>
    <url>/2023/08/31/1972%E5%B9%B4%20%E5%86%B2%E7%BB%B3%E8%BF%94%E8%BF%98/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>阅读</category>
      
      <category>全历史</category>
      
      <category>历史</category>
      
      <category>日本史</category>
      
    </categories>
    
    
    <tags>
      
      <tag>article</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1970年 角福战争</title>
    <link href="/2023/08/31/1970%E5%B9%B4%20%E8%A7%92%E7%A6%8F%E6%88%98%E4%BA%89/"/>
    <url>/2023/08/31/1970%E5%B9%B4%20%E8%A7%92%E7%A6%8F%E6%88%98%E4%BA%89/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>阅读</category>
      
      <category>全历史</category>
      
      <category>历史</category>
      
      <category>日本史</category>
      
    </categories>
    
    
    <tags>
      
      <tag>article</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1974年 椎名裁定</title>
    <link href="/2023/08/31/1974%E5%B9%B4%20%E6%A4%8E%E5%90%8D%E8%A3%81%E5%AE%9A/"/>
    <url>/2023/08/31/1974%E5%B9%B4%20%E6%A4%8E%E5%90%8D%E8%A3%81%E5%AE%9A/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>阅读</category>
      
      <category>全历史</category>
      
      <category>历史</category>
      
      <category>日本史</category>
      
    </categories>
    
    
    <tags>
      
      <tag>article</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1976年 洛克希德事件</title>
    <link href="/2023/08/31/1976%E5%B9%B4%20%E6%B4%9B%E5%85%8B%E5%B8%8C%E5%BE%B7%E4%BA%8B%E4%BB%B6/"/>
    <url>/2023/08/31/1976%E5%B9%B4%20%E6%B4%9B%E5%85%8B%E5%B8%8C%E5%BE%B7%E4%BA%8B%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>阅读</category>
      
      <category>全历史</category>
      
      <category>历史</category>
      
      <category>日本史</category>
      
    </categories>
    
    
    <tags>
      
      <tag>article</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1972年 列岛改造热潮</title>
    <link href="/2023/08/31/1972%E5%B9%B4%20%E5%88%97%E5%B2%9B%E6%94%B9%E9%80%A0%E7%83%AD%E6%BD%AE/"/>
    <url>/2023/08/31/1972%E5%B9%B4%20%E5%88%97%E5%B2%9B%E6%94%B9%E9%80%A0%E7%83%AD%E6%BD%AE/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>阅读</category>
      
      <category>全历史</category>
      
      <category>历史</category>
      
      <category>日本史</category>
      
    </categories>
    
    
    <tags>
      
      <tag>article</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1972年 日中关系正常化</title>
    <link href="/2023/08/31/1972%E5%B9%B4%20%E6%97%A5%E4%B8%AD%E5%85%B3%E7%B3%BB%E6%AD%A3%E5%B8%B8%E5%8C%96/"/>
    <url>/2023/08/31/1972%E5%B9%B4%20%E6%97%A5%E4%B8%AD%E5%85%B3%E7%B3%BB%E6%AD%A3%E5%B8%B8%E5%8C%96/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>阅读</category>
      
      <category>全历史</category>
      
      <category>历史</category>
      
      <category>日本史</category>
      
    </categories>
    
    
    <tags>
      
      <tag>article</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1979年 四十日抗争</title>
    <link href="/2023/08/31/1979%E5%B9%B4%20%E5%9B%9B%E5%8D%81%E6%97%A5%E6%8A%97%E4%BA%89/"/>
    <url>/2023/08/31/1979%E5%B9%B4%20%E5%9B%9B%E5%8D%81%E6%97%A5%E6%8A%97%E4%BA%89/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>阅读</category>
      
      <category>全历史</category>
      
      <category>历史</category>
      
      <category>日本史</category>
      
    </categories>
    
    
    <tags>
      
      <tag>article</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1983年 1983大选</title>
    <link href="/2023/08/31/1983%E5%B9%B4%201983%E5%A4%A7%E9%80%89/"/>
    <url>/2023/08/31/1983%E5%B9%B4%201983%E5%A4%A7%E9%80%89/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>阅读</category>
      
      <category>全历史</category>
      
      <category>历史</category>
      
      <category>日本史</category>
      
    </categories>
    
    
    <tags>
      
      <tag>article</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>237年 邪马台国的卑弥呼女王</title>
    <link href="/2023/08/31/237%E5%B9%B4%20%E9%82%AA%E9%A9%AC%E5%8F%B0%E5%9B%BD%E7%9A%84%E5%8D%91%E5%BC%A5%E5%91%BC%E5%A5%B3%E7%8E%8B/"/>
    <url>/2023/08/31/237%E5%B9%B4%20%E9%82%AA%E9%A9%AC%E5%8F%B0%E5%9B%BD%E7%9A%84%E5%8D%91%E5%BC%A5%E5%91%BC%E5%A5%B3%E7%8E%8B/</url>
    
    <content type="html"><![CDATA[<p>邪马台国被认为是日本国的起源，现在它的位置有说是在九州东北部，有说在畿内大和。弥生时代日本散落着很多小国，邪马台国就是统治周边很多国家的较为大的国家。<br>弥生中期，邪马台国的男人死光了导致王国内各部族混乱内战不断，后推举卑弥呼为女王，卑弥呼本身精通”巫术”，能够预测各类自然现象，同时当时相传着”天照女皇”的传说，这也让当时很多人相信卑弥呼就是天照女皇。<br>邪马台国南部有一个叫狗奴的国家，并不服气邪马台国，经常出兵攻打邪马台国，邪马台国为获得中国支持，于是派遣了使团带上土特产出使中国的魏国，当时魏国很高心，还回赠了很多礼物，其中就包含卑弥呼最喜欢的铜镜。<br>因为当时人们都对太阳有着很大的敬畏，铜镜则是代表着太阳，因此谁拥有铜镜就能得到天阳的庇护。<br>后来卑弥呼还派遣使者请求魏国的保护，而后曹睿还派人前往调解争端，才化解与狗奴国的矛盾。</p>]]></content>
    
    
    <categories>
      
      <category>阅读</category>
      
      <category>全历史</category>
      
      <category>历史</category>
      
      <category>日本史</category>
      
    </categories>
    
    
    <tags>
      
      <tag>article</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>478年 倭五王：日本向中国请封</title>
    <link href="/2023/08/31/478%E5%B9%B4%20%E5%80%AD%E4%BA%94%E7%8E%8B%EF%BC%9A%E6%97%A5%E6%9C%AC%E5%90%91%E4%B8%AD%E5%9B%BD%E8%AF%B7%E5%B0%81/"/>
    <url>/2023/08/31/478%E5%B9%B4%20%E5%80%AD%E4%BA%94%E7%8E%8B%EF%BC%9A%E6%97%A5%E6%9C%AC%E5%90%91%E4%B8%AD%E5%9B%BD%E8%AF%B7%E5%B0%81/</url>
    
    <content type="html"><![CDATA[<p>早在刘裕还是东晋的一方将领的时候，倭国就来朝贡过，随后到了430年，刘义隆北伐失败，闹得整个国家陷入动荡，此时倭国又想来要册封，六国诸军事，安东大将军，倭国王。<br>此时朝鲜半岛上本身有六个比较强大的国家，跟中国关系好的百济政权，也只是一个本国诸军事，日本的册封无道理，于是被拒绝了。倭国想要通过这个册封，打着中国的旗号，合理掌控朝鲜半岛。<br>后来倭国又派遣了几次使者，但是均被拒绝，直到刘宋政权已经风烛残年的时候，终于松口，可惜没多久新政权上台，册封的称号又不算数了。<br>后来中国政权发生了几次变迁，倭国也派使者来中国要求册封，但是结果都一样，不给六国诸军事，甚至倭国王都不给了。倭国此后很生气，上贡都不干了。</p>]]></content>
    
    
    <categories>
      
      <category>阅读</category>
      
      <category>全历史</category>
      
      <category>历史</category>
      
      <category>日本史</category>
      
    </categories>
    
    
    <tags>
      
      <tag>article</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>527年 磐井之乱：朝鲜半岛最初的征伐</title>
    <link href="/2023/08/31/527%E5%B9%B4%20%E7%A3%90%E4%BA%95%E4%B9%8B%E4%B9%B1%EF%BC%9A%E6%9C%9D%E9%B2%9C%E5%8D%8A%E5%B2%9B%E6%9C%80%E5%88%9D%E7%9A%84%E5%BE%81%E4%BC%90/"/>
    <url>/2023/08/31/527%E5%B9%B4%20%E7%A3%90%E4%BA%95%E4%B9%8B%E4%B9%B1%EF%BC%9A%E6%9C%9D%E9%B2%9C%E5%8D%8A%E5%B2%9B%E6%9C%80%E5%88%9D%E7%9A%84%E5%BE%81%E4%BC%90/</url>
    
    <content type="html"><![CDATA[<p>527年，日本大和政权派了一只六万人的军队，想要复兴任那。任那是朝鲜半岛南部的一个被日本所扶持的国家，这次的目的是想要夺回之前被另一个半岛南部政权新罗夺走的领土，但是这事很快被新罗知道了。<br>新罗了解到北九州的磐井这个人一直对中央不满，最近这两年有反叛的意愿，随后派人拿财宝说服了他，然后磐井决定发动军事叛乱。<br>磐井叛乱的消息被大和政权得知后，引起了高度重视，随后派兵镇压，起初并不顺利，直到11月的时候，与磐井主力决战随后才平叛。但是这个时候，新罗已经腾出手来，并且和百济联军一起击溃了来复兴任那的日本军队，主帅近江毛野也病死在战败回国的路上。</p>]]></content>
    
    
    <categories>
      
      <category>阅读</category>
      
      <category>全历史</category>
      
      <category>历史</category>
      
      <category>日本史</category>
      
    </categories>
    
    
    <tags>
      
      <tag>article</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>592年 推古天皇继位：开启日本飞鸟时代</title>
    <link href="/2023/08/31/592%E5%B9%B4%20%E6%8E%A8%E5%8F%A4%E5%A4%A9%E7%9A%87%E7%BB%A7%E4%BD%8D%EF%BC%9A%E5%BC%80%E5%90%AF%E6%97%A5%E6%9C%AC%E9%A3%9E%E9%B8%9F%E6%97%B6%E4%BB%A3/"/>
    <url>/2023/08/31/592%E5%B9%B4%20%E6%8E%A8%E5%8F%A4%E5%A4%A9%E7%9A%87%E7%BB%A7%E4%BD%8D%EF%BC%9A%E5%BC%80%E5%90%AF%E6%97%A5%E6%9C%AC%E9%A3%9E%E9%B8%9F%E6%97%B6%E4%BB%A3/</url>
    
    <content type="html"><![CDATA[<p>公元585年敏达天皇去世，天皇之位空缺，政治势力开始进行斗争。<br>日本由于允许兄弟继承皇位，所以很快继位的就是敏达天皇的弟弟用明天皇，但是两年后用明天皇就因病去世了，这个时候又需要选出新的天皇出来。<br>当时的苏我马子作为苏我氏的掌权人，在支持崇峻天皇的斗争中取得了优势，很快天皇继位了。但是天皇很忌惮苏我氏的势力，苏我马子也很快察觉到了，于是先下手发起了政变杀了崇峻天皇。<br>而后苏我马子权势空前壮大，他想找一个方便控制的天皇，于是让额田部继位，因为额田部的父亲丈夫哥哥都是天皇，她也是有资格的，而且女天皇在苏我马子看来容易控制。<br>不过，随着额田部继位成为推古天皇后，他便下令立用明天皇儿子为圣德天子，随后慢慢瓜分了苏我马子的权势。虽然苏我马子也不甘心权利被架空，希望申请一片领地，但是推古天皇毫不留情的拒绝了。<br>圣德太子也没让推古天皇失望，开始学习新思想让日本国更加强大。</p>]]></content>
    
    
    <categories>
      
      <category>阅读</category>
      
      <category>全历史</category>
      
      <category>历史</category>
      
      <category>日本史</category>
      
    </categories>
    
    
    <tags>
      
      <tag>article</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>552年 排佛之争：向原寺的劫难</title>
    <link href="/2023/08/31/552%E5%B9%B4%20%E6%8E%92%E4%BD%9B%E4%B9%8B%E4%BA%89%EF%BC%9A%E5%90%91%E5%8E%9F%E5%AF%BA%E7%9A%84%E5%8A%AB%E9%9A%BE/"/>
    <url>/2023/08/31/552%E5%B9%B4%20%E6%8E%92%E4%BD%9B%E4%B9%8B%E4%BA%89%EF%BC%9A%E5%90%91%E5%8E%9F%E5%AF%BA%E7%9A%84%E5%8A%AB%E9%9A%BE/</url>
    
    <content type="html"><![CDATA[<p>538年，佛教自百济传入日本，此时日本对于佛教的态度分为两派，一排为飞鸟新贵族苏我氏为首的信佛派和来自日轮山的旧贵族物部氏为首的排佛派，双方就是否信仰佛教为借口进行了激烈的权力纷争。<br>苏我氏所代表的飞鸟派距离朝廷较远，地方虽然政令不通，但是却给佛教在此地的传播提供了条件。天皇对于佛教的看法也是正面的，他希望通过信佛派势力来牵制旧贵族，以此得到更多的权利。但是总体上来说，还是本土宗教的势力更加强大。<br>552年，百济为了对抗北方的高句丽，于是同日本和中国南朝交好换取支持，还送了日本金铜佛像，这个佛像被放在朝堂之上这也象征着苏我氏和物部氏之间不死不休的漫长斗争即将迎来转机。<br>一年之后，日本爆发了流行疾病，排佛派认为这是引入佛教惹怒了本国神明的愤怒，信佛派则认为这是没有好好供奉佛教的后果。<br>585年，苏我稻目的儿子苏我马子患病，请求天皇供佛延长寿命，天皇同意了，但是第二年又爆发了疫情，物部氏以此为借口奉命烧毁了佛像，但是疫情仍然继续没得到控制。这样又有人认为这是烧毁佛像的灾难，这样反反复复的争执下，佛教还是在飞鸟地区传播开来，还是有一定地位。</p>]]></content>
    
    
    <categories>
      
      <category>阅读</category>
      
      <category>全历史</category>
      
      <category>历史</category>
      
      <category>日本史</category>
      
    </categories>
    
    
    <tags>
      
      <tag>article</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>645年 乙巳之变：大化改新的开始</title>
    <link href="/2023/08/31/645%E5%B9%B4%20%E4%B9%99%E5%B7%B3%E4%B9%8B%E5%8F%98%EF%BC%9A%E5%A4%A7%E5%8C%96%E6%94%B9%E6%96%B0%E7%9A%84%E5%BC%80%E5%A7%8B/"/>
    <url>/2023/08/31/645%E5%B9%B4%20%E4%B9%99%E5%B7%B3%E4%B9%8B%E5%8F%98%EF%BC%9A%E5%A4%A7%E5%8C%96%E6%94%B9%E6%96%B0%E7%9A%84%E5%BC%80%E5%A7%8B/</url>
    
    <content type="html"><![CDATA[<p>622年圣德太子去世，当时苏我氏族的势力仍然很强大，时任苏我氏掌门人苏我入鹿在对于皇位继承一事上展现出很大的野心，并迫害了热门继承人山背大兄王，一时间风光无限。<br>中大兄皇子认识到如果任由其发展，那么皇室终将难逃死劫。于是他联合忠臣合谋一起扳倒苏我氏，决定在朝堂之上刺杀苏我入鹿。<br>随后将日子选在了三韩朝贡的日子，中大兄王子自己藏有利剑，同时命两名侍卫在一旁准备，在苏我入鹿文书宣读快要完毕之时，他刺中了苏我入鹿，当时并没有一击毙命，苏我入鹿还想向皇极女皇辩解，希望明察罪状，最后中大兄皇子站出来说这是为了皇室的安稳。<br>随后苏我氏因为掌权人被杀，很快失势，苏我虾夷作为苏我入鹿的父亲见大势已去，焚烧了家屋，无数珍宝也毁之一旦。<br>政变之后，皇极女皇的弟弟继位，权力终于回到了皇室的手中，此时中大兄王子作为皇太子实权在握开始大张旗鼓的进行改革。<br>646年，改革项目由废除私有地，开始中央集权，实施班田收授法建立统一的赋税制度等措施。还登记了户籍，史称”大化改新”，大和国也正式改名日本。但是这项改革，阻力很大直到701年才宣告结束。</p>]]></content>
    
    
    <categories>
      
      <category>阅读</category>
      
      <category>全历史</category>
      
      <category>历史</category>
      
      <category>日本史</category>
      
    </categories>
    
    
    <tags>
      
      <tag>article</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>607年 小野妹子见隋炀帝：遣隋使外交的开端</title>
    <link href="/2023/08/31/607%E5%B9%B4%20%E5%B0%8F%E9%87%8E%E5%A6%B9%E5%AD%90%E8%A7%81%E9%9A%8B%E7%82%80%E5%B8%9D%EF%BC%9A%E9%81%A3%E9%9A%8B%E4%BD%BF%E5%A4%96%E4%BA%A4%E7%9A%84%E5%BC%80%E7%AB%AF/"/>
    <url>/2023/08/31/607%E5%B9%B4%20%E5%B0%8F%E9%87%8E%E5%A6%B9%E5%AD%90%E8%A7%81%E9%9A%8B%E7%82%80%E5%B8%9D%EF%BC%9A%E9%81%A3%E9%9A%8B%E4%BD%BF%E5%A4%96%E4%BA%A4%E7%9A%84%E5%BC%80%E7%AB%AF/</url>
    
    <content type="html"><![CDATA[<p>公元593年，自从圣德天子担任摄政以来，一直致力于提供皇权地位的改革。<br>此时日本的权臣苏我马子几乎掌握了整个国家的权利，他同朝鲜半岛的百济国混在一起，向日本大肆推广百济国的政治制度和思想文化，日本本土文化的重要性日益下降，天皇也成了傀儡。<br>圣德天子在这种情况下，将希望寄托在同隋王朝的建交上，因为百济国也属于隋朝的朝贡国，如果能够得到隋朝的认可，那么苏我氏的权势将会得到巨大的打击。<br>于是公元607年，圣德天子向隋王朝派遣使者小野妹子，以访求佛法的名义带领使团访问隋王朝，并且递交了国书。但是由于国书没有依照礼制使得隋炀帝很生气，但是当时隋朝很头疼高句丽，日本的位置又很特殊，因此想着多一个朋友比敌人好的态度，只是责难了日本无理行为。<br>但是这样的结果无法给全国一个交代，圣德天皇只能谎称国书被劫，而后隋王朝派遣使者回访，圣德天子买通了特使，伪造了一封国书，这才在形式上维护了皇权。但是这次的访问并没有动摇苏我氏的根基，日本的权利还是牢牢掌握在苏我氏的手中。<br>而后真正让其改变的是那些访问中国的使团学习了中国文化后，带来了先进的律法等，这才潜移默化的渗透进日本重塑了日本社会的形态。</p>]]></content>
    
    
    <categories>
      
      <category>阅读</category>
      
      <category>全历史</category>
      
      <category>历史</category>
      
      <category>日本史</category>
      
    </categories>
    
    
    <tags>
      
      <tag>article</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>663年 白村江之战：唐军重创日本</title>
    <link href="/2023/08/31/663%E5%B9%B4%20%E7%99%BD%E6%9D%91%E6%B1%9F%E4%B9%8B%E6%88%98%EF%BC%9A%E5%94%90%E5%86%9B%E9%87%8D%E5%88%9B%E6%97%A5%E6%9C%AC/"/>
    <url>/2023/08/31/663%E5%B9%B4%20%E7%99%BD%E6%9D%91%E6%B1%9F%E4%B9%8B%E6%88%98%EF%BC%9A%E5%94%90%E5%86%9B%E9%87%8D%E5%88%9B%E6%97%A5%E6%9C%AC/</url>
    
    <content type="html"><![CDATA[<p>公元661年，朝鲜半岛的百济军队被大唐军队大败，随后百济派人向日本求援。日本此时刚经历大化改新，国内需要树立维新，同时在日本做客的百济王子亲日本，如果拿下百济那么以后日本还能更好的控制朝鲜半岛，同时当时的大败唐军的高句丽名将也同意和日军并肩作战，所以日本很快出兵。<br>刚开始没有了唐军支援的新罗军队很快败下阵来，随后向唐朝请援，唐高宗随后派遣上万人的部队，水路两线驰援朝鲜。<br>但是当时日本的第二军阿倍比罗夫镇守的任存城抵挡住了唐军。但是水军朴市秦造田的近一万人海军，在白村江附近和唐军的海军遭遇，惨败。<br>唐军虽然只有7000人左右，但是船很大，一艘船有40多人，而日本是小船大概十多人。唐军还采取诱敌深入的策略，将日本海军引到船阵来，随后放火箭。唐军仗着大船坚固不容易燃烧的特点，几乎全歼日本海军，朴市秦造田也战死在船上。<br>随后路上的第二军见势不妙，随后赶紧撤军协同百济遗民和日本海军残部仓皇回国。</p>]]></content>
    
    
    <categories>
      
      <category>阅读</category>
      
      <category>全历史</category>
      
      <category>历史</category>
      
      <category>日本史</category>
      
    </categories>
    
    
    <tags>
      
      <tag>article</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>672年 壬申之乱：叔侄间的皇位斗争</title>
    <link href="/2023/08/31/672%E5%B9%B4%20%E5%A3%AC%E7%94%B3%E4%B9%8B%E4%B9%B1%EF%BC%9A%E5%8F%94%E4%BE%84%E9%97%B4%E7%9A%84%E7%9A%87%E4%BD%8D%E6%96%97%E4%BA%89/"/>
    <url>/2023/08/31/672%E5%B9%B4%20%E5%A3%AC%E7%94%B3%E4%B9%8B%E4%B9%B1%EF%BC%9A%E5%8F%94%E4%BE%84%E9%97%B4%E7%9A%84%E7%9A%87%E4%BD%8D%E6%96%97%E4%BA%89/</url>
    
    <content type="html"><![CDATA[<p>天智天皇在663年企图复兴百济，出兵朝鲜但是被大唐和新罗联军击败，随后政治形式十分困难，而当时的天智天皇的弟弟大海人皇子则乘机积累政治势力。<br>当时日本奉行的制度是皇位由兄弟继承，且由于大海人皇子的政治势力，很快他也被立为东宫。但是，天智天皇并不喜欢这个弟弟，从中国学习的政治制度中有一条嫡长子继承制，于是他想传位给自己的儿子，并逐渐给自己儿子升位担任要职架空大海人皇子的权力。<br>随后，天智天皇快要去世的时候，召集大海人皇子说是要传位于他，但是大海人皇子认为这是一个陷阱，并通过出家的方式降低天智天皇的戒心，实则暗中积累势力准备东山再起。<br>随后，天智天皇的儿子大友皇子继位，他深知自己的叔叔不会这样罢休，一定会卷土重来，于是他在京畿暗中招兵买马，但是这件事被自己的妃子告密给了大海人皇子，于是大海人皇子决心反叛。<br>由于天智天皇一直推行改革措施，得罪了不少地方的贵族豪绅，大海人皇子则笼络了他们，并且合着之前在美浓地区的势力，展开了叛乱。最终在决战中击败大友皇子的部队，皇子绝望自杀，这次叛乱结束。<br>大海人皇子继位后，并没有推翻自己哥哥的制度，反而恢复了不少旧的制度，加强了中央集权，形成了律令制。</p>]]></content>
    
    
    <categories>
      
      <category>阅读</category>
      
      <category>全历史</category>
      
      <category>历史</category>
      
      <category>日本史</category>
      
    </categories>
    
    
    <tags>
      
      <tag>article</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>700年《大宝律令》：律令制国家的形成</title>
    <link href="/2023/08/31/700%E5%B9%B4%E3%80%8A%E5%A4%A7%E5%AE%9D%E5%BE%8B%E4%BB%A4%E3%80%8B%EF%BC%9A%E5%BE%8B%E4%BB%A4%E5%88%B6%E5%9B%BD%E5%AE%B6%E7%9A%84%E5%BD%A2%E6%88%90/"/>
    <url>/2023/08/31/700%E5%B9%B4%E3%80%8A%E5%A4%A7%E5%AE%9D%E5%BE%8B%E4%BB%A4%E3%80%8B%EF%BC%9A%E5%BE%8B%E4%BB%A4%E5%88%B6%E5%9B%BD%E5%AE%B6%E7%9A%84%E5%BD%A2%E6%88%90/</url>
    
    <content type="html"><![CDATA[<p>日本自白村江之战以来，全国上下刮起了学习中国的风潮，这次学习主要依照唐制对本国进行改革，按照唐制指定本国律令。</p><p>这次律令的制定的最大功臣是藤原不比等。他本身是大化改新名臣藤原廉足的儿子，但是当他父亲死后两年，壬申之乱爆发，他的家族站在了近江一边这导致战后被清算，他也没了靠山只能从底层往上爬。</p><p>但是后来他的女儿的女婿被他拥立城信任天皇，也就是文武天皇。他又和文武天皇的乳母结婚了，这样文武天皇最重要的两个人强强联手下，他也逐渐掌握了朝中的权力。</p><p>他从政期间，日本的律令还是不比等父亲指定的《近江令》和《飞鸟净御原律令》，这两部只能算是变了唐令的一点，还不能够适应日本实际国情。</p><p>随后，他着手指定新的律令。在701年的时候编成《大宝律令》，这部律令涵盖了班田，赋税，身份制度和司法制度。具有重要意义，加强了日本的中央集权。</p>]]></content>
    
    
    <categories>
      
      <category>阅读</category>
      
      <category>全历史</category>
      
      <category>历史</category>
      
      <category>日本史</category>
      
    </categories>
    
    
    <tags>
      
      <tag>article</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>729年 日本遣唐使访华：向强大的老师学习</title>
    <link href="/2023/08/31/729%E5%B9%B4%20%E6%97%A5%E6%9C%AC%E9%81%A3%E5%94%90%E4%BD%BF%E8%AE%BF%E5%8D%8E%EF%BC%9A%E5%90%91%E5%BC%BA%E5%A4%A7%E7%9A%84%E8%80%81%E5%B8%88%E5%AD%A6%E4%B9%A0/"/>
    <url>/2023/08/31/729%E5%B9%B4%20%E6%97%A5%E6%9C%AC%E9%81%A3%E5%94%90%E4%BD%BF%E8%AE%BF%E5%8D%8E%EF%BC%9A%E5%90%91%E5%BC%BA%E5%A4%A7%E7%9A%84%E8%80%81%E5%B8%88%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<p>日本早在圣德天皇时期就有派遣使者去中国，那个时候还是遣隋使，为日本带来了先进的制度。到了唐朝的时候，时任日本天皇的舒明天皇为了确定中国态度，以及学新东西，又继续开始派遣使者访唐，也就是遣唐使。</p><p>日本按照唐朝的制度进行国内改革，也就是大化改新，此时日本民族自信心膨胀。但是663年的时候，在白村江遭遇了惨败，随后日本又继续多次派遣使者访问大唐，学习先进制度，同时修补两国嫌隙。</p><p>到了唐玄宗时期，日本遣唐使达到高峰，这个事情著名的遣唐使就是阿倍仲麻吉。他是阿倍比罗夫的孙子。他在中国考了官，与中国李白等文人交好，算是红极一时了。</p><p>随后日本752年派遣新的一批使者来，阿倍仲麻吉对这些人进行了培训，随后得到了唐玄宗的好评，一改对日本小国寡民的坏印象。甚至到了753年的元旦晚会，唐玄宗还让日本坐在了东次席上，在外人看来日本成了唐朝第一小弟了。</p><p>但随后随着唐朝的没落，894年日本停止了遣唐使。</p>]]></content>
    
    
    <categories>
      
      <category>阅读</category>
      
      <category>全历史</category>
      
      <category>历史</category>
      
      <category>日本史</category>
      
    </categories>
    
    
    <tags>
      
      <tag>article</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>753年 日本文化黄金发展：鉴真东渡</title>
    <link href="/2023/08/31/753%E5%B9%B4%20%E6%97%A5%E6%9C%AC%E6%96%87%E5%8C%96%E9%BB%84%E9%87%91%E5%8F%91%E5%B1%95%EF%BC%9A%E9%89%B4%E7%9C%9F%E4%B8%9C%E6%B8%A1/"/>
    <url>/2023/08/31/753%E5%B9%B4%20%E6%97%A5%E6%9C%AC%E6%96%87%E5%8C%96%E9%BB%84%E9%87%91%E5%8F%91%E5%B1%95%EF%BC%9A%E9%89%B4%E7%9C%9F%E4%B8%9C%E6%B8%A1/</url>
    
    <content type="html"><![CDATA[<p>鉴真答应日本留学僧荣睿、普照的请求前往日本传授佛学，但是前五次东渡都失败了，更是在第五次东渡的时候双眼因病失明，这也使他东渡的决定动摇了。直到后来藤原清河和吉田真备的请求其东渡传佛，他东渡的热情又一次被点燃了。</p><p>而后鉴真奏请皇上东渡但是唐玄宗就是不同意，但是鉴真仍然决定自己想办法去。吉田真备被他的精神所打动，随后吉田真备带着鉴真经历了风暴之后再753年12月2日终于到达了日本的萨摩。</p><p>到达后鉴真受到了最高的礼遇，并给予了鉴真”传灯大法师”的称号，并将日本佛教事务全权交于他处理。这样委以重任鉴真内心还是很感动的，随后鉴真还用自己学到的医学治好了天皇生母光明皇太后的病。这也打消了很多人的质疑声。</p><p>不仅是在医学领域，他的本职工作做的也很好。他对日本不成型的戒律制度进行了整顿，并且同日本本土僧人公开进行辩论，并取得了成功。在日本建立起佛学的戒律制度。他的到来给日本佛教，医学，书法等方面贡献巨大。</p>]]></content>
    
    
    <categories>
      
      <category>阅读</category>
      
      <category>全历史</category>
      
      <category>历史</category>
      
      <category>日本史</category>
      
    </categories>
    
    
    <tags>
      
      <tag>article</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>794年 迁都平安京：天皇的挣扎与崩溃</title>
    <link href="/2023/08/31/794%E5%B9%B4%20%E8%BF%81%E9%83%BD%E5%B9%B3%E5%AE%89%E4%BA%AC%EF%BC%9A%E5%A4%A9%E7%9A%87%E7%9A%84%E6%8C%A3%E6%89%8E%E4%B8%8E%E5%B4%A9%E6%BA%83/"/>
    <url>/2023/08/31/794%E5%B9%B4%20%E8%BF%81%E9%83%BD%E5%B9%B3%E5%AE%89%E4%BA%AC%EF%BC%9A%E5%A4%A9%E7%9A%87%E7%9A%84%E6%8C%A3%E6%89%8E%E4%B8%8E%E5%B4%A9%E6%BA%83/</url>
    
    <content type="html"><![CDATA[<p>公元710年，日本元明天皇因为原来都城不能养活庞大的人口，又考虑到律令改革，迁都到了奈良，又名平城京。</p><p>时间到了781年，藤原家族因为原定皇太子对藤原不满被废，藤原家族找到了恒武天皇让其继承皇位。</p><p>但是恒武天皇并非甘于傀儡，自己也有野心，能力突出并且精力旺盛，继位三年就迁都到长冈京。这里是他母亲族人所在的地方，他考虑的是原来平城京的僧人势力过于强大，自己不便于施展政令，自己为了巩固皇权于是选择了这个地方。</p><p>但是这个地方并没有给他带来好运，因为自己的宠臣在修筑宫殿的时候被暗箭所杀，恒武天皇下令彻查此事，查到了大伴家持和良早亲王，由于大伴家持一个月前就去世了，恒武天皇则废了良早亲王并将其流放。良早亲王不服，绝食抗议最终饿死在了流放途中。</p><p>此后厄运就来了，皇太后和皇后都离奇死亡，还发生了天花洪水等灾难，很多人都认为这是不祥的兆头。于是没过几年，恒武天皇下令建造新都，这就是”四神相应”风水极佳的平安京。而后在平安京搭设法场为怨灵超度，平息舆论。从此开启了平安时代。</p>]]></content>
    
    
    <categories>
      
      <category>阅读</category>
      
      <category>全历史</category>
      
      <category>历史</category>
      
      <category>日本史</category>
      
    </categories>
    
    
    <tags>
      
      <tag>article</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>935年 承平天庆之乱：武士崛起的起点</title>
    <link href="/2023/08/31/935%E5%B9%B4%20%E6%89%BF%E5%B9%B3%E5%A4%A9%E5%BA%86%E4%B9%8B%E4%B9%B1%EF%BC%9A%E6%AD%A6%E5%A3%AB%E5%B4%9B%E8%B5%B7%E7%9A%84%E8%B5%B7%E7%82%B9/"/>
    <url>/2023/08/31/935%E5%B9%B4%20%E6%89%BF%E5%B9%B3%E5%A4%A9%E5%BA%86%E4%B9%8B%E4%B9%B1%EF%BC%9A%E6%AD%A6%E5%A3%AB%E5%B4%9B%E8%B5%B7%E7%9A%84%E8%B5%B7%E7%82%B9/</url>
    
    <content type="html"><![CDATA[<p>公元902年，醍醐天皇颁布延喜新制，任命了一批押领史常驻地方维持治安，拥有比较大的自主权，这也造就了地方做大的种子。</p><p>其中就有两个地方爆发了叛乱，一个是关东地区的平将门，另一个是日本西部濑户内海的藤原纯友。平将门是恒武天皇的后代，他的爷爷辈当初被派往到关西地区维持治安，但没想到越做越大在关西地区的名望也越来越高，到了平将门这一代，已经是关西一霸了。</p><p>随后平将门在935年跟一个叔叔抢地盘打了起来，试探朝廷的态度，这也是承平之乱的起点，随后他在939年正式开始反叛。朝廷知道后，派兵镇压在940年平将门在战斗中战死，东部叛乱告一段落。</p><p>随后是藤原纯友，在西部本来是打击海盗，但是当他发现海盗一行利润丰厚，随即自己在平将门发动叛乱的时候自己也反了，摇身一变干起了海盗。</p><p>朝廷也同时派兵前往镇压叛乱，但是朝廷的船只数量远远低于他，但是由于其部下反水，让他在这一战中战败而逃。但是这一战并不致命，而后还是东部镇压叛乱的将领藤原忠文前往西部镇压，他协同归顺的水军协同打击藤原纯友，最终镇压了叛乱。</p><p>这两场叛乱虽然被镇压了，但是为了给这些镇压叛乱的忠臣奖赏间接的提升了他们的地位，造就了地方武士阶层的崛起。</p>]]></content>
    
    
    <categories>
      
      <category>阅读</category>
      
      <category>全历史</category>
      
      <category>历史</category>
      
      <category>日本史</category>
      
    </categories>
    
    
    <tags>
      
      <tag>article</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>729年 长屋王之变：千年家族的奠基之战</title>
    <link href="/2023/08/31/729%E5%B9%B4%20%E9%95%BF%E5%B1%8B%E7%8E%8B%E4%B9%8B%E5%8F%98%EF%BC%9A%E5%8D%83%E5%B9%B4%E5%AE%B6%E6%97%8F%E7%9A%84%E5%A5%A0%E5%9F%BA%E4%B9%8B%E6%88%98/"/>
    <url>/2023/08/31/729%E5%B9%B4%20%E9%95%BF%E5%B1%8B%E7%8E%8B%E4%B9%8B%E5%8F%98%EF%BC%9A%E5%8D%83%E5%B9%B4%E5%AE%B6%E6%97%8F%E7%9A%84%E5%A5%A0%E5%9F%BA%E4%B9%8B%E6%88%98/</url>
    
    <content type="html"><![CDATA[<p>720年权臣藤原不比等去世，按照惯例藤原不比等的大臣位置应该由皇室成员继任，随后仅次于不比等地位的长屋王开始统领朝政。而此时，藤原家族的男丁有4人，仅有老二是议政官，且排名也并不靠前，这种情况让他们在权利斗争中很被动。</p><p>事情发生转机在公元724年，44代天皇元正天皇传位给圣武天皇，圣武天皇是藤原不比等的大女儿和文武天皇的儿子，且随后他又娶了藤原不比等的三女儿为妻，这就让藤原家族又有了争权的支撑。</p><p>当然有权还不行，还得展现出过人的能力才行。这个时候藤原不比等的三儿子发挥了核心作用，他精通文史且擅长行军打仗，独特的人格魅力也吸引了不少原来在长屋王府上的人。而后，724年日本东北部虾夷发生了叛乱，他前去很快镇压了叛乱展现了军事实力。</p><p>长屋王一直想要阻止藤原家族的无限制扩张，给藤原家族扩张施加了不少阻力。</p><p>729年有人诬告长屋王颠覆国家，随后藤原宇和带着士兵将其宅邸围了起来，随后第二天逼死了他们全家人。此后，藤原家族一路高歌直上，但是好景不长，几个兄弟接连染上天花去世了。</p><p>不过在皇后藤原光明子的努力下，藤原家族还是奠定了千余年家族的基础。</p>]]></content>
    
    
    <categories>
      
      <category>阅读</category>
      
      <category>全历史</category>
      
      <category>历史</category>
      
      <category>日本史</category>
      
    </categories>
    
    
    <tags>
      
      <tag>article</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Debug</title>
    <link href="/2023/08/31/Debug/"/>
    <url>/2023/08/31/Debug/</url>
    
    <content type="html"><![CDATA[<p>在脚本中加入该代码用于按钮触发</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs C#"><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">OnGUI</span>()</span>  <br>&#123;  <br>    <span class="hljs-keyword">if</span> (GUI.Button(<span class="hljs-keyword">new</span> Rect(<span class="hljs-number">20</span>, <span class="hljs-number">40</span>, <span class="hljs-number">80</span>, <span class="hljs-number">20</span>), <span class="hljs-string">&quot;测试点这里&quot;</span>))  <br>    &#123;        <br>    Debug.Log(<span class="hljs-string">&quot;OK&quot;</span>);  <br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>计算机</category>
      
      <category>有用的代码库</category>
      
      <category>Unity 代码库</category>
      
    </categories>
    
    
    <tags>
      
      <tag>article</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数据持久化</title>
    <link href="/2023/08/31/%E6%95%B0%E6%8D%AE%E6%8C%81%E4%B9%85%E5%8C%96/"/>
    <url>/2023/08/31/%E6%95%B0%E6%8D%AE%E6%8C%81%E4%B9%85%E5%8C%96/</url>
    
    <content type="html"><![CDATA[<h3 id="Unity-assets-文件的创建方法"><a href="#Unity-assets-文件的创建方法" class="headerlink" title="Unity .assets 文件的创建方法"></a>Unity .assets 文件的创建方法</h3><ol><li>通过菜单的方式进行创建<figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c#"><br><span class="hljs-comment">// 创建的名字叫什么  创建的菜单叫什么</span><br>[<span class="hljs-meta">CreateAssetMenu(fileName=<span class="hljs-string">&quot;x&quot;</span>,menuName=<span class="hljs-string">&quot;(custom) X&quot;</span>)</span>]  <br>[<span class="hljs-meta">System.Serializable</span>]  <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">X</span> : <span class="hljs-title">ScriptableObject</span> &#123;  <br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">float</span> m_a;  <br>&#125;<br><br></code></pre></td></tr></table></figure></li><li>通过代码方式进行创建<blockquote><p>这种方式需要创建的路径 和 asset对应对象的类型</p></blockquote><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs C#"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">CreatLocalFile</span>&lt;<span class="hljs-title">T</span> <span class="hljs-title">where</span> <span class="hljs-title">T</span> : <span class="hljs-title">ScriptableObject</span>&gt;(<span class="hljs-params"><span class="hljs-built_in">string</span> Dirpath</span>)</span><br>&#123;<br>    <span class="hljs-keyword">if</span> (!Directory.Exists (Dirpath))<br>    &#123;<br>        Directory.CreateDirectory(Dirpath);<br>    &#125;<br>    <span class="hljs-built_in">string</span> path = Dirpath + <span class="hljs-keyword">typeof</span>(T)+ <span class="hljs-string">&quot;.asset&quot;</span>;<span class="hljs-comment">//使用类  的名字</span><br>    <span class="hljs-comment">// 关键API1</span><br>    ScriptableObject ob = ScriptableObject.CreateInstance(<span class="hljs-keyword">typeof</span>(T));<br>    <span class="hljs-keyword">if</span> (ob ==<span class="hljs-literal">null</span>)<br>    &#123;<br>        Debug.LogError(<span class="hljs-string">&quot;cant creat file：&quot;</span> + <span class="hljs-keyword">typeof</span>(T));<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>    <span class="hljs-comment">// 关键API2</span><br>        AssetDatabase.CreateAsset(ob, path);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    <categories>
      
      <category>计算机</category>
      
      <category>有用的代码库</category>
      
      <category>Unity 代码库</category>
      
    </categories>
    
    
    <tags>
      
      <tag>article</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SpringAOP的基本概念和使用</title>
    <link href="/2023/08/31/IOC-%E6%8E%A7%E5%88%B6%E5%8F%8D%E8%BD%AC/"/>
    <url>/2023/08/31/IOC-%E6%8E%A7%E5%88%B6%E5%8F%8D%E8%BD%AC/</url>
    
    <content type="html"><![CDATA[<h2 id="IOC容器"><a href="#IOC容器" class="headerlink" title="IOC容器"></a>IOC容器</h2><h3 id="什么是IOC容器"><a href="#什么是IOC容器" class="headerlink" title="什么是IOC容器"></a>什么是IOC容器</h3><p>将对象的创建交给Spring进行管理，这个管理众多的对象的容器就叫做IOC容器，由于在一般代码中，我们容易依赖很多对象，造成耦合度过高，用这种方式进行统一管理可以降低耦合度。</p><h3 id="IOC底层"><a href="#IOC底层" class="headerlink" title="IOC底层"></a>IOC底层</h3><p>xml解析，工厂模式，反射</p><h3 id="Spring提供的IOC容器实现的两种方式"><a href="#Spring提供的IOC容器实现的两种方式" class="headerlink" title="Spring提供的IOC容器实现的两种方式"></a>Spring提供的IOC容器实现的两种方式</h3><p>BeanFactory接口：IOC容器基本实现是Spring内部接口的使用接口，不提供给开发人员进行使用（加载配置文件时候不会创建对象，在获取对象时才会创建对象。）</p><p>一般我们采用下面这种方式进行加载</p><p>ApplicationContext接口：BeanFactory接口的子接口，提供更多更强大的功能，提供给开发人员使用（加载配置文件时候就会把在配置文件对象进行创建）</p><h2 id="IOC容器-Bean管理"><a href="#IOC容器-Bean管理" class="headerlink" title="IOC容器-Bean管理"></a>IOC容器-Bean管理</h2><h3 id="何谓Bean管理"><a href="#何谓Bean管理" class="headerlink" title="何谓Bean管理"></a>何谓Bean管理</h3><ol><li>Spring创建对象</li><li>Spring注入属性</li></ol><h3 id="怎么使用"><a href="#怎么使用" class="headerlink" title="怎么使用"></a>怎么使用</h3><ol><li>需要在xml里面进行对象的创建和属性的注入</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--对象的创建--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;user&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.company.User&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 属性的注入 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;bproperty&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;bvalue&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;book&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.example.order&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">name</span> = <span class="hljs-string">&quot;oname&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;Hello&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">constructor-arg</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">name</span> = <span class="hljs-string">&quot;address&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;china&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">constructor-arg</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><ol start="2"><li>需要设置被注入的类</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Btest</span>&#123;<br>    <span class="hljs-keyword">private</span> String bproperty;<br>    <span class="hljs-comment">//设置注入的属性需要设置其set方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setBproperty</span><span class="hljs-params">(String bproperty)</span>&#123;<br>        <span class="hljs-built_in">this</span>.bproperty = bproperty;<br>    &#125;<br>&#125;<br><span class="hljs-comment">// 构造函数的注入</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Order</span> &#123;<br>    <span class="hljs-keyword">private</span> String oname;<br>    <span class="hljs-keyword">private</span> String address;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Orders</span><span class="hljs-params">(String oname,String address)</span>&#123;<br>        <span class="hljs-built_in">this</span>.oname=oname;<br>        <span class="hljs-built_in">this</span>.address=address;<br>    &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="进阶"><a href="#进阶" class="headerlink" title="进阶"></a>进阶</h3><ol><li>命名空间注入</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--1、添加p名称空间在配置文件头部--&gt;</span><br><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:p</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/p&quot;</span>&lt;!<span class="hljs-attr">--在这里添加一行p--</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--2、在bean标签进行属性注入（算是set方式注入的简化操作）--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;book&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.atguigu.spring5.Book&quot;</span> <span class="hljs-attr">p:bname</span>=<span class="hljs-string">&quot;very&quot;</span> <span class="hljs-attr">p:bauthor</span>=<span class="hljs-string">&quot;good&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><br><br></code></pre></td></tr></table></figure><ol start="2"><li>注入空值</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;book&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.atguigu.spring5.Book&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--（1）null值--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;address&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">null</span>/&gt;</span><span class="hljs-comment">&lt;!--属性里边添加一个null标签--&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>  <br>    <span class="hljs-comment">&lt;!--（2）特殊符号赋值--&gt;</span><br>     <span class="hljs-comment">&lt;!--属性值包含特殊符号</span><br><span class="hljs-comment">       a 把&lt;&gt;进行转义 &amp;lt; &amp;gt;</span><br><span class="hljs-comment">       b 把带特殊符号内容写到CDATA</span><br><span class="hljs-comment">      --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;address&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>&lt;![CDATA[&lt;&lt;南京&gt;&gt;]]&gt;<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><ol start="3"><li>注入类</li></ol><p>类中有引用其他的类，需要被注入进来</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserService</span> &#123;<span class="hljs-comment">//service类</span><br><br>    <span class="hljs-comment">//创建UserDao类型属性，生成set方法</span><br>    <span class="hljs-keyword">private</span> UserDao userDao;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setUserDao</span><span class="hljs-params">(UserDao userDao)</span> &#123;<br>        <span class="hljs-built_in">this</span>.userDao = userDao;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;service add...............&quot;</span>);<br>        userDao.update();<span class="hljs-comment">//调用dao方法</span><br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserDaoImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UserDao</span> &#123;<span class="hljs-comment">//dao类</span><br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">update</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;dao update...........&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>配置文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--1 service和dao对象创建--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userService&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.atguigu.spring5.service.UserService&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--注入userDao对象</span><br><span class="hljs-comment">        name属性：类里面属性名称</span><br><span class="hljs-comment">        ref属性：创建userDao对象bean标签id值</span><br><span class="hljs-comment">    --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;userDao&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;userDaoImpl&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 可以理解成在bean的全局命名空间创建了一个类，让其被引用到上面了 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userDaoImpl&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.atguigu.spring5.dao.UserDaoImpl&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 因此上面也可以写成这个样子 作为局部变量--&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userService&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.atguigu.spring5.service.UserService&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;userDao&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userService&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.atguigu.spring5.service.UserService&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span>l<br></code></pre></td></tr></table></figure><p>另外，在配置里面的属性如果是类的话，也还可以实现层级赋值</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml"> <span class="hljs-comment">&lt;!--级联赋值--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;emp&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.atguigu.spring5.bean.Emp&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--设置两个普通属性--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;ename&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;jams&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;gender&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;男&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--级联赋值--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dept&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;dept&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dept.dname&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;技术部门&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;dept&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.atguigu.spring5.bean.Dept&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><ol start="4"><li>注入集合</li></ol><p>还是老样子，需要先设置 set方法，设置一个需要被注入的类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//（1）创建类，定义数组、list、map、set 类型属性，生成对应 set 方法</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Stu</span> &#123;<br>    <span class="hljs-comment">//1 数组类型属性</span><br>    <span class="hljs-keyword">private</span> String[] courses;<br>    <span class="hljs-comment">//2 list集合类型属性</span><br>    <span class="hljs-keyword">private</span> List&lt;String&gt; list;<br>    <span class="hljs-comment">//3 map集合类型属性</span><br>    <span class="hljs-keyword">private</span> Map&lt;String,String&gt; maps;<br>    <span class="hljs-comment">//4 set集合类型属性</span><br>    <span class="hljs-keyword">private</span> Set&lt;String&gt; sets;<br>  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setSets</span><span class="hljs-params">(Set&lt;String&gt; sets)</span> &#123;<br>        <span class="hljs-built_in">this</span>.sets = sets;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setCourses</span><span class="hljs-params">(String[] courses)</span> &#123;<br>        <span class="hljs-built_in">this</span>.courses = courses;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setList</span><span class="hljs-params">(List&lt;String&gt; list)</span> &#123;<br>        <span class="hljs-built_in">this</span>.list = list;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setMaps</span><span class="hljs-params">(Map&lt;String, String&gt; maps)</span> &#123;<br>        <span class="hljs-built_in">this</span>.maps = maps;<br>    &#125;<br></code></pre></td></tr></table></figure><p>进行配置 关键词： map array list</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--（2）在 spring 配置文件进行配置--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;stu&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.atguigu.spring5.collectiontype.Stu&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--数组类型属性注入--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;courses&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">array</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>java课程<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>数据库课程<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">array</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--list类型属性注入--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;list&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">list</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>张三<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>小三<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">list</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--map类型属性注入--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;maps&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">map</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">entry</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;JAVA&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;java&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">entry</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">entry</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;PHP&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;php&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">entry</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">map</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--set类型属性注入--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;sets&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">set</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>MySQL<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>Redis<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">set</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="工厂Bean"><a href="#工厂Bean" class="headerlink" title="工厂Bean"></a>工厂Bean</h3><p>什么是工厂bean</p><p>普通 bean：在配置文件中定义 bean 类型就是返回类型</p><p>工厂 bean：在配置文件定义 bean 类型可以和返回类型不一样 第一步 创建类，让这个类作为工厂 bean，实现接口 FactoryBean 第二步 实现接口里面的方法，在实现的方法中定义返回的 bean 类型</p><p>基本使用</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;myBean&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.atguigu.spring5.factorybean.MyBean&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyBean</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">FactoryBean</span>&lt;Course&gt; &#123;<br><br>    <span class="hljs-comment">//定义返回bean</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Course <span class="hljs-title function_">getObject</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">Course</span> <span class="hljs-variable">course</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Course</span>();<br>        course.setCname(<span class="hljs-string">&quot;abc&quot;</span>);<br>        <span class="hljs-keyword">return</span> course;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test3</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-comment">// 使用的时候调用getBean 即可得到工厂类</span><br> <span class="hljs-type">ApplicationContext</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span><br> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPathXmlApplicationContext</span>(<span class="hljs-string">&quot;bean3.xml&quot;</span>);<br><span class="hljs-comment">//返回值类型可以不是定义的bean类型！</span><br> <span class="hljs-type">Course</span> <span class="hljs-variable">course</span> <span class="hljs-operator">=</span> context.getBean(<span class="hljs-string">&quot;myBean&quot;</span>, Course.class);<br> System.out.println(course);<br>&#125;<br><br><br></code></pre></td></tr></table></figure><h3 id="bean的生命周期"><a href="#bean的生命周期" class="headerlink" title="bean的生命周期"></a>bean的生命周期</h3><ul><li><p>通过构造器创建 bean 实例（无参数构造）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 这个是创建了 Spring实例</span><br><span class="hljs-type">ApplicationContext</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span><br><span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPathXmlApplicationContext</span>(<span class="hljs-string">&quot;bean3.xml&quot;</span>);<br><span class="hljs-comment">// 就是这段话，实际上是调用了 其中bean的构造方法创建了实例</span><br><span class="hljs-type">Course</span> <span class="hljs-variable">course</span> <span class="hljs-operator">=</span> context.getBean(<span class="hljs-string">&quot;myBean&quot;</span>, Course.class);<br></code></pre></td></tr></table></figure></li><li><p>为 bean 的属性设置值和对其他 bean 引用（调用 set 方法）</p></li><li><p>bean 的初始化的方法（需要进行配置初始化的方法）</p></li><li><p>bean 可以使用了（对象获取到了）</p></li><li><p>当容器关闭时候，调用 bean 的销毁的方法（需要进行配置销毁的方法）</p></li><li><p>&#96;&#96;&#96;java<br>Course course &#x3D; context.getBean(“myBean”, Course.class);<br> public class Orders {<br>     &#x2F;&#x2F;无参数构造<br>     public Orders() {<br>         System.out.println(“第一步 执行无参数构造创建 bean 实例”);<br>     }<br>     private String oname;<br>     public void setOname(String oname) {<br>     this.oname &#x3D; oname;<br>     System.out.println(“第二步 调用 set 方法设置属性值”);<br>     }<br>     &#x2F;&#x2F;创建执行的初始化的方法<br>     public void initMethod() {<br>     System.out.println(“第三步 执行初始化的方法”);<br>     }<br>     &#x2F;&#x2F;创建执行的销毁的方法<br>     public void destroyMethod() {<br>     System.out.println(“第五步 执行销毁的方法”);<br>     }<br>}</p><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs processing"><br>除了以上的方法外，还可以调用一些不常见的生命周期，不过前提是要实现接口<br><br>```java<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyBeanPost</span> implements BeanPostProcessor &#123;<span class="hljs-comment">//创建后置处理器实现类</span><br>    @Override<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">Object</span> <span class="hljs-title function_">postProcessBeforeInitialization</span>(<span class="hljs-built_in">Object</span> bean, <span class="hljs-built_in">String</span> beanName) <span class="hljs-keyword">throws</span> BeansException &#123;<br>        System.<span class="hljs-property">out</span>.<span class="hljs-property">println</span>(<span class="hljs-string">&quot;在初始化之前执行的方法&quot;</span>);<br>        <span class="hljs-keyword">return</span> bean;<br>    &#125;<br>    @Override<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">Object</span> <span class="hljs-title function_">postProcessAfterInitialization</span>(<span class="hljs-built_in">Object</span> bean, <span class="hljs-built_in">String</span> beanName) <span class="hljs-keyword">throws</span> BeansException &#123;<br>        System.<span class="hljs-property">out</span>.<span class="hljs-property">println</span>(<span class="hljs-string">&quot;在初始化之后执行的方法&quot;</span>);<br>        <span class="hljs-keyword">return</span> bean;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--配置文件的bean参数配置--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;orders&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.atguigu.spring5.bean.Orders&quot;</span> <span class="hljs-attr">init-method</span>=<span class="hljs-string">&quot;initMethod&quot;</span> <span class="hljs-attr">destroy-method</span>=<span class="hljs-string">&quot;destroyMethod&quot;</span>&gt;</span><span class="hljs-comment">&lt;!--配置初始化方法和销毁方法--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;oname&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;手机&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><span class="hljs-comment">&lt;!--这里就是通过set方式（注入属性）赋值--&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--配置后置处理器--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;myBeanPost&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.atguigu.spring5.bean.MyBeanPost&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><p>配置了后处理器的生命完整周期</p><p>​ （1）通过构造器创建 bean 实例（无参数构造）</p><p>​ （2）为 bean 的属性设置值和对其他 bean 引用（调用 set 方法）</p><p>​ （3）把 bean 实例传递 bean 后置处理器的方法 postProcessBeforeInitialization</p><p>​ （4）调用 bean 的初始化的方法（需要进行配置初始化的方法）</p><p>​ （5）把 bean 实例传递 bean 后置处理器的方法 postProcessAfterInitialization</p><p>​ （6）bean 可以使用了（对象获取到了）</p><p> （7）当容器关闭时候，调用 bean 的销毁的方法（需要进行配置销毁的方法）</p><h3 id="IOC-操作-Bean-管理-外部属性文件"><a href="#IOC-操作-Bean-管理-外部属性文件" class="headerlink" title="IOC 操作 Bean 管理(外部属性文件)"></a>IOC 操作 Bean 管理(外部属性文件)</h3><p>必要性</p><p>实际项目中极有可能是策划等人员将各类配置在外部，需要开发人员进行读取。</p><p><strong>直接配置数据库信息</strong></p><p>（1）配置Druid（德鲁伊）连接池 </p><p>（2）引入Druid（德鲁伊）连接池依赖 jar 包</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;dataSource&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driverClassName&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;com.mysql.jdbc.Driver&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;jdbc:mysql://localhost:3306/userDb&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;root&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;root&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><p>通过配置文件配置数据库信息</p><p><strong>配置数据库信息</strong></p><ol><li>创建外部属性文件，properties 格式文件，写数据库信息（ <strong>jdbc.properties</strong> ）</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml">prop.driverClass=com.mysql.jdbc.Driver<br> prop.url=jdbc:mysql://localhost:3306/userDb<br> prop.userName=root<br> prop.password=root<br></code></pre></td></tr></table></figure><ol start="2"><li>把外部 properties 属性文件引入到 spring 配置文件中 —— 引入 context 名称空间</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/context&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span><br><span class="hljs-string"><span class="hljs-tag">                           http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span><span class="hljs-comment">&lt;!--引入context名称空间--&gt;</span><br>  <br>        <span class="hljs-comment">&lt;!--引入外部属性文件--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">context:property-placeholder</span> <span class="hljs-attr">location</span>=<span class="hljs-string">&quot;classpath:jdbc.properties&quot;</span>/&gt;</span><br><br>    <span class="hljs-comment">&lt;!--配置连接池--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;dataSource&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driverClassName&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;prop.driverClass&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;prop.url&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;prop.userName&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;prop.password&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="IOC容器注解方式管理"><a href="#IOC容器注解方式管理" class="headerlink" title="IOC容器注解方式管理"></a>IOC容器注解方式管理</h2><h3 id="什么是注解"><a href="#什么是注解" class="headerlink" title="什么是注解"></a>什么是注解</h3><p>（1）注解是代码特殊标记，格式：@注解名称(属性名称&#x3D;属性值, 属性名称&#x3D;属性值…)</p><p>​ （2）使用注解，注解作用在类上面，方法上面，属性上面</p><p>​ （3）使用注解目的：简化 xml 配置</p><h3 id="Spring-针对-Bean-管理中创建对象提供注解"><a href="#Spring-针对-Bean-管理中创建对象提供注解" class="headerlink" title="Spring 针对 Bean 管理中创建对象提供注解"></a>Spring 针对 Bean 管理中创建对象提供注解</h3><p> 下面四个注解功能是一样的，都可以用来<strong>创建 bean 实例</strong></p><p> （1）@Component</p><p>​ （2）@Service</p><p>​ （3）@Controller</p><p>​ （4）@Repository</p><h3 id="基于注解方式实现对象创建"><a href="#基于注解方式实现对象创建" class="headerlink" title="基于注解方式实现对象创建"></a>基于注解方式实现对象创建</h3><p>​ 第一步 引入依赖 （引入 <strong>spring-aop jar包</strong> ）</p><p>​ 第二步 开启组件扫描</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--开启组件扫描</span><br><span class="hljs-comment"> 1 如果扫描多个包，多个包使用逗号隔开</span><br><span class="hljs-comment"> 2 扫描包上层目录</span><br><span class="hljs-comment">--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;com.atguigu&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">context:component-scan</span>&gt;</span><br></code></pre></td></tr></table></figure><p> 第三步 创建类，在类上面添加创建对象注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//在注解里面 value 属性值可以省略不写，</span><br><span class="hljs-comment">//默认值是类名称，首字母小写</span><br><span class="hljs-comment">//UserService -- userService</span><br><span class="hljs-comment">//注解等同于XML配置文件：&lt;bean id=&quot;userService&quot; class=&quot;..&quot;/&gt;</span><br><span class="hljs-meta">@Component(value = &quot;userService&quot;)</span> <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserService</span> &#123;<br>     <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">()</span> &#123;<br>     System.out.println(<span class="hljs-string">&quot;service add.......&quot;</span>);<br>     &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="开启组件扫描细节配置"><a href="#开启组件扫描细节配置" class="headerlink" title="开启组件扫描细节配置"></a>开启组件扫描细节配置</h3><p>这里配置了有关组件的筛选控制，可以排除哪些内容不进行扫描</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--示例 1</span><br><span class="hljs-comment"> use-default-filters=&quot;false&quot; 表示现在不使用默认 filter，自己配置 filter</span><br><span class="hljs-comment"> context:include-filter ，设置扫描哪些内容</span><br><span class="hljs-comment">--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;com.atguigu&quot;</span> <span class="hljs-attr">use-defaultfilters</span>=<span class="hljs-string">&quot;false&quot;</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">context:include-filter</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;annotation&quot;</span></span><br><span class="hljs-tag"></span><br><span class="hljs-tag"><span class="hljs-attr">expression</span>=<span class="hljs-string">&quot;org.springframework.stereotype.Controller&quot;</span>/&gt;</span><span class="hljs-comment">&lt;!--代表只扫描Controller注解的类--&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">context:component-scan</span>&gt;</span><br><span class="hljs-comment">&lt;!--示例 2</span><br><span class="hljs-comment"> 下面配置扫描包所有内容</span><br><span class="hljs-comment"> context:exclude-filter： 设置哪些内容不进行扫描</span><br><span class="hljs-comment">--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;com.atguigu&quot;</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">context:exclude-filter</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;annotation&quot;</span></span><br><span class="hljs-tag"></span><br><span class="hljs-tag"><span class="hljs-attr">expression</span>=<span class="hljs-string">&quot;org.springframework.stereotype.Controller&quot;</span>/&gt;</span><span class="hljs-comment">&lt;!--表示Controller注解的类之外一切都进行扫描--&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">context:component-scan</span>&gt;</span><br><br></code></pre></td></tr></table></figure><h3 id="基于注解方式实现属性注入"><a href="#基于注解方式实现属性注入" class="headerlink" title="基于注解方式实现属性注入"></a>基于注解方式实现属性注入</h3><p>自动装配,只要外部bean配置有公共空间的类即可实现自动注入，前提是只有这一个类，无其他实现该类的接口或者子类。</p><p>如果这个类有接口，那么可以使用 @Qualifier 和 @Resource 进行注入。 前者根据类型，后者根据类型或者名称。但是后者不太推荐，因为这个是Java本身的包。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//定义需要注入的类，并加上注入注解</span><br><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserService</span>&#123;<br><span class="hljs-comment">//定义一个对象属性</span><br><span class="hljs-comment">//需要加上自动装配的注解</span><br><span class="hljs-meta">@Autowired</span><br><span class="hljs-meta">@Qualifier(value = &quot;userDaoImpl1&quot;)</span> <br><span class="hljs-comment">//@Resource(name = &quot;userDaoImpl1&quot;)</span><br><span class="hljs-keyword">private</span> UserDao userDao;<br>&#125;<br><span class="hljs-comment">//普通类型可以采用这种方式进行注入</span><br><span class="hljs-meta">@Value(value=&quot;abc&quot;)</span><br><span class="hljs-keyword">private</span> String name;<br><span class="hljs-comment">//定义一个实现上面引用的类</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserDaoImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UserDao</span>&#123;<br><span class="hljs-meta">@override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">()</span>&#123;&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="完全注解开发"><a href="#完全注解开发" class="headerlink" title="完全注解开发"></a>完全注解开发</h3><p>（1）创建配置类，替代 xml 配置文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span> <span class="hljs-comment">//作为配置类，替代 xml 配置文件</span><br><span class="hljs-comment">//扫描这个包里面所有的内容</span><br><span class="hljs-meta">@ComponentScan(basePackages = &#123;&quot;com.atguigu&quot;&#125;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SpringConfig</span> &#123;<br><br>&#125;<br></code></pre></td></tr></table></figure><p> （2）编写测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testService2</span><span class="hljs-params">()</span> &#123;<br> <span class="hljs-comment">//加载配置类 ， 这里和以前不一样的是访问了类</span><br> ApplicationContext context<br><span class="hljs-comment">//这一行和以前不一样</span><br> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">AnnotationConfigApplicationContext</span>(SpringConfig.class);<br> <span class="hljs-type">UserService</span> <span class="hljs-variable">userService</span> <span class="hljs-operator">=</span> context.getBean(<span class="hljs-string">&quot;userService&quot;</span>,<br>UserService.class);<br> System.out.println(userService);<br> userService.add();<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>计算机</category>
      
      <category>后端</category>
      
      <category>Java</category>
      
      <category>Spring</category>
      
      <category>SpringAOP</category>
      
    </categories>
    
    
    <tags>
      
      <tag>article</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Addressable 的加载资源原理</title>
    <link href="/2023/08/31/Addressable%20%E7%9A%84%E5%8A%A0%E8%BD%BD%E8%B5%84%E6%BA%90%E5%8E%9F%E7%90%86/"/>
    <url>/2023/08/31/Addressable%20%E7%9A%84%E5%8A%A0%E8%BD%BD%E8%B5%84%E6%BA%90%E5%8E%9F%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h3 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h3><p>Addressable 的加载主要由Manager类，Provider类和AsynchOperation负责。<br>Addressable 开放给开发者的LoadAssetsAsync方法执行后，先是执行了Manager类的方法，在里面先定位了资源的位置信息，随后分发创建具体的Provider类，由Provider类根据资源的类型再创建具体的asyncOperation类创建异步操作，随之完成加载。</p><h3 id="具体流程"><a href="#具体流程" class="headerlink" title="具体流程"></a>具体流程</h3><p>Addressable  是一个外观类，负责调用各类接口类实现实际操作，其中 AddressableImpl 负责了资源的调度。<br>资源的加载过程如下</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">AsyncOperationHandle</span>&lt;<span class="hljs-title">TObject</span>&gt; <span class="hljs-title">LoadAssetAsync</span>&lt;<span class="hljs-title">TObject</span>&gt;(<span class="hljs-params">IResourceLocation location</span>)</span><br>&#123;<br>    <span class="hljs-keyword">return</span> TrackHandle(ResourceManager.ProvideResource&lt;TObject&gt;(location));<br>&#125;<br></code></pre></td></tr></table></figure><p>资源加载的核心就在这个 ProvideResource方法中。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-function"><span class="hljs-keyword">private</span> AsyncOperationHandle <span class="hljs-title">ProvideResource</span>(<span class="hljs-params">IResourceLocation location, Type desiredType = <span class="hljs-literal">null</span></span>)</span><br>&#123;<br>    ...<br>    <span class="hljs-comment">// ### 获得ResourceProvider</span><br>    IResourceProvider provider = <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">if</span> (desiredType == <span class="hljs-literal">null</span>)<br>    &#123;<br>        provider = GetResourceProvider(desiredType, location);<br>        ...<br>        desiredType = provider.GetDefaultType(location);<br>    &#125;<br><br>    <span class="hljs-comment">// ###  获得AsyncOperation</span><br>    IAsyncOperation op;<br>    <span class="hljs-built_in">int</span> hash = location.Hash(desiredType);<br>    <span class="hljs-keyword">if</span> (m_AssetOperationCache.TryGetValue(hash, <span class="hljs-keyword">out</span> op))<br>    &#123;<br>        op.IncrementReferenceCount();<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> AsyncOperationHandle(op);<br>    &#125;<br><br>    <span class="hljs-comment">// ###  获得desiredType对应的AsyncOperation类型</span><br>    Type provType;<br>    <span class="hljs-keyword">if</span> (!m_ProviderOperationTypeCache.TryGetValue(desiredType, <span class="hljs-keyword">out</span> provType))<br>        m_ProviderOperationTypeCache.Add(desiredType, provType = <span class="hljs-keyword">typeof</span>(ProviderOperation&lt;&gt;).MakeGenericType(<span class="hljs-keyword">new</span> Type[] &#123; desiredType &#125;));<br><br>    <span class="hljs-comment">// ### 创建AsyncOperation  这个op的类型是 ProviderOperation </span><br>    op = CreateOperation&lt;IAsyncOperation&gt;(provType, provType.GetHashCode(), hash, m_ReleaseOpCached);<br><br>    <span class="hljs-comment">// ### 创建依赖项的AsyncOperation</span><br>    <span class="hljs-built_in">int</span> depHash = location.DependencyHashCode;<br>    <span class="hljs-keyword">var</span> depOp = location.HasDependencies ? ProvideResourceGroupCached(location.Dependencies, depHash, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>) : <span class="hljs-literal">default</span>(AsyncOperationHandle&lt;IList&lt;AsyncOperationHandle&gt;&gt;);<br>    <span class="hljs-keyword">if</span> (provider == <span class="hljs-literal">null</span>)<br>        provider = GetResourceProvider(desiredType, location);<br><br>    <span class="hljs-comment">// ### 初始化AsyncOperation 整合刚才的操作步骤资源。 诸如当前资源的加载，依赖资源的加载。</span><br>    ((IGenericProviderOperation)op).Init(<span class="hljs-keyword">this</span>, provider, location, depOp);<br><br>    <span class="hljs-comment">// ### 开始异步加载 最终会执行 的方法是 IResourceProvider 的Provide方法， 并且通过AysncOperation</span><br>    <span class="hljs-comment">// 这个中介来向外暴露拉取情况</span><br>    <span class="hljs-keyword">var</span> handle = StartOperation(op, depOp);<br>    ...<br>    <span class="hljs-keyword">return</span> handle;<br>&#125;<br></code></pre></td></tr></table></figure><p>步骤如下：</p><ol><li>根据路径信息获取到路径的类型，并得到相应的Provider，Provider 是专门负责某一类资源的加载，负责直接对接 AssetsBundle 或是其他的资源类。</li><li>生成 AsyncOperation 类，该类用于通知当前资源的加载情况。</li><li>加载当前路径下依赖的其他的资源</li><li>将以上的内容整合进一个 ProviderOperation类中，并由它分发给具体的IResource 进行执行，根据情况调用 asyncOperation 的结果callback等。</li></ol>]]></content>
    
    
    <categories>
      
      <category>计算机</category>
      
      <category>Game</category>
      
      <category>框架源码分析</category>
      
      <category>Addressable</category>
      
      <category>系统</category>
      
    </categories>
    
    
    <tags>
      
      <tag>article</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JdbcTemplate</title>
    <link href="/2023/08/31/JdbcTemplate/"/>
    <url>/2023/08/31/JdbcTemplate/</url>
    
    <content type="html"><![CDATA[<h2 id="JdbcTemplate概念及使用"><a href="#JdbcTemplate概念及使用" class="headerlink" title="JdbcTemplate概念及使用"></a>JdbcTemplate概念及使用</h2><p>​ a）Spring 框架对 JDBC 进行封装，使用 JdbcTemplate 方便实现对数据库操作</p><p>​ b）引入相关 jar 包</p><p> c）在 spring 配置文件配置<strong>数据库连接池xml</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;dataSource&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span></span><br><span class="hljs-tag"> <span class="hljs-attr">destroy-method</span>=<span class="hljs-string">&quot;close&quot;</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;jdbc:mysql:///test&quot;</span> /&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;root&quot;</span> /&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;root&quot;</span> /&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driverClassName&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;com.mysql.jdbc.Driver&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><p> d）配置 JdbcTemplate 对象，注入 DataSource</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- JdbcTemplate 对象 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;jdbcTemplate&quot;</span> </span><br><span class="hljs-tag"><span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.jdbc.core.JdbcTemplate&quot;</span>&gt;</span><br> <span class="hljs-comment">&lt;!--注入 dataSource--&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dataSource&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;dataSource&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-comment">&lt;!--set方式注入--&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><p>e）创建 service 类，创建 dao 类，在 dao 注入 jdbcTemplate 对象</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 组件扫描 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;com.atguigu&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">context:component-scan</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BookService</span> &#123;<br> <span class="hljs-comment">//注入 dao</span><br> <span class="hljs-meta">@Autowired</span><br> <span class="hljs-keyword">private</span> BookDao bookDao;<br>&#125;<br><br><span class="hljs-meta">@Repository</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BookDaoImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">BookDao</span> &#123;<br> <span class="hljs-comment">//注入 JdbcTemplate</span><br> <span class="hljs-meta">@Autowired</span><br> <span class="hljs-keyword">private</span> JdbcTemplate jdbcTemplate;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="JdbcTemplate-操作数据库（添加）"><a href="#JdbcTemplate-操作数据库（添加）" class="headerlink" title="JdbcTemplate 操作数据库（添加）"></a>JdbcTemplate 操作数据库（添加）</h2><p>​ a）对应数据库创建实体类</p><p>​ b）创建service和dao</p><p>​ （1）在 dao 进行数据库添加操作</p><p>​ （2）调用 JdbcTemplate 对象里面 update 方法实现添加操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Repository</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BookDaoImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">BookDao</span> &#123;<br> <span class="hljs-comment">//注入 JdbcTemplate</span><br> <span class="hljs-meta">@Autowired</span><br> <span class="hljs-keyword">private</span> JdbcTemplate jdbcTemplate;<br> <span class="hljs-comment">//添加的方法</span><br> <span class="hljs-meta">@Override</span><br> <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">(Book book)</span> &#123;<br> <span class="hljs-comment">//1 创建 sql 语句</span><br> <span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;insert into t_book values(?,?,?)&quot;</span>;<br> <span class="hljs-comment">//2 调用方法实现</span><br> Object[] args = &#123;book.getUserId(), book.getUsername(),book.getUstatus()&#125;;<br> <span class="hljs-type">int</span> <span class="hljs-variable">update</span> <span class="hljs-operator">=</span> jdbcTemplate.update(sql,args);<br> System.out.println(update);<br> &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="JdbcTemplate-操作数据库（修改和删除）"><a href="#JdbcTemplate-操作数据库（修改和删除）" class="headerlink" title="JdbcTemplate 操作数据库（修改和删除）"></a>JdbcTemplate 操作数据库（修改和删除）</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//1、修改</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">updateBook</span><span class="hljs-params">(Book book)</span> &#123;<br> <span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;update t_book set username=?,ustatus=? where user_id=?&quot;</span>;<br> Object[] args = &#123;book.getUsername(), book.getUstatus(),book.getUserId()&#125;;<br> <span class="hljs-type">int</span> <span class="hljs-variable">update</span> <span class="hljs-operator">=</span> jdbcTemplate.update(sql, args);<br> System.out.println(update);<br>&#125;<br><span class="hljs-comment">//2、删除</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">delete</span><span class="hljs-params">(String id)</span> &#123;<br> <span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;delete from t_book where user_id=?&quot;</span>;<br> <span class="hljs-type">int</span> <span class="hljs-variable">update</span> <span class="hljs-operator">=</span> jdbcTemplate.update(sql, id);<br> System.out.println(update);<br>&#125;<br><span class="hljs-comment">//使用JdbcTemplate 模板所实现的 “增删改” 都是调用了同一个 “update” 方法</span><br></code></pre></td></tr></table></figure><h2 id="JdbcTemplate-操作数据库（查询返回某个值）"><a href="#JdbcTemplate-操作数据库（查询返回某个值）" class="headerlink" title="JdbcTemplate 操作数据库（查询返回某个值）"></a>JdbcTemplate 操作数据库（查询返回某个值）</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//查询表记录数</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">selectCount</span><span class="hljs-params">()</span> &#123;<br> <span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;select count(*) from t_book&quot;</span>;<br><span class="hljs-comment">//queryForObject方法中：第一个参数代表--sql语句；第二个参数代表--返回类型class  </span><br> <span class="hljs-type">Integer</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> jdbcTemplate.queryForObject(sql, Integer.class);<br> <span class="hljs-keyword">return</span> count;<br>&#125;<br>JdbcTemplate 操作数据库（<br></code></pre></td></tr></table></figure><h2 id="JdbcTemplate-操作数据库（查询返回对象）"><a href="#JdbcTemplate-操作数据库（查询返回对象）" class="headerlink" title="JdbcTemplate 操作数据库（查询返回对象）"></a>JdbcTemplate 操作数据库（查询返回对象）</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//查询返回对象</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> Book <span class="hljs-title function_">findBookInfo</span><span class="hljs-params">(String id)</span> &#123;<br> <span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;select * from t_book where user_id=?&quot;</span>;<br> <span class="hljs-comment">//调用方法</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">queryForObject方法中：</span><br><span class="hljs-comment">第一个参数：sql语句</span><br><span class="hljs-comment">第二个参数：RowMapper 是接口，针对返回不同类型数据，使用这个接口里面 实现类 完成数据封装</span><br><span class="hljs-comment">第三个参数：sql 语句值</span><br><span class="hljs-comment">*/</span><br> <span class="hljs-type">Book</span> <span class="hljs-variable">book</span> <span class="hljs-operator">=</span> jdbcTemplate.queryForObject(sql, <span class="hljs-keyword">new</span> <span class="hljs-title class_">BeanPropertyRowMapper</span>&lt;Book&gt;(Book.class), id);<br> <span class="hljs-keyword">return</span> book;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="JdbcTemplate-操作数据库（查询返回集合）"><a href="#JdbcTemplate-操作数据库（查询返回集合）" class="headerlink" title="JdbcTemplate 操作数据库（查询返回集合）"></a>JdbcTemplate 操作数据库（查询返回集合）</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//所用场景：查询图书列表分页、、</span><br><span class="hljs-comment">//查询返回集合</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> List&lt;Book&gt; <span class="hljs-title function_">findAllBook</span><span class="hljs-params">()</span> &#123;<br> <span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;select * from t_book&quot;</span>;<br> <span class="hljs-comment">//调用方法</span><br> List&lt;Book&gt; bookList = jdbcTemplate.query(sql, <span class="hljs-keyword">new</span> <span class="hljs-title class_">BeanPropertyRowMapper</span>&lt;Book&gt;(Book.class));<br> <span class="hljs-keyword">return</span> bookList;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="JdbcTemplate-操作数据库（批量操作）"><a href="#JdbcTemplate-操作数据库（批量操作）" class="headerlink" title="JdbcTemplate 操作数据库（批量操作）"></a>JdbcTemplate 操作数据库（批量操作）</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//批量添加</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">batchAddBook</span><span class="hljs-params">(List&lt;Object[]&gt; batchArgs)</span> &#123;<br> <span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;insert into t_book values(?,?,?)&quot;</span>;<br><span class="hljs-comment">//batchUpdate方法 第一个参数：sql语句第二个参数：List集合，添加多条记录数据</span><br> <span class="hljs-type">int</span>[] ints = jdbcTemplate.batchUpdate(sql, batchArgs);<br> System.out.println(Arrays.toString(ints));<br>&#125;<br><br><span class="hljs-comment">//批量添加测试</span><br>List&lt;Object[]&gt; batchArgs = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>Object[] o1 = &#123;<span class="hljs-string">&quot;3&quot;</span>,<span class="hljs-string">&quot;java&quot;</span>,<span class="hljs-string">&quot;a&quot;</span>&#125;;<br>Object[] o2 = &#123;<span class="hljs-string">&quot;4&quot;</span>,<span class="hljs-string">&quot;c++&quot;</span>,<span class="hljs-string">&quot;b&quot;</span>&#125;;<br>Object[] o3 = &#123;<span class="hljs-string">&quot;5&quot;</span>,<span class="hljs-string">&quot;MySQL&quot;</span>,<span class="hljs-string">&quot;c&quot;</span>&#125;;<br>batchArgs.add(o1);<br>batchArgs.add(o2);<br>batchArgs.add(o3);<br><span class="hljs-comment">//调用批量添加</span><br>bookService.batchAdd(batchArgs);<br></code></pre></td></tr></table></figure><h2 id="JdbcTemplate-实现批量修改操作"><a href="#JdbcTemplate-实现批量修改操作" class="headerlink" title="JdbcTemplate 实现批量修改操作"></a>JdbcTemplate 实现批量修改操作</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//批量修改(同批量添加一样，调用同一个方法)</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">batchUpdateBook</span><span class="hljs-params">(List&lt;Object[]&gt; batchArgs)</span> &#123;<br> <span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;update t_book set username=?,ustatus=? where user_id=?&quot;</span>;<br> <span class="hljs-type">int</span>[] ints = jdbcTemplate.batchUpdate(sql, batchArgs);<br> System.out.println(Arrays.toString(ints));<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>计算机</category>
      
      <category>后端</category>
      
      <category>Java</category>
      
      <category>Spring</category>
      
      <category>SpringAOP</category>
      
    </categories>
    
    
    <tags>
      
      <tag>article</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SpringAOP的基本概念和使用</title>
    <link href="/2023/08/30/SpringAOP%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5%E5%92%8C%E4%BD%BF%E7%94%A8/"/>
    <url>/2023/08/30/SpringAOP%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5%E5%92%8C%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h2 id="AOP-基本概念"><a href="#AOP-基本概念" class="headerlink" title="AOP 基本概念"></a>AOP 基本概念</h2><p>(1)面向切面编程（方面），利用 AOP 可以对业务逻辑的各个部分进行隔离，从而使得 业务逻辑各部分之间的耦合度降低，提高程序的可重用性，同时提高了开发的效率。<br>(2)通俗描述：<strong>不通过修改源代码方式，在主干功能里面添加新功能</strong><br>​(3)使用登录例子说明 AOP<br><img src="/2023/08/30/SpringAOP%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5%E5%92%8C%E4%BD%BF%E7%94%A8/image-20220221095713-kavhejk.png" alt="image.png"></p><h2 id="AOP（底层原理）"><a href="#AOP（底层原理）" class="headerlink" title="AOP（底层原理）"></a>AOP（底层原理）</h2><p>a）AOP 底层使用动态代理 ，动态代理有两种情况：</p><p>第一种 <strong>有接口情况，使用 JDK 动态代理</strong> ；</p><p>创建 <strong>接口实现类代理对象</strong> ，增强类的方法</p><p>这样如果想要新增内容</p><p><img src="/2023/08/30/SpringAOP%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5%E5%92%8C%E4%BD%BF%E7%94%A8/image-20220221100038-ugxu7ow.png" alt="image.png"></p><p>第二种 没有接口情况，使用  <strong>CGLIB 动态代理</strong> ；</p><p>创建 <strong>子类的代理对象</strong> ，增强类的方法</p><p><img src="/2023/08/30/SpringAOP%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5%E5%92%8C%E4%BD%BF%E7%94%A8/image-20220221100229-42hgbwv.png" alt="image.png"></p><h2 id="AOP（JDK-动态代理）"><a href="#AOP（JDK-动态代理）" class="headerlink" title="AOP（JDK 动态代理）"></a>AOP（JDK 动态代理）</h2><p>1）使用 JDK 动态代理，使用 Proxy 类里面的方法创建代理对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 第一个是类加载器，增强方法</span><br><span class="hljs-comment">// 第二个是增强方法所在类的接口们</span><br><span class="hljs-comment">// 第三个是我们写的增强的类，实现上面的接口</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Object <span class="hljs-title function_">newProxyInstance</span><span class="hljs-params">(ClassLoader loader,</span><br><span class="hljs-params">Class&lt;?&gt;[] interface,InvocationHandler h)</span><br></code></pre></td></tr></table></figure><p> 2）编写 JDK 动态代理代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 模拟被增强类，被增强类的接口和增强的类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Duck</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Fly</span>,Yuck&#123;<br><span class="hljs-meta">@override</span>  <br>fly()&#123;&#125;<br><span class="hljs-meta">@override</span><br>yuck()&#123;&#125;<br>&#125; <br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Fly</span>&#123;<br>fly();<br>&#125;<br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Yuck</span>&#123;<br>yuck();<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">SpeakDuck</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">InvocationHandler</span>&#123;<br><br><span class="hljs-keyword">private</span> Object obj;<br><span class="hljs-keyword">public</span> <span class="hljs-title function_">SpeackDuck</span><span class="hljs-params">(Object obj)</span>&#123;<br><span class="hljs-built_in">this</span>.obj = obj;<br>&#125;<br><br><span class="hljs-meta">@override</span>  <br><span class="hljs-comment">//Method 指的是被增强的方法,后面的args就是它的参数</span><br><span class="hljs-keyword">public</span> Object <span class="hljs-title function_">invoke</span> <span class="hljs-params">(Object proxy,Method method,Object[] args)</span> <br><span class="hljs-keyword">throws</span> Throwable&#123;<br><span class="hljs-comment">//被增强的方法执行</span><br>method.invoke(obj,args);<br><span class="hljs-comment">//我们自定义的方法可以写在这下面，或者上面</span><br><br>&#125;<br><span class="hljs-meta">@override</span><br>yuck()&#123;<br>speak();<br>&#125;<br>speak()&#123;<br>System.out.println(<span class="hljs-string">&quot;I can speak&quot;</span>)<br>&#125;<br>&#125;<br><br><span class="hljs-comment">//使用的时候</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JDKproxy</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(Stringp[ args)</span>&#123;<br><span class="hljs-comment">// 创建接口实现类的代理对象</span><br>Class[] interfaces = &#123;Fly.class,Yuck.class&#125;;<br>Duck duck= <span class="hljs-keyword">new</span> <span class="hljs-title class_">Duck</span>;<br><span class="hljs-type">Yuck</span> <span class="hljs-variable">speakingDuck</span> <span class="hljs-operator">=</span>(Yuck)Proxy.newProxyInstance(<br>JDKProxy.class.getClassLoader(),interfaces,<span class="hljs-keyword">new</span> <span class="hljs-title class_">SpeakDuck</span>(duck));<br><span class="hljs-comment">// 下面这个对象就已经被增强了，可以随意调用其中接口的方法</span><br>speakingDuck.yuck();<br><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="AOP（术语）"><a href="#AOP（术语）" class="headerlink" title="AOP（术语）"></a>AOP（术语）</h2><p>​ a）连接点：类里面哪些方法可以被增强，这些方法称为连接点</p><p>​ b）切入点：实际被真正增强的方法称为切入点</p><p>​ c）通知（增强）：实际增强的逻辑部分称为通知，且分为以下五种类型：</p><p>​ 1）前置通知 2）后置通知 3）环绕通知 4）异常通知 5）最终通知</p><p> d）切面：把通知应用到切入点过程<br><br /></p><h2 id="AOP操作"><a href="#AOP操作" class="headerlink" title="AOP操作"></a>AOP操作</h2><p>​ a）Spring 框架一般都是基于 AspectJ 实现 AOP 操作，AspectJ 不是 Spring 组成部分，独立 AOP 框架，一般把 AspectJ 和 Spirng 框架一起使 用，进行 AOP 操作</p><p>​ b）基于 AspectJ 实现 AOP 操作：1）基于 xml 配置文件实现 （2）基于注解方式实现（使用）</p><p>​ c）引入相关jar包</p><p>​ d）切入点表达式，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java">（<span class="hljs-number">1</span>）切入点表达式作用：知道对哪个类里面的哪个方法进行增强 <br>（<span class="hljs-number">2</span>）语法结构： execution([权限修饰符] [返回类型] <br>[类全路径] [方法名称]([参数列表]) )<br>（<span class="hljs-number">3</span>）例子如下：<br>    例 <span class="hljs-number">1</span>：对 com.atguigu.dao.BookDao 类里面的 add 进行增强<br>execution(* com.atguigu.dao.BookDao.add(..))<br> 例 <span class="hljs-number">2</span>：对 com.atguigu.dao.BookDao 类里面的所有的方法进行增强<br>execution(* com.atguigu.dao.BookDao.* (..))<br>    例 <span class="hljs-number">3</span>：对 com.atguigu.dao 包里面所有类，类里面所有方法进行增强<br>execution(* com.atguigu.dao.*.* (..))<br></code></pre></td></tr></table></figure><h2 id="AOP-操作（AspectJ-注解）"><a href="#AOP-操作（AspectJ-注解）" class="headerlink" title="AOP 操作（AspectJ 注解）"></a>AOP 操作（AspectJ 注解）</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 创建一个类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> &#123;<br> <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">()</span>&#123;<br>  <br> &#125;<br><span class="hljs-comment">//增强类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserProxy</span>&#123;<br> <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">before</span><span class="hljs-params">()</span>&#123;&#125;<br>&#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--3、进行通知的配置--&gt;</span><br><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/context&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:aop</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/aop&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span><br><span class="hljs-string"><span class="hljs-tag">                        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd</span></span><br><span class="hljs-string"><span class="hljs-tag">                        http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 开启注解扫描 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;com.atguigu.spring5.aopanno&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">context:component-scan</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 开启Aspect生成代理对象--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">aop:aspectj-autoproxy</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">aop:aspectj-autoproxy</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//4、配置不同类型的通知</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@Aspect</span>  <span class="hljs-comment">//生成代理对象</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserProxy</span> &#123;<br>      <span class="hljs-comment">//相同切入点抽取</span><br>    <span class="hljs-meta">@Pointcut(value = &quot;execution(* com.atguigu.spring5.aopanno.User.add(..))&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">pointdemo</span><span class="hljs-params">()</span> &#123;<br><br>    &#125;<br><br>    <span class="hljs-comment">//前置通知</span><br>    <span class="hljs-comment">//@Before注解表示作为前置通知</span><br>    <span class="hljs-meta">@Before(value = &quot;pointdemo()&quot;)</span><span class="hljs-comment">//相同切入点抽取使用！</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">before</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;before.........&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">//后置通知（返回通知）</span><br>    <span class="hljs-meta">@AfterReturning(value = &quot;execution(* com.atguigu.spring5.aopanno.User.add(..))&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">afterReturning</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;afterReturning.........&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">//最终通知</span><br>    <span class="hljs-meta">@After(value = &quot;execution(* com.atguigu.spring5.aopanno.User.add(..))&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">after</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;after.........&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">//异常通知</span><br>    <span class="hljs-meta">@AfterThrowing(value = &quot;execution(* com.atguigu.spring5.aopanno.User.add(..))&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">afterThrowing</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;afterThrowing.........&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">//环绕通知</span><br>    <span class="hljs-meta">@Around(value = &quot;execution(* com.atguigu.spring5.aopanno.User.add(..))&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">around</span><span class="hljs-params">(ProceedingJoinPoint proceedingJoinPoint)</span> <span class="hljs-keyword">throws</span> Throwable &#123;<br>        System.out.println(<span class="hljs-string">&quot;环绕之前.........&quot;</span>);<br><br>        <span class="hljs-comment">//被增强的方法执行</span><br>        proceedingJoinPoint.proceed();<br><br>        System.out.println(<span class="hljs-string">&quot;环绕之后.........&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//（1）在增强类上面添加注解 @Order(数字类型值)，数字类型值越小优先级越高</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@Aspect</span><br><span class="hljs-meta">@Order(1)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PersonProxy</span>&#123; &#125;<br><br></code></pre></td></tr></table></figure><h2 id="AOP-操作（AspectJ-配置文件）"><a href="#AOP-操作（AspectJ-配置文件）" class="headerlink" title="AOP 操作（AspectJ 配置文件）"></a>AOP 操作（AspectJ 配置文件）</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;!--<span class="hljs-number">1</span>、创建两个类，增强类和被增强类，创建方法（同上一样）--&gt;<br>&lt;!--<span class="hljs-number">2</span>、在 spring 配置文件中创建两个类对象--&gt;<br>&lt;!--创建对象--&gt;<br>&lt;bean id=<span class="hljs-string">&quot;book&quot;</span> class=<span class="hljs-string">&quot;com.atguigu.spring5.aopxml.Book&quot;</span>&gt;&lt;/bean&gt;<br>&lt;bean id=<span class="hljs-string">&quot;bookProxy&quot;</span> class=<span class="hljs-string">&quot;com.atguigu.spring5.aopxml.BookProxy&quot;</span>&gt;&lt;/bean&gt;<br>&lt;!--<span class="hljs-number">3</span>、在 spring 配置文件中配置切入点--&gt;<br>&lt;!--配置 aop 增强--&gt;<br>&lt;aop:config&gt;<br> &lt;!--切入点--&gt;<br> &lt;aop:pointcut id=<span class="hljs-string">&quot;p&quot;</span> expression=<span class="hljs-string">&quot;execution(* com.atguigu.spring5.aopxml.Book.buy(..))&quot;</span>/&gt;<br> &lt;!--配置切面--&gt;<br> &lt;aop:aspect ref=<span class="hljs-string">&quot;bookProxy&quot;</span>&gt;<br> &lt;!--增强作用在具体的方法上--&gt;<br> &lt;aop:before method=<span class="hljs-string">&quot;before&quot;</span> pointcut-ref=<span class="hljs-string">&quot;p&quot;</span>/&gt;<br> &lt;/aop:aspect&gt;<br>&lt;/aop:config&gt;<br></code></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>1.Aop注解的方式<br>AOP注入依赖的这个AspectJ只是一种AOP的实现方式，以后可能会有其他的实现相似的功能。其核心还是开启注解，开启AOP，之后只需标识增强方法和被增强的方法即可。<br>2.Aop配置文件方式<br>创建增强类和被增强类，之后创建AopConfig。<br>配置切入点—-被增强类需要增强的方法<br>配置切面<br> 配置切面引用为增强类<br> 配置各类方法，并加上其切入点引用</p>]]></content>
    
    
    <categories>
      
      <category>计算机</category>
      
      <category>后端</category>
      
      <category>Java</category>
      
      <category>Spring</category>
      
      <category>SpringAOP</category>
      
    </categories>
    
    
    <tags>
      
      <tag>article</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Unity Task的原理</title>
    <link href="/2023/08/27/Unity%20Task%E7%9A%84%E5%8E%9F%E7%90%86/"/>
    <url>/2023/08/27/Unity%20Task%E7%9A%84%E5%8E%9F%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h2 id="为什么有些原生的c-异步方法使用await后可以被转化为Unitask而不是Task"><a href="#为什么有些原生的c-异步方法使用await后可以被转化为Unitask而不是Task" class="headerlink" title="为什么有些原生的c# 异步方法使用await后可以被转化为Unitask而不是Task"></a>为什么有些原生的c# 异步方法使用await后可以被转化为Unitask而不是Task</h2><p>UniTask 内部实现了一些扩展方法，能够将原有的C#异步的方法转化为Unitask。这是因为Unitask对于一些特定的继承自AysncOperation的类进行了扩展，然后实现了它们内部的GetAwaiter的方法，返回的是一个自定义的Awaiter struct。而这个Awaiter就可以高效率地使用UniTask的内部任务分配机制。</p><h2 id="UniTask的-0GC原理"><a href="#UniTask的-0GC原理" class="headerlink" title="UniTask的 0GC原理"></a>UniTask的 0GC原理</h2><p>原始使用async 关键词所发生的事情：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-function">Task&lt;<span class="hljs-built_in">object</span>&gt; <span class="hljs-title">LoadAssetAsync</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> address</span>)</span>&#123;...&#125;<br><br><span class="hljs-comment">// 使用该方法</span><br><span class="hljs-keyword">var</span> cache = <span class="hljs-keyword">await</span> LoadAssetAsync(address)<br></code></pre></td></tr></table></figure><p>上面使用await关键字的代码会被编译为下面的代码</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">var</span> awaiter = LoadAssetAsync(address).GetAwaiter();<br><span class="hljs-keyword">if</span>(awaiter.IsCompleted)&#123;<br>cache = awaiter.GetResult();<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>awaiter.UnsafeOnCompleted(moveNext);<br><span class="hljs-keyword">return</span> promise;<br>&#125;<br><span class="hljs-keyword">return</span> Task.FromResult(cache);<br></code></pre></td></tr></table></figure><p>实际上await 关键字最终还是调用的实现了await关键字方法的GetAwait方法。<br>接着就是async编译后</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-comment">//</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> Task&lt;<span class="hljs-built_in">object</span>&gt; <span class="hljs-title">LoadAssetAsync</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> address</span>)</span><br>&#123;<br><span class="hljs-comment">// 内部生成一个状态机，不过该状态机是struct本身实例不会产生GC。</span><br><span class="hljs-keyword">var</span> stateMachine = <span class="hljs-keyword">new</span> __LoadAssetAsync<br>&#123;<br>    __this = <span class="hljs-keyword">this</span>,<br>    address = address,<br>    builder = AsyncTaskMethodBuilder&lt;<span class="hljs-built_in">object</span>&gt;.Create(),<br>    state = <span class="hljs-number">-1</span><br>&#125;;<br><span class="hljs-keyword">var</span> builder = stateMachine.builder;<br>    builder.Start(<span class="hljs-keyword">ref</span> stateMachine);<br>    <span class="hljs-keyword">return</span> stateMachine.builder.Task;<br>&#125;<br><span class="hljs-comment">// 实现IAsyncStateMachine这样一个接口这主要就是</span><br><span class="hljs-keyword">struct</span> __LoadAssetAsync : IAsyncStateMachine<br>&#123;<br>    <span class="hljs-comment">//</span><br>    <span class="hljs-keyword">public</span> Loader __this;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">string</span> address;<br><br>    <span class="hljs-comment">// internal state</span><br>    <span class="hljs-keyword">public</span> AsyncTaskMethodBuilder&lt;<span class="hljs-built_in">object</span>&gt; builder;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> state;<br><br>    <span class="hljs-comment">// internal local variables</span><br>    TaskAwaiter&lt;<span class="hljs-built_in">object</span>&gt; loadAssetAsyncAwaiter;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">MoveNext</span>()</span><br>    &#123;<br>        <span class="hljs-keyword">try</span><br>        &#123;<br>            <span class="hljs-keyword">switch</span> (state)<br>            &#123;<br>                <span class="hljs-comment">// initial(call from builder.Start)</span><br>                <span class="hljs-keyword">case</span> <span class="hljs-number">-1</span>:<br>                    <span class="hljs-keyword">if</span> (__this.cache != <span class="hljs-literal">null</span>)<br>                    &#123;<br>                        <span class="hljs-keyword">goto</span> RETURN;<br>                    &#125;<br>                    <span class="hljs-keyword">else</span><br>                    &#123;<br>                        <span class="hljs-comment">// await LoadAssetAsync(address)</span><br>                        loadAssetAsyncAwaiter = __this.LoadAssetAsync(address).GetAwaiter();<br>                        <span class="hljs-keyword">if</span> (loadAssetAsyncAwaiter.IsCompleted)<br>                        &#123;<br>                            <span class="hljs-keyword">goto</span> <span class="hljs-keyword">case</span> <span class="hljs-number">0</span>;<br>                        &#125;<br>                        <span class="hljs-keyword">else</span><br>                        &#123;<br>                            state = <span class="hljs-number">0</span>;<br>                            builder.AwaitUnsafeOnCompleted(<span class="hljs-keyword">ref</span> loadAssetAsyncAwaiter, <span class="hljs-keyword">ref</span> <span class="hljs-keyword">this</span>);<br>                                <span class="hljs-keyword">return</span>; <span class="hljs-comment">// when call MoveNext again, goto case 0:</span><br>                            &#125;<br>                        &#125;<br>                    <span class="hljs-keyword">case</span> <span class="hljs-number">0</span>:<br>                        __this.cache = loadAssetAsyncAwaiter.GetResult();<br>                        <span class="hljs-keyword">goto</span> RETURN;<br>                    <span class="hljs-literal">default</span>:<br>                        <span class="hljs-keyword">break</span>;<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">catch</span> (Exception ex)<br>            &#123;<br>                state = <span class="hljs-number">-2</span>;<br>                builder.SetException(ex);<br>                <span class="hljs-keyword">return</span>;<br>            &#125;<br> <br>            RETURN:<br>            state = <span class="hljs-number">-2</span>;<br>            builder.SetResult(__this.cache);<br>        &#125;<br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">SetStateMachine</span>(<span class="hljs-params">IAsyncStateMachine stateMachine</span>)</span><br>        &#123;<br>            builder.SetStateMachine(stateMachine);<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><p>上面的StateMachine方法，实际上本身是给builder进行调用的，builder决定状态机该如何切换。例如当IsCompelte为 true,则会立即调用GetResult方法得到结果，而如果为false 则会进入到builder等待方法中。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><code class="hljs C#"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">struct</span> <span class="hljs-title">AsyncTaskMethodBuilder</span>&lt;<span class="hljs-title">TResult</span>&gt;</span><br>&#123;<br>    MoveNextRunner runner;<br>    Task&lt;TResult&gt; task;<br> <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-title">AsyncTaskMethodBuilder</span>&lt;<span class="hljs-title">TResult</span>&gt; <span class="hljs-title">Create</span>()</span><br>    &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">default</span>;<br>    &#125;<br> <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Start</span>&lt;<span class="hljs-title">TStateMachine</span>&gt;(<span class="hljs-params"><span class="hljs-keyword">ref</span> TStateMachine stateMachine</span>)</span><br><span class="hljs-function">        <span class="hljs-keyword">where</span> TStateMachine : IAsyncStateMachine</span><br>    &#123;<br>        <span class="hljs-comment">// when start, call stateMachine&#x27;s MoveNext directly.</span><br>        stateMachine.MoveNext();<br>    &#125;<br> <br>    <span class="hljs-keyword">public</span> Task&lt;TResult&gt; Task<br>    &#123;<br>        <span class="hljs-keyword">get</span><br>        &#123;<br>            <span class="hljs-keyword">if</span> (task == <span class="hljs-literal">null</span>)<br>            &#123;<br>                <span class="hljs-comment">// internal task creation(same as TaskCompletionSource but avoid tcs allocation)</span><br>                task = <span class="hljs-keyword">new</span> Task&lt;TResult&gt;();<br>            &#125;<br>            <span class="hljs-keyword">return</span> task.Task;<br>        &#125;<br>    &#125;<br> <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">AwaitUnsafeOnCompleted</span>&lt;<span class="hljs-title">TAwaiter</span>, <span class="hljs-title">TStateMachine</span>&gt;(<span class="hljs-params"><span class="hljs-keyword">ref</span> TAwaiter awaiter, <span class="hljs-keyword">ref</span> TStateMachine stateMachine</span>)</span><br><span class="hljs-function">        <span class="hljs-keyword">where</span> TAwaiter : ICriticalNotifyCompletion</span><br><span class="hljs-function">        <span class="hljs-keyword">where</span> TStateMachine : IAsyncStateMachine</span><br>    &#123;<br>        <span class="hljs-comment">// at first await, copy struct state machine to heap(boxed).</span><br>        <span class="hljs-keyword">if</span> (runner == <span class="hljs-literal">null</span>)<br>        &#123;<br>            _ = Task; <span class="hljs-comment">// create TaskCompletionSource</span><br>            <span class="hljs-comment">// create runner</span><br>            runner = <span class="hljs-keyword">new</span> MoveNextRunner((IAsyncStateMachine)stateMachine); <span class="hljs-comment">// 这里有装箱成本</span><br>        &#125;<br>        <span class="hljs-comment">// set cached moveNext delegate(as continuation).</span><br>        awaiter.UnsafeOnCompleted(runner.CachedDelegate);<br>    &#125;<br> <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">SetResult</span>(<span class="hljs-params">TResult result</span>)</span><br>    &#123;<br>        <span class="hljs-keyword">if</span> (task == <span class="hljs-literal">null</span>)<br>        &#123;<br>            _ = Task; <span class="hljs-comment">// create Task</span><br>            task.TrySetResult(result); <span class="hljs-comment">// same as TaskCompletionSource.TrySetResult.</span><br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            task.TrySetResult(result);<br>        &#125;<br>    &#125;<br>&#125;<br> <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">MoveNextRunner</span><br>&#123;<br>    <span class="hljs-keyword">public</span> Action CachedDelegate;<br> <br>    IAsyncStateMachine stateMachine;<br> <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">MoveNextRunner</span>(<span class="hljs-params">IAsyncStateMachine stateMachine</span>)</span><br>    &#123;<br>        <span class="hljs-keyword">this</span>.stateMachine = stateMachine;<br>        <span class="hljs-keyword">this</span>.CachedDelegate = Run; <span class="hljs-comment">// Create cached delegate.</span><br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Run</span>()</span><br>    &#123;<br>        stateMachine.MoveNext();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>builder 的await方法创建了一个 runner类(这里也是开销),随后执行 awaiter的await 方法传入委托。awaiter的await方法本身基本上就只是执行了这个委托。<br>再来看这个委托，实际上执行的是MoveNextRunner的Run方法，而这个run方法实际上又指回MoveNext方法。所以说绕了一圈，实际执行过程是这样的。</p><p>builder.Start() &#x3D;&gt; stateMachine.MoveNext() &#x3D;&gt; 成功返回&#x2F;失败执行 &#x3D;&gt; bulider.AwaitUnsafeOnCompleted &#x3D;&gt; stateMachine.MoveNext();</p><p>这个过程会持续始终，直到Compelte的时候，将值设置成功后结束。</p><p>可以看到原生的Task会产生不少的分配，例如runner类，执行的委托分配等等。<br>Unitask是如何解决这些分配的呢？ </p><ol><li>runner 对象用完后会放进对象池里，这里就避免了任务类回收，状态机相关的分配。</li><li>状态机本身使用struct<figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-comment">// Unitask的bulider</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">struct</span> AsyncUniTaskMethodBuilder&lt;T&gt;<br>&#123;<br>    IStateMachineRunnerPromise&lt;T&gt; runnerPromise;<br>    T result;<br>    <span class="hljs-keyword">public</span> UniTask&lt;T&gt; Task<br>    &#123;<br>        <span class="hljs-keyword">get</span><br>        &#123;<br>            <span class="hljs-comment">// when registered callback</span><br>            <span class="hljs-keyword">if</span> (runnerPromise != <span class="hljs-literal">null</span>)<br>            &#123;<br>                <span class="hljs-keyword">return</span> runnerPromise.Task; <br>            &#125;<br>            <span class="hljs-keyword">else</span><br>            &#123;<br>                <span class="hljs-comment">// sync complete, return struct wrapped result</span><br>                <span class="hljs-keyword">return</span> UniTask.FromResult(result);<br>            &#125;<br>        &#125;<br>    &#125;<br> <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">AwaitUnsafeOnCompleted</span>&lt;<span class="hljs-title">TAwaiter</span>, <span class="hljs-title">TStateMachine</span>&gt;(<span class="hljs-params"><span class="hljs-keyword">ref</span> TAwaiter awaiter, <span class="hljs-keyword">ref</span> TStateMachine stateMachine</span>)</span><br><span class="hljs-function">        <span class="hljs-keyword">where</span> TAwaiter : ICriticalNotifyCompletion</span><br><span class="hljs-function">        <span class="hljs-keyword">where</span> TStateMachine : IAsyncStateMachine</span><br>    &#123;<br>        <span class="hljs-keyword">if</span> (runnerPromise == <span class="hljs-literal">null</span>)<br>        &#123;<br>            <span class="hljs-comment">// get Promise/StateMachineRunner from object pool</span><br>            AsyncUniTask&lt;TStateMachine, T&gt;.SetStateMachine(<span class="hljs-keyword">ref</span> stateMachine, <span class="hljs-keyword">ref</span> runnerPromise);<br>        &#125;<br> <br>        awaiter.UnsafeOnCompleted(runnerPromise.MoveNext);<br>    &#125;<br> <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">SetResult</span>(<span class="hljs-params">T result</span>)</span><br>    &#123;<br>        <span class="hljs-keyword">if</span> (runnerPromise == <span class="hljs-literal">null</span>)<br>        &#123;<br>            <span class="hljs-keyword">this</span>.result = result;<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            <span class="hljs-comment">// SetResult signal Task continuation, it will call task.GetResult and finally return to pool self.</span><br>            runnerPromise.SetResult(result);<br> <br>            <span class="hljs-comment">// AsyncUniTask&lt;TStateMachine, T&gt;.GetResult</span><br>            <span class="hljs-comment">/*</span><br><span class="hljs-comment">            try</span><br><span class="hljs-comment">            &#123;</span><br><span class="hljs-comment">                return core.GetResult(token);</span><br><span class="hljs-comment">            &#125;</span><br><span class="hljs-comment">            finally</span><br><span class="hljs-comment">            &#123;</span><br><span class="hljs-comment">                TryReturn();</span><br><span class="hljs-comment">            &#125;</span><br><span class="hljs-comment">            */</span><br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    <categories>
      
      <category>计算机</category>
      
      <category>Game</category>
      
      <category>框架源码分析</category>
      
      <category>Unitask</category>
      
    </categories>
    
    
    <tags>
      
      <tag>article</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Unitask 的使用</title>
    <link href="/2023/08/27/Unitask%20%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <url>/2023/08/27/Unitask%20%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h3 id="Token的使用方法"><a href="#Token的使用方法" class="headerlink" title="Token的使用方法"></a>Token的使用方法</h3><h4 id="UniTaskCompletionSource"><a href="#UniTaskCompletionSource" class="headerlink" title="UniTaskCompletionSource"></a>UniTaskCompletionSource</h4><p><code>UniTaskCompletionSource&lt;T&gt;</code>可被实例化传入泛型，泛型可作为结果通过Task属性返回。如</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-title">UniTask</span>&lt;<span class="hljs-title">T</span>&gt; <span class="hljs-title">LoadAssetsAsync</span>&lt;<span class="hljs-title">T</span>&gt;(<span class="hljs-params"><span class="hljs-built_in">string</span> path</span>)</span>&#123;<br><span class="hljs-keyword">var</span> utcs = <span class="hljs-keyword">new</span> UniTaskCompletionSource&lt;T&gt;();<br>LoadAsync&lt;T&gt;(path,(res)=&gt;&#123;<br><span class="hljs-comment">// 同等情况下还可以执行 utcs.TrySetCanceled(token)   utcs.TrySetException(new SystemException) 手动实现失败或者取消</span><br>utcs.TrySetResult(res) <span class="hljs-comment">// 这个情况下 utcs.Complete = true </span><br><span class="hljs-keyword">return</span> utcs.Task;<br>&#125;)<br><span class="hljs-keyword">return</span> utcs.Task;<br>&#125;<br></code></pre></td></tr></table></figure><p>这种utcs最好的应用场景就是封装原有的 回调式的异步方法，使之能够await，并且使用Unitask生态带来的Unitask操作。这个token是可以复用的</p><h4 id="CancellationTokenSource"><a href="#CancellationTokenSource" class="headerlink" title="CancellationTokenSource"></a>CancellationTokenSource</h4><p>cancellation可以用于任务的取消</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-comment">// token的创建</span><br><span class="hljs-keyword">var</span> firstCancelToken = <span class="hljs-keyword">new</span> CancellationTokenSource()<br><span class="hljs-keyword">var</span> secondCancelToken = <span class="hljs-keyword">new</span> CancellationTokenSource()<br><span class="hljs-keyword">var</span> linkedCancelToken = CancellationTokenSource.CreateLinkedTokenSource(firstCancelToken,secondCancelToken)<span class="hljs-comment">//其中一个取消了就取消。</span><br><br><span class="hljs-comment">//token 加在普通asyncOperation操作上</span><br>UnityWebRequest.Get(url).SendWebRequest().WithCancellation(secondCancelToken.Token)<br><br> <br><span class="hljs-comment">// token的取消回调</span><br><span class="hljs-keyword">try</span>&#123;<br><span class="hljs-keyword">await</span> LoadAssetAsync()<br>&#125;<span class="hljs-keyword">catch</span>(OperationCanceledException e)&#123;<br><span class="hljs-comment">// 这里是取消回调</span><br>&#125;<br><span class="hljs-comment">// 第二种方法更常见用这样的 如果后面的await 有返回值，那么则位于元组的第二个参数。否则就直接返回一个布尔值</span><br><span class="hljs-keyword">var</span> (cancelled,_) = <span class="hljs-keyword">await</span> LoadAssetAsync().SuppressCancellationThrow();<br><span class="hljs-keyword">if</span>(cancelled)&#123;...&#125;<br><br><span class="hljs-comment">// token取消 取消后必须进行销毁操作，否则就不能再次使用这个token；</span><br>firstCancelToken.Cancel();<br>firstCancelToken.Despose();<br>firstCancelToken = <span class="hljs-keyword">new</span> CanclelationTokenSource() <br></code></pre></td></tr></table></figure><p><code>cts.CancelAfterSlim(TimeSpan.FromSeconds(5f))</code> 5s后触发取消操作</p><h3 id="延时操作"><a href="#延时操作" class="headerlink" title="延时操作"></a>延时操作</h3><p><code>Unitask.Delay(TimeSpan.FromSeconds(0.1f))</code>  等待0.1s<br><code>Unitask.Delay(TimeSpan.FromSeconds(0.1f，true))</code>  忽略timescale<br><code>Unitask.DelayFrame(5)</code>  延时5帧<br><code>Unitask.NextFrame()</code>  下一帧的Update之后执行 yield return null<br><code>Unitask.WaitEndofFrame()</code> 这一帧结束下一帧开始之前执行 相当于 yield return endofFrame<br><code>Unitask.Yeild(timeloop)</code> 这个可以自定义playerloop之后执行 这一个效率最高</p><h3 id="UniTask等待条件触发"><a href="#UniTask等待条件触发" class="headerlink" title="UniTask等待条件触发"></a>UniTask等待条件触发</h3><p><code>UniTask.WaitUntil(()=&gt;somethingOk); </code>等待值为True<br><code>UniTask.WaitUntilValueChanged();</code> 等待值改变</p><h3 id="多个Unitask操作"><a href="#多个Unitask操作" class="headerlink" title="多个Unitask操作"></a>多个Unitask操作</h3><p><code>WhenAll()</code> 等待全部完成<br><code>WhenAny()</code> 等待一个完成</p><h3 id="同步方法中执行异步方法"><a href="#同步方法中执行异步方法" class="headerlink" title="同步方法中执行异步方法"></a>同步方法中执行异步方法</h3><p>SomeAsyncMethod().Forget()</p><h3 id="使用Unitask执行线程"><a href="#使用Unitask执行线程" class="headerlink" title="使用Unitask执行线程"></a>使用Unitask执行线程</h3><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-comment">// 这两行需要同时调用</span><br><span class="hljs-keyword">await</span> UniTask.RunOnThreadPool(()=&gt;&#123;&#125;)<br><span class="hljs-keyword">await</span> UniTask.SwitchToMainThread();<br><span class="hljs-comment">// 第二种方法</span><br><span class="hljs-keyword">await</span> UniTask.SwitchToThreadPool();<br><span class="hljs-keyword">await</span> File.ReadAllTextAsync(filename)<br><span class="hljs-keyword">await</span> UniTask.Yield(PlayerLoopTiming.Update)<br></code></pre></td></tr></table></figure><h3 id="Unitask的-IUniTaskAsyncEnumerable-对象的用法"><a href="#Unitask的-IUniTaskAsyncEnumerable-对象的用法" class="headerlink" title="Unitask的 IUniTaskAsyncEnumerable 对象的用法"></a>Unitask的 IUniTaskAsyncEnumerable 对象的用法</h3><p>很多UI的对象可以转化为这类对象，例如 var asyncEnumerable &#x3D; Button.OnClickAsAsyncEnumerable();<br>这会使得每一次点击都会向 asyncEnumerable中添加一次内容。使用场景可以如下：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-comment">// 实现点击一个物体，对具体的点击次数进行判断</span><br><span class="hljs-keyword">var</span> asyncEnumerable = Button.OnClickAsAsyncEnumerable()<br><span class="hljs-comment">// 这个是ForEachAsync 是同步事件 </span><br><span class="hljs-keyword">await</span> asyncEnumerable.Take(<span class="hljs-number">3</span>).ForEachAsync((_,index)=&gt;&#123;<br><span class="hljs-keyword">if</span>(index==<span class="hljs-number">0</span>)<br><span class="hljs-keyword">if</span>(index==<span class="hljs-number">2</span>)<br>&#125;,token) <span class="hljs-comment">// 这里有一个取消token</span><br><br><span class="hljs-comment">// 异步可迭代器可以视作对事件的回调，当这里面实现了异步操作的时候，外部的所有事件将不会进行传递。</span><br><span class="hljs-comment">// 如果想要继续接收事件，那么需要这样写 asyncEnumerable.Queue().ForEachAwaitAsync </span><br><span class="hljs-comment">// 对事件进行一个排队</span><br><span class="hljs-keyword">await</span> asyncEnumerable.ForEachAwaitAsync(<span class="hljs-keyword">async</span> (_)=&gt;&#123;<br><br><span class="hljs-keyword">await</span> UniTask.Delay(TimeSpan.FromSeconds(<span class="hljs-number">2f</span>),cancellationToken: token)<br><br>&#125;)<br><br></code></pre></td></tr></table></figure><p>实质上异步可迭代器可以将其范围扩大，无论是按钮还是自定义触发的事件都可以使用它。可以很方便的实现诸如上面的对具体触发次数进行判断，或者判断双击，对点击进行限制等等操作。所以除了按钮事件，Unity上还有很多事件例如碰撞等，都可以转化为碰撞可迭代器。</p><h3 id="UniTask的异步流编写方式"><a href="#UniTask的异步流编写方式" class="headerlink" title="UniTask的异步流编写方式"></a>UniTask的异步流编写方式</h3><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-comment">// 创建</span><br><span class="hljs-keyword">private</span> AsyncReactiveProperty&lt;<span class="hljs-built_in">int</span>&gt; currentHp = <span class="hljs-keyword">new</span> AsyncReactiveProperty&lt;<span class="hljs-built_in">int</span>&gt;(<span class="hljs-number">100</span>);<br><span class="hljs-keyword">public</span> Text ShowHpText;<br><br><br><span class="hljs-comment">//第一种使用事件订阅, 每当数值发生变化则会触发 OnHpChange方法</span><br>currentHp.Subscribe(OnHpChange)<br><span class="hljs-comment">// WithoutCurrent 指忽略当前值</span><br>currentHp.WithoutCurrent().ForEachAsync((_,index)=&gt;&#123;&#125;) <span class="hljs-comment">// 天生支持转化为异步可迭代器</span><br>currentHp.FirstAsync((<span class="hljs-keyword">value</span>)=&gt;&#123;&#125;) <span class="hljs-comment">//可以进行一次查询，相当于第一次满足的Select</span><br>currentHp.BindTo(ShowHpText); <span class="hljs-comment">// 可以绑定数值到一个Unity组件上</span><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>计算机</category>
      
      <category>Game</category>
      
      <category>框架源码分析</category>
      
      <category>Unitask</category>
      
    </categories>
    
    
    <tags>
      
      <tag>article</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Unitask</title>
    <link href="/2023/08/27/Unitask/"/>
    <url>/2023/08/27/Unitask/</url>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>Unitask是一个 Unity异步解决方案的代码框架库。<br>Unity本身是提供了一个协程解决方案。通过创建一个IEnumerator 的生成器方法，并且在其中使用 yield return 来中断程序运行达到异步执行的效果。<br>但是这个方案无法得到异步的返回值，也无法处理错误信息。并且其还需要限制在Unity的MonoBehavior中执行，编写上也不便，需要写一个IEnumerator方法。很难做取消过程，无法控制多个写协程的并行处理等等。相较而言，Task这类异步解决方案则可以解决上面的问题。<br>C#提供了一个Task异步解决方案，不过它在创建一个异步方法的时候，会同步开启一个线程，但是由于Unity本身是单线程这就会导致访问堆栈的问题，以及debug等诸多不便。另外Task本身在unity里面执行的时候，会产生很多的性能消耗。<br>因此Unitask诞生就是结合了Task编写方式和Unity单线程的特性，使得在Unity中能够编写高性能，容易编写的异步代码。</p><h2 id="如何使用UniTask"><a href="#如何使用UniTask" class="headerlink" title="如何使用UniTask"></a>如何使用UniTask</h2><h2 id="如何转化原有AsyncOperation，交付给Unitask处理"><a href="#如何转化原有AsyncOperation，交付给Unitask处理" class="headerlink" title="如何转化原有AsyncOperation，交付给Unitask处理"></a>如何转化原有AsyncOperation，交付给Unitask处理</h2><p>例子</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-comment">// 加载场景可以的异步可以得到进度值，并且输出。</span><br><span class="hljs-keyword">await</span> SceneManager.LoadSceneAsync(address).ToUniTask(<br>(Progress.Create&lt;<span class="hljs-built_in">float</span>&gt;(<br>(p)=&gt;<br>&#123;<br>LoadSceneSlider.<span class="hljs-keyword">value</span>=p;<br>ProgressText.text = <span class="hljs-string">$&quot;progress : <span class="hljs-subst">&#123;p*<span class="hljs-number">100</span>&#125;</span>%&quot;</span><br>&#125;<br>))<br>);<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>计算机</category>
      
      <category>Game</category>
      
      <category>框架源码分析</category>
      
      <category>Unitask</category>
      
    </categories>
    
    
    <tags>
      
      <tag>article</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Profiler</title>
    <link href="/2023/08/27/Profiler/"/>
    <url>/2023/08/27/Profiler/</url>
    
    <content type="html"><![CDATA[<p>Profiler是Unity自带的性能分析工具。可以查看CPU，GPU，物理，UI等等详细位置的消耗。<br>日常使用的时候，最常使用的是CPU分析工具，通过这个可以查看代码的执行速度,执行次数，执行所产生的GC等等。</p><p>常见的查看具体方法模式有三个，最常使用的是hierarchy视图，可以查看什么方法执行了，方法的子方法的执行等等，timeline有时也会使用，可以查看job的内容。profiler 还有deepProfiler模式，开启后可以看到详细的方法调用。</p><p>具体来说，想要查看性能上最好性能的就是查看playerloop方法下的自己写的代码，按照耗时来排序。耗时的代码分为自己消耗的以及子方法消耗的，但是自己消耗的代码如果过多想要查看具体的代码，那么需要这样。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-comment">// 包裹开始，命名为括号内的</span><br>Profiler.BeginSample(<span class="hljs-string">&quot;test&quot;</span>);<br><span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">10000</span>;i++)&#123;<br><span class="hljs-built_in">int</span> y = i;<br>&#125;<br>Profiler.EndSample();<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>计算机</category>
      
      <category>Game</category>
      
      <category>框架源码分析</category>
      
      <category>Profiler</category>
      
    </categories>
    
    
    <tags>
      
      <tag>article</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Obsidian插件基础原理</title>
    <link href="/2023/04/26/Obsidian%E6%8F%92%E4%BB%B6%E5%9F%BA%E7%A1%80%E5%8E%9F%E7%90%86/"/>
    <url>/2023/04/26/Obsidian%E6%8F%92%E4%BB%B6%E5%9F%BA%E7%A1%80%E5%8E%9F%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h1 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h1><p>Obsidian的插件主要是继承于Obsidian提供的Plugin接口，随后从该接口调用实现各种功能。<br>这里Obsidian主要功能可以是添加命令、添加全局提示、添加设置面板。</p><ul><li>对于添加命令，只需要在软件页面调用ctrl+p则可以显示所有的命令，在插件里只需要调用 <code>this.addCommand(&#123;id:&quot;&quot;,name:&quot;&quot;,callback:()=&gt;&#123;&#125;&#125;)</code> 即可添加一个命令。</li><li>对于全局提示，只需要执行<code>new Notice(&quot;&quot;)</code>在构造参数里填写字符即可。</li><li>对于左边按钮栏内容，需要执行<code>this.addRibbonIcon(&quot;IconName&quot;,&quot;name&quot;,(e)=&gt;&#123;&#125;)</code>即可，需要一个icon名称，按钮名称，随后点击后会执行后面的回调。</li><li>添加设置面板为<code>this.addSettingTab(new SettingTab(this.app,this))</code> 里面传入一个类型为PluginSettingTab的类，在这个类里可以控制其插件的设置样式。<ul><li>在类里的 display() 生命周期里，可引入一个 <code>containerEl</code> 这个类为浏览器HTMLElement类型，可以实现html样式。</li><li>需要在最后调用new Setting,从而应用样式。</li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>杂记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>article</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Pupeteer</title>
    <link href="/2023/04/26/Pupeteer/"/>
    <url>/2023/04/26/Pupeteer/</url>
    
    <content type="html"><![CDATA[<h2 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h2><p>Pupeteer是一个谷歌出版的类似于selenium库的操作浏览器的一个框架。不同之处为，该框架可以使用用户数据,还可以很方便的链接一个已经打开的浏览器进行爬取操作。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p><code>npm i puppeteer</code></p><h2 id="基础使用"><a href="#基础使用" class="headerlink" title="基础使用"></a>基础使用</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> puppeteer <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;puppeteer&#x27;</span>;<br>(<span class="hljs-keyword">async</span> () =&gt; &#123;<br><span class="hljs-comment">// 启用一个浏览器对象</span><br><span class="hljs-keyword">const</span> browser = <span class="hljs-keyword">await</span> puppeteer.<span class="hljs-title function_">launch</span>();<br><span class="hljs-comment">// 启用一个页面</span><br><span class="hljs-keyword">const</span> page = <span class="hljs-keyword">await</span> browser.<span class="hljs-title function_">newPage</span>();<br><span class="hljs-keyword">await</span> page.<span class="hljs-title function_">goto</span>(<span class="hljs-string">&#x27;https://developer.chrome.com/&#x27;</span>);<br><span class="hljs-comment">// 设置视距</span><br><span class="hljs-keyword">await</span> page.<span class="hljs-title function_">setViewport</span>(&#123;<span class="hljs-attr">width</span>: <span class="hljs-number">1080</span>, <span class="hljs-attr">height</span>: <span class="hljs-number">1024</span>&#125;);<br><span class="hljs-comment">// 点击某个class</span><br><span class="hljs-keyword">await</span> page.<span class="hljs-title function_">type</span>(<span class="hljs-string">&#x27;.search-box__input&#x27;</span>, <span class="hljs-string">&#x27;automate beyond recorder&#x27;</span>);<br><span class="hljs-comment">// 另一种点击方式</span><br><span class="hljs-keyword">const</span> searchResultSelector = <span class="hljs-string">&#x27;.search-box__link&#x27;</span>;<br><span class="hljs-keyword">await</span> page.<span class="hljs-title function_">waitForSelector</span>(searchResultSelector);<br><span class="hljs-keyword">await</span> page.<span class="hljs-title function_">click</span>(searchResultSelector);<br><span class="hljs-comment">// Locate the full title with a unique string</span><br><span class="hljs-keyword">const</span> textSelector = <span class="hljs-keyword">await</span> page.<span class="hljs-title function_">waitForSelector</span>(<br>  <span class="hljs-string">&#x27;text/Customize and automate&#x27;</span><br>);<br><span class="hljs-keyword">const</span> fullTitle = <span class="hljs-keyword">await</span> textSelector.evaluate(<span class="hljs-function"><span class="hljs-params">el</span> =&gt;</span> el.<span class="hljs-property">textContent</span>);<br><span class="hljs-comment">// Print the full title</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;The title of this blog post is &quot;%s&quot;.&#x27;</span>, fullTitle);<br><span class="hljs-keyword">await</span> browser.<span class="hljs-title function_">close</span>();<br>&#125;)();<br><br></code></pre></td></tr></table></figure><h2 id="实用使用"><a href="#实用使用" class="headerlink" title="实用使用"></a>实用使用</h2><h3 id="使用本地浏览器数据去访问需要鉴权的网站"><a href="#使用本地浏览器数据去访问需要鉴权的网站" class="headerlink" title="使用本地浏览器数据去访问需要鉴权的网站"></a>使用本地浏览器数据去访问需要鉴权的网站</h3><p>首先需要<strong>关闭所有浏览器</strong>包括浏览器的后台，随后访问的时候带上userDataDir。<br>userDataDir 的获取在谷歌浏览器中访问 chrome:&#x2F;&#x2F;version&#x2F; ，即可得到个人资料路径。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> puppeteer = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;puppeteer-core&#x27;</span>);<br><br>(<span class="hljs-keyword">async</span> () =&gt; &#123;<br><span class="hljs-keyword">const</span> browser = <span class="hljs-keyword">await</span> puppeteer.<span class="hljs-title function_">launch</span>(&#123;<br><span class="hljs-comment">// 这里必须将本地链接转义</span><br><span class="hljs-attr">executablePath</span>: <span class="hljs-string">&#x27;C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe&#x27;</span>,<br><span class="hljs-attr">headless</span>: <span class="hljs-literal">false</span>,<br><span class="hljs-attr">defaultViewport</span>: &#123;<br>  <span class="hljs-attr">width</span>: <span class="hljs-number">1920</span>,<br>  <span class="hljs-attr">height</span>: <span class="hljs-number">1080</span><br>&#125;,<br><span class="hljs-attr">userDataDir</span>: <span class="hljs-string">&#x27;C:\\Users\\admin\\AppData\\Local\\Google\\Chrome\\User Data\\Default&#x27;</span><br>&#125;);<br><span class="hljs-keyword">const</span> page = <span class="hljs-keyword">await</span> browser.<span class="hljs-title function_">newPage</span>();<br><span class="hljs-keyword">await</span> page.<span class="hljs-title function_">goto</span>(<span class="hljs-string">&#x27;https://www.baidu.com&#x27;</span>);<br><span class="hljs-keyword">await</span> page.<span class="hljs-title function_">screenshot</span>(&#123; <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;baidu.png&#x27;</span> &#125;);<br><span class="hljs-keyword">await</span> browser.<span class="hljs-title function_">close</span>();<br>&#125;)();<br></code></pre></td></tr></table></figure><h3 id="链接到现在已经打开的浏览器上"><a href="#链接到现在已经打开的浏览器上" class="headerlink" title="链接到现在已经打开的浏览器上"></a>链接到现在已经打开的浏览器上</h3><p>需要浏览器运行时执行 <code>--remote-debugging-port=9222 </code> 指令。对于windows 可以在快捷方式那里对于文件目录那里后面添加上该指令，即可每次运行都会默认开启一个谷歌浏览器的服务。<br>随后访问 <a href="http://localhost:9222/json/version">http://localhost:9222/json/version</a> ,其返回一个json 。 需要复制webSocketDebuggerUrl，作为后续puppetter连接的依据。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-attr">&quot;Browser&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Chrome/112.0.5615.138&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;Protocol-Version&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;1.3&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;User-Agent&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/112.0.0.0 Safari/537.36&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;V8-Version&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;11.2.214.14&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;WebKit-Version&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;537.36 (@b160f1d9e90aa6940d17d5cb44d9e815205d2024)&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;webSocketDebuggerUrl&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;ws://localhost:9222/devtools/browser/4c2a97e5-395c-4d61-a96b-b63ed7a01f77&quot;</span><br></code></pre></td></tr></table></figure><p>以下是puppeteer 代码</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs ts">(<span class="hljs-keyword">async</span> () =&gt; &#123;<br>    <span class="hljs-keyword">const</span> browser = <span class="hljs-keyword">await</span> puppeteer.<span class="hljs-title function_">connect</span>(&#123;<br>    <span class="hljs-comment">// 这里不能访问localhost,据测试用 127.0.0.1最好</span><br>        <span class="hljs-attr">browserWSEndpoint</span>: <span class="hljs-string">&#x27;ws://127.0.0.1:9222/devtools/browser/4c2a97e5-395c-4d61-a96b-b63ed7a01f77&#x27;</span><br>    &#125;);<br>    <span class="hljs-keyword">const</span> page = <span class="hljs-keyword">await</span> browser.<span class="hljs-title function_">newPage</span>();<br>    <span class="hljs-keyword">await</span> page.<span class="hljs-title function_">goto</span>(<span class="hljs-string">&#x27;https://google.com/&#x27;</span>);<br>    <span class="hljs-keyword">await</span> page.<span class="hljs-title function_">screenshot</span>(&#123; <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;google.png&#x27;</span> &#125;);<br>    <span class="hljs-comment">// await browser.close();</span><br>&#125;)();<br></code></pre></td></tr></table></figure><p>由于访问localhost可能会存在访问不到的情况，可通过本地控制台 输入 <code>netstat</code> 指令检查所有开放的端口，检查是否浏览器已经开放了端口。</p>]]></content>
    
    
    <categories>
      
      <category>NodeJs代码库</category>
      
      <category>Pupeteer</category>
      
    </categories>
    
    
    <tags>
      
      <tag>article</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>水排序</title>
    <link href="/2023/02/21/%E6%B0%B4%E6%8E%92%E5%BA%8F/"/>
    <url>/2023/02/21/%E6%B0%B4%E6%8E%92%E5%BA%8F/</url>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>主要是水面倾斜，水分层，水波纹三合一的效果。</p><h2 id="有关水面倾斜计算方案"><a href="#有关水面倾斜计算方案" class="headerlink" title="有关水面倾斜计算方案"></a>有关水面倾斜计算方案</h2><blockquote><p>方案来源于 <code>白玉无冰</code><br>链接: <a href="https://mp.weixin.qq.com/s/DXl7_rvI5fS3Fg-OmHvgmg">https://mp.weixin.qq.com/s/DXl7_rvI5fS3Fg-OmHvgmg</a></p></blockquote><h3 id="核心原理"><a href="#核心原理" class="headerlink" title="核心原理"></a>核心原理</h3><p>水面倾斜后水体的体积不变，已知水体高度，水体的宽度，以及旋转的角度，那么可以求得在水倾斜到某个角度后，倾斜各点的顶点位置，即可进行水体的绘制达到倒水的效果。</p><p>那么以最底层为例子，朝着一边倒水的时候会出现两种情况：</p><ul><li><p>当水体稍微倾斜后，但是最低的水面没有够着底部，形成了一个梯形水体:<br>!<a href="#">Post not found: = Pasted image 20230216093108.png|left|200</a><br>在这种情况下可以通过左边的公式算出新的顶点高度。<br>实际上就是原来的高度+新增的高度(宽度 X $tan(\theta)$ &#x2F; 2)</p></li><li><p>水体临界值的计算：<br>!<a href="#">Post not found: = Pasted image 20230216102153.png|left|200</a></p></li><li><p>当水体倾斜超越临界值的情况:<br>!<a href="#">Post not found: = Pasted image 20230216100702.png|left|200</a></p></li></ul><p>这样就能计算出每一次水体偏高一边点的位置。</p><h3 id="具体代码"><a href="#具体代码" class="headerlink" title="具体代码"></a>具体代码</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs ts"><br><span class="hljs-keyword">private</span> <span class="hljs-title function_">drawOneWater</span>(<span class="hljs-params">height: <span class="hljs-built_in">number</span>, color: Color</span>) &#123;<br><span class="hljs-comment">// 三角函数中弧度值得求值方式  角度/180*Math.Pi</span><br>    <span class="hljs-keyword">const</span> radiansA = <span class="hljs-variable language_">this</span>.<span class="hljs-property">bottleAngle</span> / <span class="hljs-number">180</span> * <span class="hljs-title class_">Math</span>.<span class="hljs-property">PI</span>;<br>    <span class="hljs-comment">//计算临界角度</span><br>    <span class="hljs-keyword">const</span> radiansM = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">atan</span>(<span class="hljs-number">2</span> * height / <span class="hljs-variable language_">this</span>.<span class="hljs-property">bottleWidth</span>);<br><span class="hljs-comment">// 对于梯形的情况这个是新增的高度</span><br>    <span class="hljs-keyword">const</span> tempWTan = <span class="hljs-variable language_">this</span>.<span class="hljs-property">bottleWidth</span> * <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">tan</span>(radiansA);<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">drawGraphics</span>.<span class="hljs-property">fillColor</span> = color;<br>    <span class="hljs-comment">// 当前角度如果小于其临界值，还有两种情况。当前角度是逆时针(负数)，还是顺时针。</span><br>    <span class="hljs-keyword">if</span> (radiansA &lt;= radiansM) &#123;<br>    <span class="hljs-comment">// 这种情况是当逆时针旋转的值大于了临界值，形成了三角形</span><br>        <span class="hljs-keyword">if</span> (radiansA &lt; -radiansM) &#123;<br>            <span class="hljs-comment">// 三角形 逆时针</span><br>            <span class="hljs-keyword">let</span> hL = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">sqrt</span>(<span class="hljs-number">2</span> * height * -tempWTan);<br>            <span class="hljs-comment">// 超出高度处理</span><br>            hL = hL &gt; <span class="hljs-variable language_">this</span>.<span class="hljs-property">bottleHeight</span> ? <span class="hljs-variable language_">this</span>.<span class="hljs-property">bottleHeight</span> : hL;<br>            <span class="hljs-keyword">const</span> bW = hL / <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">tan</span>(-radiansA);<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-property">drawGraphics</span>.<span class="hljs-title function_">moveTo</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">bottleWidth</span>, <span class="hljs-number">0</span>);<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-property">drawGraphics</span>.<span class="hljs-title function_">lineTo</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">bottleWidth</span>, hL);<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-property">drawGraphics</span>.<span class="hljs-title function_">lineTo</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">bottleWidth</span> - bW, <span class="hljs-number">0</span>);<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-property">drawGraphics</span>.<span class="hljs-title function_">lineTo</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">bottleWidth</span>, <span class="hljs-number">0</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">// 梯形，包含顺逆时针</span><br>            <span class="hljs-variable language_">this</span>.<span class="hljs-property">drawGraphics</span>.<span class="hljs-title function_">moveTo</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br>            <span class="hljs-keyword">let</span> hL = height + tempWTan / <span class="hljs-number">2</span>;<br>            <span class="hljs-comment">// 超出高度处理</span><br>            <span class="hljs-keyword">let</span> cutOffset = <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">if</span> (hL &gt; <span class="hljs-variable language_">this</span>.<span class="hljs-property">bottleHeight</span>) &#123;<br>                cutOffset += hL - <span class="hljs-variable language_">this</span>.<span class="hljs-property">bottleHeight</span><br>            &#125;<br>            <span class="hljs-keyword">let</span> hR = height - tempWTan / <span class="hljs-number">2</span>;<br>            <span class="hljs-keyword">if</span> (hR &gt; <span class="hljs-variable language_">this</span>.<span class="hljs-property">bottleHeight</span>) &#123;<br>                cutOffset += hR - <span class="hljs-variable language_">this</span>.<span class="hljs-property">bottleHeight</span><br>            &#125;<br><br>            <span class="hljs-variable language_">this</span>.<span class="hljs-property">drawGraphics</span>.<span class="hljs-title function_">lineTo</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">bottleWidth</span>, <span class="hljs-number">0</span>);<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-property">drawGraphics</span>.<span class="hljs-title function_">lineTo</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">bottleWidth</span>, hR - cutOffset);<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-property">drawGraphics</span>.<span class="hljs-title function_">lineTo</span>(<span class="hljs-number">0</span>, hL - cutOffset);<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-property">drawGraphics</span>.<span class="hljs-title function_">lineTo</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br>        &#125;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">// 三角形 顺时针</span><br>        <span class="hljs-keyword">let</span> hL = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">sqrt</span>(<span class="hljs-number">2</span> * height * tempWTan);<br>        <span class="hljs-comment">// 超出高度处理</span><br>        hL = hL &gt; <span class="hljs-variable language_">this</span>.<span class="hljs-property">bottleHeight</span> ? <span class="hljs-variable language_">this</span>.<span class="hljs-property">bottleHeight</span> : hL;<br>        <span class="hljs-keyword">const</span> bW = hL / <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">tan</span>(radiansA);<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">drawGraphics</span>.<span class="hljs-title function_">moveTo</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">drawGraphics</span>.<span class="hljs-title function_">lineTo</span>(bW, <span class="hljs-number">0</span>);<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">drawGraphics</span>.<span class="hljs-title function_">lineTo</span>(<span class="hljs-number">0</span>, hL);<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">drawGraphics</span>.<span class="hljs-title function_">lineTo</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br>    &#125;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">drawGraphics</span>.<span class="hljs-title function_">fill</span>();<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>计算机图形</category>
      
      <category>Shader解析</category>
      
    </categories>
    
    
    <tags>
      
      <tag>article</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>水波纹效果</title>
    <link href="/2023/02/14/%E6%B0%B4%E6%B3%A2%E7%BA%B9%E6%95%88%E6%9E%9C/"/>
    <url>/2023/02/14/%E6%B0%B4%E6%B3%A2%E7%BA%B9%E6%95%88%E6%9E%9C/</url>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>鼠标点击某个位置后，周围生成波纹的一个效果。核心思路是以点击中心基点，周围所有的点与其求得一个方向向量，那么这个方向向量与这个点的关系通过计算就能够得到一个圆圈的效果。</p><h2 id="具体代码"><a href="#具体代码" class="headerlink" title="具体代码"></a>具体代码</h2><blockquote><p>顶点着色器只干了传递坐标转换坐标的事情<br>仅包含有关片元着色的代码</p></blockquote><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs scss">uniform ARGS&#123;<br>  vec2 center;<br>  vec2 canvas_size;<br>  <span class="hljs-attribute">float</span> wave_radius;<br>  <span class="hljs-attribute">float</span> wave_offset;<br>  <br>&#125;;<br>CCProgram fs %&#123;<br>precision highp <span class="hljs-attribute">float</span>;<br><span class="hljs-selector-id">#include</span> &lt;alpha-test&gt;<br><span class="hljs-selector-id">#include</span> &lt;cc-global&gt;<br>in vec4 v_color;<br><span class="hljs-selector-id">#if</span> USE_TEXTURE<br> in vec2 v_uv0;<br> uniform sampler2D texture;<br><span class="hljs-selector-id">#endif</span><br>uniform ARGS&#123;<br>  vec2 center;<br>  vec2 canvas_size;<br>  <span class="hljs-attribute">float</span> wave_radius;<br>  <span class="hljs-attribute">float</span> wave_offset;<br>&#125;;<br>void <span class="hljs-selector-tag">main</span>() &#123;<br><span class="hljs-comment">// 这里记录了当前点和点击中心点的向量，该向量指向中间点</span><br>vec2 distance_vec = center - v_uv0;<br><span class="hljs-comment">// 这里将点的比例进行换算</span><br>distance_vec = distance_vec * <span class="hljs-built_in">vec2</span>(canvas_size.x / canvas_size.y, <span class="hljs-number">1.0</span>);<br><span class="hljs-comment">// 求出具体的距离</span><br><span class="hljs-attribute">float</span> distance = <span class="hljs-built_in">sqrt</span>(distance_vec.x * distance_vec.x + distance_vec.y * distance_vec.y);<br><span class="hljs-comment">// 在对某一个点进行稍微的偏移，有了time.x的加成，则每次点击这里都会不一样</span><br><span class="hljs-attribute">float</span> sin_factor = <span class="hljs-built_in">sin</span>(distance * <span class="hljs-number">100.0</span> + cc_time.x) * <span class="hljs-number">0.05</span>;<br>   <span class="hljs-comment">// 这个值在0和1之间，距离越近，wave_offset越小，这个数值越偏向于1即受到了影响，反之则抛弃波纹的一个效果，这样就可以在一个固定的区间内有一个波纹的效果。</span><br><span class="hljs-attribute">float</span> discard_factor = <span class="hljs-built_in">clamp</span>(wave_radius - abs(wave_offset - distance), <span class="hljs-number">0.0</span>, <span class="hljs-number">1.0</span>);<br><span class="hljs-comment">// 计算总的uv的偏移值</span><br>vec2 offset = <span class="hljs-built_in">normalize</span>(distance_vec) * sin_factor * discard_factor;<br>vec2 uv = offset + v_uv0;<br>   gl_FragColor = <span class="hljs-built_in">texture</span>(texture, uv);<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>计算机图形</category>
      
      <category>Shader解析</category>
      
    </categories>
    
    
    <tags>
      
      <tag>article</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>对于复杂难以解析的网站请求爬取办法</title>
    <link href="/2023/01/15/%E5%AF%B9%E4%BA%8E%E5%A4%8D%E6%9D%82%E9%9A%BE%E4%BB%A5%E8%A7%A3%E6%9E%90%E7%9A%84%E7%BD%91%E7%AB%99%E8%AF%B7%E6%B1%82%E7%88%AC%E5%8F%96%E5%8A%9E%E6%B3%95/"/>
    <url>/2023/01/15/%E5%AF%B9%E4%BA%8E%E5%A4%8D%E6%9D%82%E9%9A%BE%E4%BB%A5%E8%A7%A3%E6%9E%90%E7%9A%84%E7%BD%91%E7%AB%99%E8%AF%B7%E6%B1%82%E7%88%AC%E5%8F%96%E5%8A%9E%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h2 id="使用selenium-打开网页进行模拟"><a href="#使用selenium-打开网页进行模拟" class="headerlink" title="使用selenium 打开网页进行模拟"></a>使用selenium 打开网页进行模拟</h2><p>selenium 是一个自动化工具，提供了一套API供给python这类语言调用控制浏览器的功能，其中包含最基础的点击，前进后退等浏览器基本功能，还包含可以直接运行Js在浏览器上，实现各类复杂效果。</p><h2 id="selenium环境安装"><a href="#selenium环境安装" class="headerlink" title="selenium环境安装"></a>selenium环境安装</h2><p>安装selenium 包含两部分，一部分是python需要下载selenium包，另一部分是下载浏览器驱动。</p><h3 id="python-下包"><a href="#python-下包" class="headerlink" title="python 下包"></a>python 下包</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">pip install selenium<br></code></pre></td></tr></table></figure><h3 id="下载驱动以及安装驱动"><a href="#下载驱动以及安装驱动" class="headerlink" title="下载驱动以及安装驱动"></a>下载驱动以及安装驱动</h3><p><a href="http://chromedriver.storage.googleapis.com/index.html">下载地址</a>  <code>http://chromedriver.storage.googleapis.com/index.html </code><br>在浏览器设置关于Chrome查看谷歌浏览器版本，随后下载对应的驱动即可。<br>将该驱动放置在环境变量里即可，如果没有放那么在使用的时候需要指定位置。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">options = webdriver.ChromeOptions()<br>options.binary_location = <span class="hljs-string">r&quot;C:\driver.exe&quot;</span><br>driver = webdriver.Chrome(options=options)<br></code></pre></td></tr></table></figure><h2 id="基础请求"><a href="#基础请求" class="headerlink" title="基础请求"></a>基础请求</h2><p><code>driver.get(url)</code></p><h2 id="配置信息设置"><a href="#配置信息设置" class="headerlink" title="配置信息设置"></a>配置信息设置</h2><ul><li>使用无头模式，即不打开浏览器进行请求 <code>options.headless = True</code> </li><li>添加UA <code>options.add_argument(&#39;user-agent=&quot;Mozilla/5.0 (iPod; U; CPU iPhone OS 2_1 like Mac OS X; ja-jp) AppleWebKit/525.18.1 (KHTML, like Gecko) Version/3.1.1 Mobile/5F137 Safari/525.20&quot;&#39;)</code></li><li>添加Cookie <code>driver.add_cookie(&#123;&quot;name&quot;:key,&quot;value&quot;:result[key]&#125;)</code> <strong>需要注意，设置cookie要在请求后才能设置。</strong></li></ul><h2 id="操作模拟"><a href="#操作模拟" class="headerlink" title="操作模拟"></a>操作模拟</h2><ul><li>通过find_element获取到单个元素执行click <code>driver.find_element(By.CSS_SELECTOR,&quot;.Modal-closeButton&quot;).click()</code></li><li>通过find_elements 可获取多个元素 &#96;driver.find_elements(By.CSS_SELECTOR,”.Modal-closeButton”)</li></ul><h3 id="模拟人滚轮移动"><a href="#模拟人滚轮移动" class="headerlink" title="模拟人滚轮移动"></a>模拟人滚轮移动</h3><p>思路:可以通过使用dom获取到当前位置，并记录下来，每次滚动一定距离后，下一次以记录的值再进行滚动，直到当前记录的位置值不再变化，代表着滚动到底部了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">scroll_to_bottom</span>(<span class="hljs-params">driver</span>):<br>new_height = driver.execute_script(<span class="hljs-string">&quot;return document.body.scrollHeight&quot;</span>)<br>last_height = new_height-<span class="hljs-number">1000</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(last_height, new_height, <span class="hljs-number">350</span>):<br>time.sleep(<span class="hljs-number">0.05</span>)<br>driver.execute_script(<span class="hljs-string">&#x27;window.scrollTo(0, %s)&#x27;</span> % i)<br><br>is_end = <span class="hljs-literal">False</span><br>last_height = <span class="hljs-number">0</span><br><span class="hljs-keyword">while</span> <span class="hljs-keyword">not</span> is_end:<br>new_height = driver.execute_script(<span class="hljs-string">&quot;return document.body.scrollHeight&quot;</span>)<br><span class="hljs-keyword">if</span>(last_height ==new_height):<br>is_end = <span class="hljs-literal">True</span><br><span class="hljs-keyword">else</span>:<br>last_height = new_height<br><span class="hljs-comment"># 判定前一次和当前的滚动最大高度是否相等</span><br>time.sleep(<span class="hljs-number">0.5</span>)<br>scroll_to_bottom(driver=driver)<br><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
      <category>爬取最佳实践</category>
      
    </categories>
    
    
    <tags>
      
      <tag>article</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>装饰器</title>
    <link href="/2022/12/22/%E8%A3%85%E9%A5%B0%E5%99%A8/"/>
    <url>/2022/12/22/%E8%A3%85%E9%A5%B0%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<h2 id="什么是装饰器"><a href="#什么是装饰器" class="headerlink" title="什么是装饰器"></a>什么是装饰器</h2><p>在不修改原有类或者方法的情况下，给类或者方法添加新的内容。</p><h2 id="怎么实现"><a href="#怎么实现" class="headerlink" title="怎么实现"></a>怎么实现</h2><h4 id="简单包裹方法"><a href="#简单包裹方法" class="headerlink" title="简单包裹方法"></a>简单包裹方法</h4><p>通过得到原有方法的实例，由一个新的方法对其进行包裹，例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">source_func</span>():<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;这里是原来方法&quot;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">wrapper_func</span>():<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;wrapper方法执行新的内容&quot;</span>)<br>source_func();<br><br></code></pre></td></tr></table></figure><h4 id="参数包裹方法"><a href="#参数包裹方法" class="headerlink" title="参数包裹方法"></a>参数包裹方法</h4><p>由于python可以将方法当作参数进行传递，如果碰到很多需要添加某个功能的函数就可以这样做：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">wrapper_func</span>(<span class="hljs-params">func</span>):<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;例如这是一个日志功能，其他的函数都需要新增这样的一段功能&quot;</span>)<br>func()<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">func1</span>():<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;func1&quot;</span>)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">func2</span>():<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;func2&quot;</span>)<br><br><span class="hljs-comment"># 使用的时候可以这样</span><br>func1 = wrapper_func(func1)<br>func2 = wrapper_func(func2)<br><br></code></pre></td></tr></table></figure><h4 id="语法糖"><a href="#语法糖" class="headerlink" title="语法糖"></a>语法糖</h4><p>由于在pyhon中这样的需求很多，python语言将这类的包裹方法按照特定语法可以使用 @ 符号的语法糖，具体使用例子如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">wrapper_func</span>(<span class="hljs-params">func</span>):<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">wrapper</span>():<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;这里是wrapper方法&quot;</span>)<br><span class="hljs-keyword">return</span> func()<br><span class="hljs-keyword">return</span> wrapper<br><br><span class="hljs-meta">@wrapper_func</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">my_func</span>():<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;这里是自定义方法&quot;</span>)<br><br></code></pre></td></tr></table></figure><h2 id="额外"><a href="#额外" class="headerlink" title="额外"></a>额外</h2><h4 id="带参数的方法如何进行包裹"><a href="#带参数的方法如何进行包裹" class="headerlink" title="带参数的方法如何进行包裹"></a>带参数的方法如何进行包裹</h4><p>可以使用  <code>*args、**kwargs</code>  关键字即可<br>对于单个已知参数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">func1</span>(<span class="hljs-params">name</span>):<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;i am %s&quot;</span> % name)<br><br><span class="hljs-comment"># 可以在定义wrapper方法的时候传入参数</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">wrapper</span>(<span class="hljs-params">name</span>):<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;wrapper 方法&quot;</span>)<br><span class="hljs-keyword">return</span> func(name)<br><br><span class="hljs-comment"># 对于不知道有几个参数的情况</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">wrapper</span>(<span class="hljs-params">*args</span>):<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;wrapper方法&quot;</span>)<br><span class="hljs-keyword">return</span> func(*args)<br><span class="hljs-comment"># 对于有默认参数的情况</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">foo</span>(<span class="hljs-params">name, age=<span class="hljs-literal">None</span>, height=<span class="hljs-literal">None</span></span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;I am %s, age %s, height %s&quot;</span> % (name, age, height))<br><br><span class="hljs-comment"># </span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">wrapper</span>(<span class="hljs-params">*args, **kwargs</span>):<br>        <span class="hljs-comment"># args是一个数组，kwargs一个字典</span><br>        logging.warn(<span class="hljs-string">&quot;%s is running&quot;</span> % func.__name__)<br>        <span class="hljs-keyword">return</span> func(*args, **kwargs)<br><br></code></pre></td></tr></table></figure><h4 id="带参数的装饰器"><a href="#带参数的装饰器" class="headerlink" title="带参数的装饰器"></a>带参数的装饰器</h4><p>装饰器带参数，需要装饰器函数外部在包裹一层。具体如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">use_logging</span>(<span class="hljs-params">level</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">decorator</span>(<span class="hljs-params">func</span>):<br>        <span class="hljs-keyword">def</span> <span class="hljs-title function_">wrapper</span>(<span class="hljs-params">*args, **kwargs</span>):<br>            <span class="hljs-keyword">if</span> level == <span class="hljs-string">&quot;warn&quot;</span>:<br>                logging.warn(<span class="hljs-string">&quot;%s is running&quot;</span> % func.__name__)<br>            <span class="hljs-keyword">elif</span> level == <span class="hljs-string">&quot;info&quot;</span>:<br>                logging.info(<span class="hljs-string">&quot;%s is running&quot;</span> % func.__name__)<br>            <span class="hljs-keyword">return</span> func(*args)<br>        <span class="hljs-keyword">return</span> wrapper<br><br>    <span class="hljs-keyword">return</span> decorator<br><br><span class="hljs-meta">@use_logging(<span class="hljs-params">level=<span class="hljs-string">&quot;warn&quot;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">foo</span>(<span class="hljs-params">name=<span class="hljs-string">&#x27;foo&#x27;</span></span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;i am %s&quot;</span> % name)<br><br>foo()<br></code></pre></td></tr></table></figure><h2 id="装饰器类"><a href="#装饰器类" class="headerlink" title="装饰器类"></a>装饰器类</h2><p>没错，装饰器不仅可以是函数，还可以是类，相比函数装饰器，类装饰器具有灵活度大、高内聚、封装性等优点。使用类装饰器主要依靠类的<code>__call__</code>方法，当使用 @ 形式将装饰器附加到函数上时，就会调用此方法。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Foo</span>(<span class="hljs-title class_ inherited__">object</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, func</span>):<br>        self._func = func<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__call__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span> (<span class="hljs-string">&#x27;class decorator runing&#x27;</span>)<br>        self._func()<br>        <span class="hljs-built_in">print</span> (<span class="hljs-string">&#x27;class decorator ending&#x27;</span>)<br><br><span class="hljs-meta">@Foo</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">bar</span>():<br>    <span class="hljs-built_in">print</span> (<span class="hljs-string">&#x27;bar&#x27;</span>)<br><br>bar()<br><br></code></pre></td></tr></table></figure><h2 id="Python自带的有用的装饰器"><a href="#Python自带的有用的装饰器" class="headerlink" title="Python自带的有用的装饰器"></a>Python自带的有用的装饰器</h2><h3 id="property"><a href="#property" class="headerlink" title="@property"></a>@property</h3><p>该装饰器可以将类方法变成属性的调用方式。类似于getter setter方法，具体实现如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">People</span>:<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, name, age</span>):<br>        self.__name = name<br>        self.__age = age<br><br><span class="hljs-meta">    @property</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">age</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> self.__age<br><br><span class="hljs-meta">    @age.setter</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">age</span>(<span class="hljs-params">self, age</span>):<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">isinstance</span>(age, <span class="hljs-built_in">int</span>):<br>            self.__age = age<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">raise</span> ValueError<br><br><span class="hljs-meta">    @age.deleter</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">age</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;删除年龄数据！&quot;</span>)<br><br>obj = People(<span class="hljs-string">&quot;jack&quot;</span>, <span class="hljs-number">18</span>)<br><span class="hljs-built_in">print</span>(obj.age)<br>obj.age = <span class="hljs-number">19</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;obj.age:  &quot;</span>, obj.age)<br><span class="hljs-keyword">del</span> obj.age<br><br>---------------------------<br>打印结果：<br><span class="hljs-number">18</span><br>obj.age:   <span class="hljs-number">19</span><br>删除年龄数据！<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
      <category>Python语法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>article</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>音节</title>
    <link href="/2022/12/21/%E9%9F%B3%E8%8A%82/"/>
    <url>/2022/12/21/%E9%9F%B3%E8%8A%82/</url>
    
    <content type="html"><![CDATA[<h2 id="韩语输入法参考"><a href="#韩语输入法参考" class="headerlink" title="韩语输入法参考"></a>韩语输入法参考</h2><h3 id="q-ㅂ-a-ㅁ-z-ㅋ"><a href="#q-ㅂ-a-ㅁ-z-ㅋ" class="headerlink" title="q ㅂ     a  ㅁ       z ㅋ"></a>q ㅂ     a  ㅁ       z ㅋ</h3><h3 id="w-ㅈ-s-ㄴ-x-ㅌ"><a href="#w-ㅈ-s-ㄴ-x-ㅌ" class="headerlink" title="w ㅈ     s  ㄴ       x ㅌ"></a>w ㅈ     s  ㄴ       x ㅌ</h3><h3 id="e-ㄷ-d-ㅇ-c-ㅊ"><a href="#e-ㄷ-d-ㅇ-c-ㅊ" class="headerlink" title="e ㄷ     d  ㅇ       c ㅊ"></a>e ㄷ     d  ㅇ       c ㅊ</h3><h3 id="r-ㄱ-f-ㄹ-v-ㅍ"><a href="#r-ㄱ-f-ㄹ-v-ㅍ" class="headerlink" title="r ㄱ     f  ㄹ       v ㅍ"></a>r ㄱ     f  ㄹ       v ㅍ</h3><h3 id="t-ㅅ-g-ㅎ-b-ㅠ"><a href="#t-ㅅ-g-ㅎ-b-ㅠ" class="headerlink" title="t ㅅ     g  ㅎ       b ㅠ"></a>t ㅅ     g  ㅎ       b ㅠ</h3><h3 id="y-ㅛ-h-ㅗ-n-ㅜ"><a href="#y-ㅛ-h-ㅗ-n-ㅜ" class="headerlink" title="y ㅛ     h  ㅗ       n ㅜ"></a>y ㅛ     h  ㅗ       n ㅜ</h3><h3 id="u-ㅕ-j-ㅓ-m-ㅡ"><a href="#u-ㅕ-j-ㅓ-m-ㅡ" class="headerlink" title="u ㅕ     j  ㅓ       m ㅡ"></a>u ㅕ     j  ㅓ       m ㅡ</h3><h3 id="i-ㅑ-k-ㅏ"><a href="#i-ㅑ-k-ㅏ" class="headerlink" title="i ㅑ     k  ㅏ"></a>i ㅑ     k  ㅏ</h3><h3 id="o-ㅐ-l-ㅣ"><a href="#o-ㅐ-l-ㅣ" class="headerlink" title="o ㅐ     l  ㅣ"></a>o ㅐ     l  ㅣ</h3><h3 id="p-ㅔ"><a href="#p-ㅔ" class="headerlink" title="p ㅔ"></a>p ㅔ</h3><h2 id="元音"><a href="#元音" class="headerlink" title="元音"></a>元音</h2><h3 id="单母音"><a href="#单母音" class="headerlink" title="单母音"></a>单母音</h3><h4 id="ㅏ-类似中文的-a"><a href="#ㅏ-类似中文的-a" class="headerlink" title="ㅏ 类似中文的 a"></a>ㅏ 类似中文的 a</h4><h4 id="ㅓ-类似中文的o"><a href="#ㅓ-类似中文的o" class="headerlink" title="ㅓ 类似中文的o"></a>ㅓ 类似中文的o</h4><h4 id="ㅗ-类似中文的wo，圆唇"><a href="#ㅗ-类似中文的wo，圆唇" class="headerlink" title="ㅗ 类似中文的wo，圆唇"></a>ㅗ 类似中文的wo，圆唇</h4><h4 id="ㅜ-类似于中文的wu，圆唇"><a href="#ㅜ-类似于中文的wu，圆唇" class="headerlink" title="ㅜ 类似于中文的wu，圆唇"></a>ㅜ 类似于中文的wu，圆唇</h4><h4 id="ㅡ-类似于发音-zi-ci-si-后面的那个发起来像日的音，发音在软腭附近"><a href="#ㅡ-类似于发音-zi-ci-si-后面的那个发起来像日的音，发音在软腭附近" class="headerlink" title="ㅡ 类似于发音 zi ci si 后面的那个发起来像日的音，发音在软腭附近"></a>ㅡ 类似于发音 zi ci si 后面的那个发起来像日的音，发音在软腭附近</h4><h4 id="ㅣ-类似于中文-yi"><a href="#ㅣ-类似于中文-yi" class="headerlink" title="ㅣ 类似于中文 yi"></a>ㅣ 类似于中文 yi</h4><h4 id="ㅐ-类似于英文中的ae"><a href="#ㅐ-类似于英文中的ae" class="headerlink" title="ㅐ 类似于英文中的ae"></a>ㅐ 类似于英文中的ae</h4><h4 id="ㅔ-同上"><a href="#ㅔ-同上" class="headerlink" title="ㅔ 同上"></a>ㅔ 同上</h4><h4 id="ㅚ-发音先做一个-o-的口型，快速发e的音。-ou-wei"><a href="#ㅚ-发音先做一个-o-的口型，快速发e的音。-ou-wei" class="headerlink" title="ㅚ  发音先做一个 o 的口型，快速发e的音。 ou wei"></a>ㅚ  发音先做一个 o 的口型，快速发e的音。 ou wei</h4><h4 id="ㅟ-类似于中文的-yu-音"><a href="#ㅟ-类似于中文的-yu-音" class="headerlink" title="ㅟ  类似于中文的 yu 音"></a>ㅟ  类似于中文的 yu 音</h4><p>单母音无法单独成字，需要跟随辅助字母成字。规律为先上，后左。<br>아 어 오 우 으 이 애 에 외 위</p><h3 id="复合母音"><a href="#复合母音" class="headerlink" title="复合母音"></a>复合母音</h3><p>规律： 组合母音滑动音节发音。先发ㅣ音，后发其他音<br>ㅑ ya<br>ㅔ yeo<br>ㅛ yo<br>ㅠ yu<br>ㅒㅖ ye<br>规律：组合母音滑动音节发音。先发ㅗ （wu） 音，后发其他音<br>ㅘ wo a<br>ㅙ wo ea<br> 这两组发音类似<br>ㅝ wo a<br>ㅞ wo ea</p><p>ㅢ e i   分开发e和i的音 这个音在词首发全音，在词末前不发音，只发 i</p><h2 id="字音-x2F-辅音"><a href="#字音-x2F-辅音" class="headerlink" title="字音&#x2F;辅音"></a>字音&#x2F;辅音</h2><table><thead><tr><th>音节</th><th>k</th><th>n</th><th>t</th><th>l</th><th>m</th><th>p</th><th>s</th><th>o</th><th>z</th><th>h</th></tr></thead><tbody><tr><td>平音</td><td>ㄱ</td><td>ㄴ</td><td>ㄷ</td><td>ㄹ</td><td>ㅁ</td><td>ㅂ</td><td>ㅅ</td><td></td><td>ㅈ</td><td></td></tr><tr><td>送气音</td><td>ㅋ</td><td></td><td>ㅌ</td><td></td><td></td><td>ㅍ</td><td></td><td></td><td>ㅊ</td><td>ㅎ</td></tr><tr><td>重音</td><td>ㄲ</td><td></td><td>ㄸ</td><td></td><td></td><td>ㅃ</td><td>ㅆ</td><td></td><td>ㅉ</td><td></td></tr></tbody></table><h2 id="韵尾"><a href="#韵尾" class="headerlink" title="韵尾"></a>韵尾</h2><h3 id="单韵尾"><a href="#单韵尾" class="headerlink" title="单韵尾"></a>单韵尾</h3><p>规律： 写在 字音母音词下面，全部由字音构成的。会对音的末尾产生影响。<br>ㄱ  舌根处顶住软腭，截断气流              ㅋ ㄲ<br>ㄴ   发音为n 相当于日语的ん<br>ㄷ   舌尖处截断气流               ㅅ  ㅈ    ㅊ ㅌ ㅎ ㅆ<br>ㄹ   舌尖不动，让气流从两侧走，发儿化音<br>ㅁ    双唇紧闭，气流是从鼻子后面出来， 发 ng音，一定要紧闭嘴巴，和圆圈分辨<br>ㅂ   唇部截断气流         ㅍ<br>ㅇ 舌根顶住软腭，顶住气流 发ng<br>韵尾又分为单韵尾和双韵尾，单韵尾和双韵尾都发第一个韵尾的音，不过双韵尾后面的字发音如果是单母音词，则将双韵尾后一个字音借给单母音进行发音，否则后面发音发重音。</p><h3 id="双韵尾"><a href="#双韵尾" class="headerlink" title="双韵尾"></a>双韵尾</h3><p>不发右边音只发左边音，右边可以和下一个词的母音拼接成为首音。<br>ㄳ ㅄ  ㄵ  ㄽ   ㄾ<br>不发左边音只发右边音，同上可拼接,拼接的还是右边的那个<br>ㄻ ㄺ ㄼ ㄿ ㄶ ㅀ<br>单独发音只发左边音，有特殊情况<br>ㄶ ㅀ<br>    当后面接 ㄱ ㄷ ㅈ ，将其变为对应送气音 ㅋ ㅌ ㅊ<br>    当后面接ㅅ，要变为紧音的ㅆ<br>    当后面接母音的时候，继续发左边的音，同时左边的音也要借到右边去</p><h2 id="连音现象"><a href="#连音现象" class="headerlink" title="连音现象"></a>连音现象</h2><p>跟上面双韵尾一个原理，后面有母音直接将前面的韵尾给后头就好了</p>]]></content>
    
    
    <categories>
      
      <category>语言</category>
      
      <category>韩国语</category>
      
    </categories>
    
    
    <tags>
      
      <tag>article</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>常用插件下载</title>
    <link href="/2022/09/07/%E5%B8%B8%E7%94%A8%E6%8F%92%E4%BB%B6%E4%B8%8B%E8%BD%BD/"/>
    <url>/2022/09/07/%E5%B8%B8%E7%94%A8%E6%8F%92%E4%BB%B6%E4%B8%8B%E8%BD%BD/</url>
    
    <content type="html"><![CDATA[<h2 id="OpenUPM"><a href="#OpenUPM" class="headerlink" title="OpenUPM"></a>OpenUPM</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>一个类似于NPM的包下载工具,在unity根目录执行相应下载指令即可下载对应的包。</p><h3 id="使用安装"><a href="#使用安装" class="headerlink" title="使用安装"></a>使用安装</h3><p>需要安装nodejs环境<br>随后执行 <code>npm install -g openupm-cli</code>  即安装成功。</p><p>安装unity包的指令是 </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><br>openupm add com.littlebigfun.addressable-importer<br><br></code></pre></td></tr></table></figure><h3 id="常用插件包"><a href="#常用插件包" class="headerlink" title="常用插件包"></a>常用插件包</h3><h4 id="UniRx-Reactive-Extensions-for-Unity"><a href="#UniRx-Reactive-Extensions-for-Unity" class="headerlink" title="UniRx - Reactive Extensions for Unity"></a>UniRx - Reactive Extensions for Unity</h4><p>用于 Unity 响应式 ， 类似于JS的Promise语法</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs avrasm">openupm <span class="hljs-keyword">add</span> <span class="hljs-keyword">com</span>.neuecc.unirx<br></code></pre></td></tr></table></figure><h4 id="UniTask"><a href="#UniTask" class="headerlink" title="UniTask"></a>UniTask</h4><p>用于 Unity async 和 await 语句</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs avrasm">openupm <span class="hljs-keyword">add</span> <span class="hljs-keyword">com</span>.cysharp.unitask<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Unity 代码库</category>
      
    </categories>
    
    
    <tags>
      
      <tag>article</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>编辑器</title>
    <link href="/2022/09/07/%E7%BC%96%E8%BE%91%E5%99%A8/"/>
    <url>/2022/09/07/%E7%BC%96%E8%BE%91%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<h4 id="Inspector编辑器实现自定义样式的文字-和-加载Icon"><a href="#Inspector编辑器实现自定义样式的文字-和-加载Icon" class="headerlink" title="Inspector编辑器实现自定义样式的文字 和 加载Icon"></a>Inspector编辑器实现自定义样式的文字 和 加载Icon</h4><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs c#"><br>[<span class="hljs-meta">CanEditMultipleObjects</span>]  <br>[<span class="hljs-meta">CustomEditor(typeof(CustomMonoBehaviour),true)</span>]<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">CustomEditor</span> : <span class="hljs-title">Editor</span>&#123;<br><span class="hljs-keyword">public</span> Texture2D icon;<br><span class="hljs-keyword">public</span> GUIStyle fontStyle;<br><span class="hljs-comment">// 一般初始化的时候先取得数据</span><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">OnEnable</span>()</span>  <br>&#123;<br>icon = Resources.Load(<span class="hljs-string">&quot;&quot;</span>) <span class="hljs-keyword">as</span> Texture2D;<br>&#125;<br><br><span class="hljs-comment">//  GUI用的是 编辑器绘制语法</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">override</span> <span class="hljs-keyword">void</span> <span class="hljs-title">OnInspectorGUI</span>()</span>  <br>&#123;  <br>    CheckEditorProperties();  <br>serializedObject.Update();<br>GUILayout.BeginVertical();   <br>DrawTittleHeader();  <br>DrawGUI();  <br>GUILayout.EndVertical();  <br>serializedObject.ApplyModifiedProperties();  <br>    <br>&#125;<br><span class="hljs-comment">// 绘制标题</span><br><span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">DrawTittleHeader</span>()</span>  <br>&#123;  <br>    GUILayout.BeginHorizontal();  <br>    <span class="hljs-keyword">if</span> (icon) GUILayout.Label(icon, GUIStyle.none, GUILayout.Height(<span class="hljs-number">70</span>), GUILayout.Width(<span class="hljs-number">70</span>));  <br>    GUILayout.Box(<span class="hljs-string">&quot;&quot;</span>, fontStyle);  <br>    GUILayout.EndHorizontal();  <br>&#125;<br> <span class="hljs-comment">// 自定义一个字体属性</span><br><span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">CheckEditorProperties</span>()</span>  <br>&#123;  <br>    <span class="hljs-keyword">if</span> (fontStyle == <span class="hljs-literal">null</span>)  <br>    &#123;        <br>    fontStyle = <span class="hljs-keyword">new</span> GUIStyle(EditorStyles.whiteLargeLabel);  <br>        fontStyle.imagePosition = ImagePosition.ImageLeft;  <br>        fontStyle.alignment = TextAnchor.UpperLeft;  <br>        fontStyle.fontSize = <span class="hljs-number">23</span>;  <br>        fontStyle.fontStyle = FontStyle.Bold;  <br>        fontStyle.wordWrap = <span class="hljs-literal">true</span>;  <br>        fontStyle.clipping =  TextClipping.Clip;  <br>    &#125;&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Unity 代码库</category>
      
    </categories>
    
    
    <tags>
      
      <tag>article</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Mock</title>
    <link href="/2022/09/07/Mock/"/>
    <url>/2022/09/07/Mock/</url>
    
    <content type="html"><![CDATA[<h4 id="常用的mock"><a href="#常用的mock" class="headerlink" title="常用的mock"></a>常用的mock</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> <span class="hljs-title class_">Mock</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;mockjs&#x27;</span>)<br><br><span class="hljs-keyword">const</span> mockDatas = <span class="hljs-title class_">Mock</span>.<span class="hljs-title function_">mock</span>(<br>        &#123;<br>            <span class="hljs-string">&quot;playerInfo|99999&quot;</span>: [<br>                &#123;<br>                    <span class="hljs-string">&quot;device_id&quot;</span>: <span class="hljs-string">&#x27;@string(20)&#x27;</span>,<br>                    <span class="hljs-string">&quot;country|1&quot;</span>: [<span class="hljs-string">&#x27;US&#x27;</span>,<span class="hljs-string">&#x27;CN&#x27;</span>],<br>                    <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&#x27;@name&#x27;</span>,<br>                    <span class="hljs-string">&quot;avatar_id&quot;</span>: <span class="hljs-string">&#x27;@integer&#x27;</span>,<br>                &#125;<br>            ]<br>        &#125;)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>NodeJs代码库</category>
      
    </categories>
    
    
    <tags>
      
      <tag>article</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>显示</title>
    <link href="/2022/09/07/%E6%98%BE%E7%A4%BA/"/>
    <url>/2022/09/07/%E6%98%BE%E7%A4%BA/</url>
    
    <content type="html"><![CDATA[<h4 id="进度条"><a href="#进度条" class="headerlink" title="进度条"></a>进度条</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span>bar= <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;progress-bar&#x27;</span>).<span class="hljs-title function_">create</span>(process.<span class="hljs-property">stdout</span>);<br><span class="hljs-comment">// 调用 该方法 传入0.01 百分数即可</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">progressBar</span>(<span class="hljs-params">percentage</span>)&#123;<br>    bar.<span class="hljs-property">symbols</span>.<span class="hljs-property">loaded</span> = <span class="hljs-string">&#x27;█&#x27;</span><br>    bar.<span class="hljs-property">symbols</span>.<span class="hljs-property">notLoaded</span>= <span class="hljs-string">&#x27;░&#x27;</span>;<span class="hljs-comment">// White star</span><br>    bar.<span class="hljs-property">width</span> = <span class="hljs-number">50</span>;<br>    bar.<span class="hljs-title function_">update</span>(percentage)<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>NodeJs代码库</category>
      
    </categories>
    
    
    <tags>
      
      <tag>article</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>文件操作</title>
    <link href="/2022/09/07/%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C/"/>
    <url>/2022/09/07/%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C/</url>
    
    <content type="html"><![CDATA[<h4 id="文件的读取"><a href="#文件的读取" class="headerlink" title="文件的读取"></a>文件的读取</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 返回一个list数组，参数是一个字符串,即可得到该目录下所有文件的名称</span><br><span class="hljs-title function_">getFileNames</span>(<span class="hljs-string">&quot;/flags&quot;</span>)<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">getFileNames</span>(<span class="hljs-params">path</span>) &#123;<br>  <span class="hljs-keyword">let</span> arr;<br>  <span class="hljs-comment">// 同步读取文件</span><br>  arr = fs.<span class="hljs-title function_">readdirSync</span>(path).<span class="hljs-title function_">map</span>(<span class="hljs-function"><span class="hljs-params">files</span> =&gt;</span> &#123;<br>    <span class="hljs-keyword">return</span> files;<br>  &#125;)<br>  <span class="hljs-keyword">return</span> arr;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="文件的写入"><a href="#文件的写入" class="headerlink" title="文件的写入"></a>文件的写入</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// data 必须为string</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">WriteFiles</span>(<span class="hljs-params">data,path</span>)&#123;<br>   fs.<span class="hljs-title function_">writeFileSync</span>(path,data)<br>&#125;<br><span class="hljs-comment">// datas 是一个对象，这个将对象转为json</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">WriteFiles</span>(<span class="hljs-params">datas,path</span>) &#123;<br>    <span class="hljs-comment">// 转换为json文件</span><br>    <span class="hljs-keyword">const</span> json = <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(datas)<br>    fs.<span class="hljs-title function_">writeFileSync</span>(path, json)<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="批量更改文件名"><a href="#批量更改文件名" class="headerlink" title="批量更改文件名"></a>批量更改文件名</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;fs&quot;</span>);<br><span class="hljs-keyword">const</span> path = <span class="hljs-string">&quot;./flags&quot;</span>;<br><br>fs.<span class="hljs-title function_">readdirSync</span>(path).<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">file</span>) =&gt;</span> &#123;<br>  fs.<span class="hljs-title function_">renameSync</span>(<span class="hljs-string">`<span class="hljs-subst">$&#123;path&#125;</span>/<span class="hljs-subst">$&#123;file&#125;</span>`</span>, <span class="hljs-string">`<span class="hljs-subst">$&#123;path&#125;</span>/<span class="hljs-subst">$&#123;file.toUpperCase()&#125;</span>`</span>);<br>&#125;);<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>NodeJs代码库</category>
      
    </categories>
    
    
    <tags>
      
      <tag>article</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>随机数</title>
    <link href="/2022/09/07/%E9%9A%8F%E6%9C%BA%E6%95%B0/"/>
    <url>/2022/09/07/%E9%9A%8F%E6%9C%BA%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs arcade">这个例子返回了一个在指定值之间的随机整数。这个值不小于 <span class="hljs-string">`min`</span> （如果 <span class="hljs-string">`min`</span> 不是整数，则不小于 <span class="hljs-string">`min`</span> 的向上取整数），且小于（不等于）<span class="hljs-string">`max`</span>。<br><br><br><span class="hljs-keyword">return</span> Math.<span class="hljs-built_in">floor</span>(Math.<span class="hljs-built_in">random</span>() * (<span class="hljs-built_in">max</span> - <span class="hljs-built_in">min</span>)) + <span class="hljs-built_in">min</span>;<br><br>得到一个两数之间的随机整数，包括两个数在内<br>Math.<span class="hljs-built_in">floor</span>(Math.<span class="hljs-built_in">random</span>() * (<span class="hljs-built_in">max</span> - <span class="hljs-built_in">min</span> + <span class="hljs-number">1</span>)) + <span class="hljs-built_in">min</span>; <br><br><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>NodeJs代码库</category>
      
    </categories>
    
    
    <tags>
      
      <tag>article</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>请求加密</title>
    <link href="/2022/09/07/%E8%AF%B7%E6%B1%82%E5%8A%A0%E5%AF%86/"/>
    <url>/2022/09/07/%E8%AF%B7%E6%B1%82%E5%8A%A0%E5%AF%86/</url>
    
    <content type="html"><![CDATA[<p>const md5 &#x3D; require(‘md5’)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">EncryptionParam</span>(<span class="hljs-params">req</span>)&#123;<br>    <span class="hljs-keyword">const</span> timestamp = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>().<span class="hljs-title function_">getTime</span>()<br>    <span class="hljs-keyword">const</span> saltToken = <span class="hljs-string">&quot;9d1b0dda2797412d8a1cf8bcadab0464&quot;</span><br>    <span class="hljs-comment">// md5加密</span><br>    <span class="hljs-keyword">const</span> tokenStr = <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(req) + saltToken + timestamp<br>    <span class="hljs-comment">// 加密必须是 字符串</span><br>    <span class="hljs-keyword">const</span> token = <span class="hljs-title function_">md5</span>(tokenStr)<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>NodeJs代码库</category>
      
    </categories>
    
    
    <tags>
      
      <tag>article</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>单元测试</title>
    <link href="/2022/09/07/%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/"/>
    <url>/2022/09/07/%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/</url>
    
    <content type="html"><![CDATA[<h4 id="性能测试"><a href="#性能测试" class="headerlink" title="性能测试"></a>性能测试</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">time</span>(<span class="hljs-string">&#x27;time:&#x27;</span>)<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i =<span class="hljs-number">0</span> ; i &lt; <span class="hljs-number">1000000</span>; i++)&#123;<br><br>    <span class="hljs-keyword">const</span> a = i<br><br>&#125;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">timeEnd</span>(<span class="hljs-string">&#x27;time:&#x27;</span>)<br><span class="hljs-comment">//time: 2.37ms</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>NodeJs代码库</category>
      
    </categories>
    
    
    <tags>
      
      <tag>article</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>文件服务器</title>
    <link href="/2022/09/07/%E6%96%87%E4%BB%B6%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    <url>/2022/09/07/%E6%96%87%E4%BB%B6%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><br><br><span class="hljs-keyword">const</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;express&#x27;</span>)  <br><span class="hljs-keyword">const</span> app = <span class="hljs-title function_">express</span>()  <br>  <br>app.<span class="hljs-title function_">use</span>(express.<span class="hljs-title function_">static</span>(__dirname+<span class="hljs-string">&quot;/files&quot;</span>))  <br>app.<span class="hljs-title function_">listen</span>(<span class="hljs-number">3000</span>,<span class="hljs-string">&quot;127.10.0.1&quot;</span>, <span class="hljs-function">() =&gt;</span> &#123;  <br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;app listening on http://127.10.0.1:3000&quot;</span>)  <br>&#125;)<br><br></code></pre></td></tr></table></figure><p>随后将文件放在files中<br>访问 <code>http://127.10.0.1:3000/文件名</code> 即可，如果是html文件则显示网页， 其他格式的，基本都会直接进行下载。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs ad-warning"><br>如果想要另一个设备访问该地址，例如模拟器或者手机。那么监听的地址应该是&quot;0.0.0.0&quot;,访问的地址为本机局域网的ip地址加上端口号。<br>例如： 本机ip为:192.168.137.1 <br>app.listen(3000,&quot;0.0.0.0&quot;);<br><br>设备访问 *192.168.137.1:3000* 即可<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>NodeJs代码库</category>
      
      <category>服务器相关</category>
      
    </categories>
    
    
    <tags>
      
      <tag>article</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Git 基础使用</title>
    <link href="/2022/09/07/Git%20%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8/"/>
    <url>/2022/09/07/Git%20%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h3 id="初始化git"><a href="#初始化git" class="headerlink" title="初始化git"></a>初始化git</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">// 将尚未进行版本控制的本地目录转换为 Git 仓库；<br>git init<br>从其它服务器 **克隆** 一个已存在的 Git 仓库。<br>//执行克隆命令 <br>git <span class="hljs-built_in">clone</span> https://github.com/libgit2/libgit2 diyLibaryName <br></code></pre></td></tr></table></figure><h3 id="暂存修改文件"><a href="#暂存修改文件" class="headerlink" title="暂存修改文件"></a>暂存修改文件</h3><p>要暂存这次更新，需要运行 <code>git add</code> 命令。 这是个多功能命令：可以用它开始跟踪新文件，或者把已跟踪的文件放到暂存区，还能用于合并时把有冲突的文件标记为已解决状态等。 将这个命令理解为“精确地将内容添加到下一次提交中”而不是“将一个文件添加到项目中”要更加合适。<br>如果使用add命令后，你又改了某个文件的内容，那么这个文件将会同时出现在<strong>暂存区</strong>和<strong>非暂存区</strong></p><h3 id="查看git-状态"><a href="#查看git-状态" class="headerlink" title="查看git 状态"></a>查看git 状态</h3><blockquote><p>如果你使用 <code>git status -s</code> 命令或 <code>git status --short</code> 命令，你将得到一种格式更为紧凑的输出</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ git status -s <br>M README // 修改未暂存 <br>MM Rakefile // 修改进暂存 <br>A lib/git.rb //新增的 <br>M lib/simplegit.rb // 暂存又修改了 <br>?? LICENSE.txt //未暂存<br></code></pre></td></tr></table></figure><h3 id="忽略暂存文件"><a href="#忽略暂存文件" class="headerlink" title="忽略暂存文件"></a>忽略暂存文件</h3><p>一般我们总会有些文件无需纳入 Git 的管理，也不希望它们总出现在未跟踪文件列表。 通常都是些自动生成的文件，比如日志文件，或者编译过程中创建的临时文件等。 在这种情况下，我们可以创建一个名为 <code>.gitignore</code> 的文件，列出要忽略的文件的模式。 来看一个实际的 <code>.gitignore</code> 例子：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-variable">$</span> <span class="hljs-built_in">cat</span> .gitignore *.[<span class="hljs-type">oa</span>] //忽略o 和 a 结尾的文件 *~ //忽略以波浪结尾的文件<br></code></pre></td></tr></table></figure><p>文件 <code>.gitignore</code> 的格式规范如下：</p><ul><li>所有空行或者以 <code>#</code> 开头的行都会被 Git 忽略。</li><li>可以使用标准的 glob 模式匹配，它会递归地应用在整个工作区中。</li><li>匹配模式可以以（<code>/</code>）开头防止递归。</li><li>匹配模式可以以（<code>/</code>）结尾指定目录。</li><li>要忽略指定模式以外的文件或目录，可以在模式前加上叹号（<code>!</code>）取反。</li></ul><p>所谓的 glob 模式是指 shell 所使用的简化了的正则表达式。 星号（<code>*</code>）匹配零个或多个任意字符；<code>[abc]</code> 匹配任何一个列在方括号中的字符 （这个例子要么匹配一个 a，要么匹配一个 b，要么匹配一个 c）； 问号（<code>?</code>）只匹配一个任意字符；如果在方括号中使用短划线分隔两个字符， 表示所有在这两个字符范围内的都可以匹配（比如 <code>[0-9]</code> 表示匹配所有 0 到 9 的数字）。 使用两个星号（<code>**</code>）表示匹配任意中间目录，比如 <code>a/**/z</code> 可以匹配 <code>a/z</code> 、 <code>a/b/z</code> 或 <code>a/b/c/z</code> 等。</p><h3 id="flow流协作"><a href="#flow流协作" class="headerlink" title="flow流协作"></a>flow流协作</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs powershell">// 这里可以使用变基代替pull<br>git pull / git fetch &amp;&amp; git rebase<br><br>//切换一个工作分支<br>git branch feature<span class="hljs-literal">-1103</span><br>//工作完之后想办法合并到主分支上面<br>git <span class="hljs-keyword">switch</span> master<br>//使用这个命令的前提还是要前面无人提交否则 还需要在feature分支里面进行rebase<br>git merge branch feature<span class="hljs-literal">-1103</span><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Git</category>
      
    </categories>
    
    
    <tags>
      
      <tag>article</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Time.deltatime</title>
    <link href="/2022/09/07/Time.deltatime/"/>
    <url>/2022/09/07/Time.deltatime/</url>
    
    <content type="html"><![CDATA[<h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p>Unity 中的deltaTime 一般被称作为增量时间， 在Unity中只需要记住如果要放入Update中进行变化的数据，都需要乘以它，表示每秒执行到目标数值。<br>例如 每秒移动10m</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Update</span>()</span>&#123;<br>tranform.Translate(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>, <span class="hljs-number">10</span> * Time.deltaTIme)<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="诞生原因"><a href="#诞生原因" class="headerlink" title="诞生原因"></a>诞生原因</h4><p>由于游戏受到设备的条件因素，造成游戏的内容的执行速率不同。<br>例如，要执行一条1s 移动100m的指令，设定好游戏的执行帧率为60。对于有些设备如果没有执行到60帧，那么就有可能移动不到100m。<br>因而，需要引入一个增量时间的概念，即1s&#x2F;实际执行的帧率。这样就能保证1s的时间执行数值是固定的。</p><h4 id="深入原理"><a href="#深入原理" class="headerlink" title="深入原理"></a>深入原理</h4><p>设定好计时器1s的具体事件<br>deltaTime 判定当前执行速率 是多少，如果达到了正常数额 例如 1&#x2F;60 则不管， 如果没达到则需要在下一帧的时候多执行一点。<br>最后的执行结果就是<br>S &#x3D; s0+s1+s2+s3..<br>&#x3D;V*(t0+t1+t2…)<br>&#x3D;Vx1<br>&#x3D;V</p>]]></content>
    
    
    <categories>
      
      <category>Game</category>
      
      <category>UnityAPI</category>
      
      <category>Time</category>
      
    </categories>
    
    
    <tags>
      
      <tag>article</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>编辑器简介</title>
    <link href="/2022/09/07/%E7%BC%96%E8%BE%91%E5%99%A8%E7%AE%80%E4%BB%8B/"/>
    <url>/2022/09/07/%E7%BC%96%E8%BE%91%E5%99%A8%E7%AE%80%E4%BB%8B/</url>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Unity 允许通过自定义 <strong>Inspector</strong> 和<strong>编辑器窗口</strong> 来扩展编辑器，并且您可以通过自定义的<strong>属性绘制器</strong>来定义属性在 Inspector 中的显示方式。<br>Inspector 对应的是脚本上面呈现的内容。<br>编辑器窗口则是出现在topbar上面的按钮点击出现的一个窗口。</p><p>两种模式的扩展均可以使用同一套绘制组件的API进行窗口绘制。</p>]]></content>
    
    
    <categories>
      
      <category>Game</category>
      
      <category>UnityAPI</category>
      
      <category>Unity Editor</category>
      
    </categories>
    
    
    <tags>
      
      <tag>article</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Unity 自定义编辑器</title>
    <link href="/2022/09/07/Unity%20%E8%87%AA%E5%AE%9A%E4%B9%89%E7%BC%96%E8%BE%91%E5%99%A8/"/>
    <url>/2022/09/07/Unity%20%E8%87%AA%E5%AE%9A%E4%B9%89%E7%BC%96%E8%BE%91%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<h3 id="自定义编辑器概述"><a href="#自定义编辑器概述" class="headerlink" title="自定义编辑器概述"></a>自定义编辑器概述</h3><p>自定义编辑器由两个脚本构成，一个为普通脚本，另一个脚本则是继承Editor类且指向这个普通脚本。第二个脚本可以决定普通脚本在Inspector窗口的显示。</p><h3 id="自定义脚本基本呈现"><a href="#自定义脚本基本呈现" class="headerlink" title="自定义脚本基本呈现"></a>自定义脚本基本呈现</h3><p>自定义脚本需要在类的上面标注属性 <code>CustomEditor</code> 指向一个Inspector编辑器<br><code>CanEditMultipleObjects</code> 表示可以用此编辑器更改所有拥有脚本的Inspector。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">using</span> UnityEditor;  <br>[<span class="hljs-meta">CustomEditor(typeof(LookAtPoint))</span>]  <br>[<span class="hljs-meta">CanEditMultipleObjects</span>]  <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">LookAtPointEditor</span> : <span class="hljs-title">Editor</span> &#123;  <br>    SerializedProperty lookAtPoint;  <br>  <br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">OnEnable</span>()</span>  <br>    &#123;        <br>    <span class="hljs-comment">// 可以拿到脚本上标注的值</span><br>    lookAtPoint = serializedObject.FindProperty(<span class="hljs-string">&quot;lookAtPoint&quot;</span>);  <br>    &#125;  <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">override</span> <span class="hljs-keyword">void</span> <span class="hljs-title">OnInspectorGUI</span>()</span>  <br>    &#123;        <br>    <span class="hljs-comment">// 这里可以编写各种GUI代码</span><br>    serializedObject.Update();  <br>        EditorGUILayout.PropertyField(lookAtPoint);  <br>        serializedObject.ApplyModifiedProperties();  <br>    &#125;&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Game</category>
      
      <category>UnityAPI</category>
      
      <category>Unity Editor</category>
      
    </categories>
    
    
    <tags>
      
      <tag>article</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>安卓和Unity3D交互</title>
    <link href="/2022/09/07/%E5%AE%89%E5%8D%93%E5%92%8CUnity3D%E4%BA%A4%E4%BA%92/"/>
    <url>/2022/09/07/%E5%AE%89%E5%8D%93%E5%92%8CUnity3D%E4%BA%A4%E4%BA%92/</url>
    
    <content type="html"><![CDATA[<h2 id="安卓和Unity3D交互"><a href="#安卓和Unity3D交互" class="headerlink" title="安卓和Unity3D交互"></a>安卓和Unity3D交互</h2><p><strong><a href="https://bbs.huaweicloud.com/blogs/detail/285723">参考文章</a></strong></p><p><code>交互简单来说就是通信的一种，即unity和安卓可以互相发送信息。由于unity模拟器无法直接调用安卓特有的一些方法或者是基于安卓平台的SDK，那么Unity能够调用安卓里面的方法可以扩展unity的功能，意义十分巨大。同样的，安卓平台里可能通过自己的SDK获取到了某类信息，这类信息获取到后无法直接使用，需要发送给unity，unity根据这条信息做出反应，例如更新视图等。</code><br> 由此引出安卓和unity3d通信的常用场景。</p><ul><li><p>安卓 &gt;&gt;&gt; Unity 更新视图。</p></li><li><p>Unity &gt;&gt;&gt; 安卓 调用特有的SDK方法，注册SDK中的回调</p></li></ul><h3 id="Unity叫安卓"><a href="#Unity叫安卓" class="headerlink" title="Unity叫安卓"></a>Unity叫安卓</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-comment">//通过反射机制获取到class</span><br>AndroidJavaClass jc = <span class="hljs-keyword">new</span> AndroidJavaClass (<span class="hljs-string">&quot;com.unity3d.player.UnityPlayer&quot;</span>);<br><span class="hljs-comment">//特殊静态属性currentActivity获取到activity上下文，通过这个上下文可以随心所欲调用该activity下的方法</span><br>AndroidJavaObject jo = jc.GetStatic&lt;AndroidJavaObject&gt; (<span class="hljs-string">&quot;currentActivity&quot;</span>);<br>jo.Call (<span class="hljs-string">&quot;login&quot;</span>,<span class="hljs-string">&quot;&quot;</span>);<br></code></pre></td></tr></table></figure><p>以上就是最基础的用法。接下来还有一些用法。</p><ul><li><p>unity调用android静态方法。</p><blockquote><p>注意：这里的AndroidJavaClass()里面的是自己的包名+类名</p><p>这样写的可以不用继承UnityPlayerActivity也可以用</p></blockquote></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//C#: 这个类本质上就是通过反射去获取到对应的类，所以很方便。</span><br><span class="hljs-type">AndroidJavaClass</span> <span class="hljs-variable">jc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AndroidJavaClass</span> (<span class="hljs-string">&quot;com.example.test.Test&quot;</span>);<br>jc.GetStatic&lt;AndroidJavaObject&gt; (<span class="hljs-string">&quot;login&quot;</span>,<span class="hljs-string">&quot;&quot;</span>);<br><span class="hljs-comment">//android:</span><br><span class="hljs-keyword">package</span> com.example.test;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">login</span><span class="hljs-params">( String str )</span> &#123;    <br>   <span class="hljs-comment">// 写上自己的操作</span><br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><p>unity调用android非静态方法。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs csharp">AndroidJavaClass jc = <span class="hljs-keyword">new</span> AndroidJavaClass(<span class="hljs-string">&quot;com.hasee.librarydemo.Test&quot;</span>); <span class="hljs-comment">//包名加类名</span><br>AndroidJavaObject jo = jc.CallStatic&lt;AndroidJavaObject&gt;(<span class="hljs-string">&quot;getInstance&quot;</span>);<br>jo.Call(<span class="hljs-string">&quot;login&quot;</span>,<span class="hljs-string">&quot;&quot;</span>);<br></code></pre></td></tr></table></figure></li></ul><h3 id="安卓叫Unity"><a href="#安卓叫Unity" class="headerlink" title="安卓叫Unity"></a>安卓叫Unity</h3><ul><li>通过发消息UnitySendMessage的方式调用Unity</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//把消息发送给Unity场景中iFlytekASRController物体上的OnResult方法，哪儿都可以调用</span><br><span class="hljs-title class_">UnityPlayer</span>.<span class="hljs-title class_">UnitySendMessage</span>(<span class="hljs-string">&quot;iFlytekASRController&quot;</span>, <span class="hljs-string">&quot;OnResultWake&quot;</span>, resultString);<br></code></pre></td></tr></table></figure><ul><li><p>通过代理AndroidJavaProxy 的方式</p><blockquote><p>安卓给Unity通讯可以通过这个AndroidJavaProxy 的方式，使用起来比通过发消息要麻烦些，但是能干的事多了，而且使用这个代理相当于给Unity 的回调，比发消息要靠谱点。发消息使用的反射的机制，字符串也容易写错，可能会有发送失败、延迟等可能，但是用这个回调自然就更稳定啦 下面我写一个Demo做通讯测试</p></blockquote></li></ul><p>​ <strong>AS端：</strong> 1.首先要在AS端写一个接口，接口中可以写一些需要给Unity调用的方法或参数等，等于用于传过去给Unity的回调</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript">package com.<span class="hljs-property">example</span>.<span class="hljs-property">test</span>;<br><br>public interface <span class="hljs-title class_">UnityasrEventCallback</span> &#123;<br>    public <span class="hljs-keyword">void</span> <span class="hljs-title class_">Speechcontent</span>(int a);<br>    public <span class="hljs-keyword">void</span> <span class="hljs-title class_">Test1</span>(<span class="hljs-title class_">String</span> msg);<br>&#125;<br>复制代码<br></code></pre></td></tr></table></figure><p>2.写一个Activity用于与unity通讯，Unity端就调用这个方法（setCallback(UnityasrEventCallback callback)）将代理传过来，然后通过传过来的代理，将AS接口中定义的方法和参数回调传给Unity端</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript">   private <span class="hljs-title class_">UnityasrEventCallback</span> mCallback;<br>    <span class="hljs-comment">//获取接口内容</span><br>    public <span class="hljs-keyword">void</span> <span class="hljs-title function_">setCallback</span>(<span class="hljs-params">UnityasrEventCallback callback</span>)&#123;<br>        <span class="hljs-title class_">Log</span>.<span class="hljs-title function_">d</span>(<span class="hljs-string">&quot;@@@&quot;</span>, <span class="hljs-string">&quot;UnityBatteryEventCallback setCallback start &quot;</span>);<br>        mCallback = callback;<br>        <span class="hljs-title class_">Log</span>.<span class="hljs-title function_">d</span>(<span class="hljs-string">&quot;@@@&quot;</span>, <span class="hljs-string">&quot;UnityBatteryEventCallback setCallback end &quot;</span>);<br>         mCallback.<span class="hljs-title class_">Test1</span>(<span class="hljs-string">&quot;连通成功了&quot;</span>);<br>          mCallback.<span class="hljs-title class_">Speechcontent</span>(<span class="hljs-number">666</span>);<br>    &#125;<br>复制代码<br></code></pre></td></tr></table></figure><p><strong>Unity端：</strong> 1.在一个cs脚本中写一个内部类，然后继承AndroidJavaProxy。然后写一个构造方法继承AS的 包名+接口名 然后实现这个接口，方法名一定要与AS中写的一样，再定义一个数值用于接收AS中传过来的数据即可</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs csharp"> <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">AsrEventCallback</span> : <span class="hljs-title">AndroidJavaProxy</span><br>    &#123;<br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">AsrEventCallback</span>() : <span class="hljs-title">base</span>(<span class="hljs-params"><span class="hljs-string">&quot;com.example.test.UnityasrEventCallback&quot;</span></span>)</span> &#123;  &#125;<br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Speechcontent</span>(<span class="hljs-params"><span class="hljs-built_in">int</span> content</span>)</span>&#123;<span class="hljs-built_in">int</span> a = content;&#125;<br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Test1</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> msg</span>)</span>&#123;<span class="hljs-built_in">string</span> b = msg;&#125;<br>    &#125;<br>复制代码<br></code></pre></td></tr></table></figure><p>base()里的是AS中接口的，包名+接口名。看好不要写错<br><code>public AsrEventCallback() : base(&quot;com.example.test.UnityasrEventCallback&quot;)&#123; &#125;</code><br>然后在这个cs脚本的Start中new一个代理，然后通过 jo.Call(“setCallback”, asrEventCallback);将这个代理传到AS中，然后AS就可以调用这个代理给Unity返回数据了</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Start</span>()</span><br>&#123;<br>AndroidJavaClass jc = <span class="hljs-keyword">new</span> AndroidJavaClass(<span class="hljs-string">&quot;com.unity3d.player.UnityPlayer&quot;</span>);<br>AndroidJavaObject jo = jc.GetStatic&lt;AndroidJavaObject&gt;(<span class="hljs-string">&quot;currentActivity&quot;</span>);<br>AsrEventCallback asrEventCallback = <span class="hljs-keyword">new</span> AsrEventCallback();<br><span class="hljs-comment">// 设置语音识别回调函数接口</span><br>    jo.Call(<span class="hljs-string">&quot;setCallback&quot;</span>, asrEventCallback);<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Game</category>
      
      <category>UnityAPI</category>
      
    </categories>
    
    
    <tags>
      
      <tag>article</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>DoTween</title>
    <link href="/2022/09/07/DoTween/"/>
    <url>/2022/09/07/DoTween/</url>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Dotween 是一个缓动插件，能对Unity原生的对象的一些值进行缓动， 同时也支持一些自定义数值的缓动</p><h3 id="Dotween-的自定义缓动"><a href="#Dotween-的自定义缓动" class="headerlink" title="Dotween 的自定义缓动"></a>Dotween 的自定义缓动</h3><p><code>DOTween.To(getter,setter,to, float duration)</code><br>将给定属性从当前值更改为指定属性</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c#"><br>_progressAnim = DOTween.To(() =&gt; progressBar.fillAmount, <span class="hljs-keyword">value</span> =&gt;  <br>&#123;  <br>    <span class="hljs-keyword">var</span> x = _progressWidth * <span class="hljs-keyword">value</span>;  <br>    _fishRect.localPosition = <span class="hljs-keyword">new</span> Vector3(x, _fishLocalPos.y, _fishLocalPos.z);  <br>    progressBar.fillAmount = <span class="hljs-keyword">value</span>;  <br>&#125;,progress , <span class="hljs-number">1f</span>).SetEase(Ease.Linear).SetSpeedBased().SetUpdate(UpdateType.Fixed);<br>   <br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Game</category>
      
      <category>框架分析</category>
      
      <category>Unity DoTween</category>
      
    </categories>
    
    
    <tags>
      
      <tag>article</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Canvas更新系统</title>
    <link href="/2022/09/07/Canvas%E6%9B%B4%E6%96%B0%E7%B3%BB%E7%BB%9F/"/>
    <url>/2022/09/07/Canvas%E6%9B%B4%E6%96%B0%E7%B3%BB%E7%BB%9F/</url>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Canvas 更新系统采用了脏标记模式， 该模式能够捕捉变化的UI元素，并进行最小程度的更新。<br>Canvas 类会在每次渲染之前 执行 CanvasUpdateRegistry 类中的 PerformUpdate() 方法<br>该方法会分别取出 布局重建队列 和  图像重建队列里面的元素，执行其中的 Rebuild方法对其进行更新。</p><p>重建队列是由 具体的UI元素加上去的</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-comment">// Graphic</span><br><span class="hljs-comment">//  标记具体的布局</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">SetVerticesDirty</span>()</span>  <br>&#123;  <br>    <span class="hljs-keyword">if</span> (!IsActive())  <br>        <span class="hljs-keyword">return</span>;  <br>    m_VertsDirty = <span class="hljs-literal">true</span>;  <br>    <span class="hljs-comment">// 将本身传入到registery 中进行注册</span><br>    CanvasUpdateRegistry.RegisterCanvasElementForGraphicRebuild(<span class="hljs-keyword">this</span>);  <br>    <span class="hljs-keyword">if</span> (m_OnDirtyVertsCallback != <span class="hljs-literal">null</span>)  <br>        m_OnDirtyVertsCallback();  <br>&#125;<br><span class="hljs-comment">// 每类UI元素可能会有不同的更新自身的UI策略</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Rebuild</span>(<span class="hljs-params">CanvasUpdate update</span>)</span>  <br>&#123;  <br>    <span class="hljs-keyword">if</span> (canvasRenderer == <span class="hljs-literal">null</span> || canvasRenderer.cull)  <br>        <span class="hljs-keyword">return</span>;  <br>  <br>    <span class="hljs-keyword">switch</span> (update)  <br>    &#123;  <br>        <span class="hljs-keyword">case</span> CanvasUpdate.PreRender:  <br>            <span class="hljs-keyword">if</span> (m_VertsDirty)  <br>            &#123;                UpdateGeometry();  <br>                m_VertsDirty = <span class="hljs-literal">false</span>;  <br>            &#125;            <span class="hljs-keyword">if</span> (m_MaterialDirty)  <br>            &#123;                UpdateMaterial();  <br>                m_MaterialDirty = <span class="hljs-literal">false</span>;  <br>            &#125;            <span class="hljs-keyword">break</span>;  <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Game</category>
      
      <category>框架分析</category>
      
      <category>UGUI</category>
      
      <category>UGUI的 Canvas更新系统</category>
      
    </categories>
    
    
    <tags>
      
      <tag>article</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>QFramework</title>
    <link href="/2022/09/07/QFramework/"/>
    <url>/2022/09/07/QFramework/</url>
    
    <content type="html"><![CDATA[<h2 id="QFramework"><a href="#QFramework" class="headerlink" title="QFramework"></a>QFramework</h2><blockquote><p>QFramework 是一款轻量级游戏框架，其主要思想 划分系统架构，并通过事件在这几层架构中进行通信。</p></blockquote><h2 id="架构"><a href="#架构" class="headerlink" title="架构"></a>架构</h2><p>QFramework系统设计架构分为四层及其规则：<br>1、表现层：ViewController层。IController接口，负责接收输入和状态变化时的表现，一般情况下，MonoBehaviour均为表现层<br>2、系统层：System层。ISystem接口，帮助IController承担一部分逻辑，在多个表现层共享的逻辑，比如计时系统、商城系统、成就系统等<br>3、数据层：Model层。IModel接口，负责数据的定义、数据的增删查改方法的提供<br>4、工具层：Utility层。IUtility接口，负责提供基础设施，比如存储方法、序列化方法、网络连接方法、蓝牙方法、SDK、框架继承等。啥都干不了，可以集成第三方库，或者封装API</p><p>前三层均 实现 <strong>IBelongToArchitecture</strong> 接口，该接口能够获取到 前三层的对象，也可注册前三层的对象。 第四层比较特殊，是留给外部API进行交互的，需要前面三层得实现 GetUtility方法</p><h2 id="重要概念"><a href="#重要概念" class="headerlink" title="重要概念"></a>重要概念</h2><p>前面说了，通过事件可以进行各个层之间的交互。事件的注册是注册在全局的，可以在前三层任意地方进行触发，触发后执行的方法是一个Command ， Command 是一个重要的执行逻辑载体，该类也继承 <strong>IBelongToArchitecture</strong> 这意味着也可以随时访问到全局的各层方法。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这个框架轻量执行逻辑很清晰，不过由于所有的层的通信需要通过 Get+层+具体的类 来获取，实际上赋给每一个层级类的权限过大了，层类过多这个调用逻辑就会显得很复杂，但是这也是优点，类和类之间的调用就更为方便代码的利用率更高，如果能够规范好各类调用，其实还是很不错的。<br>例如做一个排行榜功能，排行版面板需要请求网络数据得到数据列表，随后根据这个列表数据进行渲染。这个过程就用到<code>GetSystem&lt;NetSystem&gt;</code> 用于网络请求， 并涉及到 <code>Model</code> 进行本地储存，并将raw数据处理成列表能够渲染的数据，随后在页面中就可以使用该数据 利用插件 <code>GetUtility&lt;SuperScrollView&gt;</code> 进行渲染。 渲染到子视图的每个排名玩家，可能存在一些触发，这些触发将会变成Command供 父类进行调用。<br>另一个缺点就是会写大量的用于标识接口的方法，例如Command 和 Event Model等等。一旦进行某些数据的修改，那么就会到很多模块中进行修改。<br>该框架的轻量级即是优点也是缺点，轻量也就意味着其余的很多模块需要自己完善或者是去下扩展包，例如资源的存储，资源的打包，网络通信，热更等一系列的方案，要实现一套适配于该框架的游戏框架解决方案的成本会显得很高。</p>]]></content>
    
    
    <categories>
      
      <category>Game</category>
      
      <category>框架分析</category>
      
      <category>QFramework</category>
      
    </categories>
    
    
    <tags>
      
      <tag>article</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数据源</title>
    <link href="/2022/09/07/%E6%95%B0%E6%8D%AE%E6%BA%90/"/>
    <url>/2022/09/07/%E6%95%B0%E6%8D%AE%E6%BA%90/</url>
    
    <content type="html"><![CDATA[<h3 id="数据源"><a href="#数据源" class="headerlink" title="数据源"></a>数据源</h3><p>这里的数据源指的是 MVVM 模式中的ViewModel，ViewModel 可以管理一系列的响应数据，监听数据的更改，一旦数据被更改了ViewModel则会发送消息到具体的UI上进行更新。<br>pepermint的 Source 主要是 <code>BindableMonoBehaviour</code> 和 <code>BindableObject</code> 这两个类，前者一般是挂载在UI上运行的，后者通常是一个List的Item项而存在的。<br>典型场景就是在进行数据请求的时候，拿到了一个Json数组，里面的对象字段就可以用BindableObject 来存储。 值得注意的是存储这类网络数据的时候，需要序列化对象。</p><p>除了以上说明的两个类之外，也可以自己实现一个数据响应Source， 这个Source 需实现接口 <code>INotifyPropertyChanged</code> , 该接口只有一个Action， 用于暴露给外部当前source对象以及source对象的响应数据。</p>]]></content>
    
    
    <categories>
      
      <category>Game</category>
      
      <category>框架分析</category>
      
      <category>PeperMint</category>
      
    </categories>
    
    
    <tags>
      
      <tag>article</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PeperMint</title>
    <link href="/2022/09/07/PeperMint/"/>
    <url>/2022/09/07/PeperMint/</url>
    
    <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>pepermint 是一款Unity的UGUI数据绑定框架，这款插件采用了<a href="#">Post not found: = MVVM模式</a>，实现了数据和视图的绑定。<br>这款插件具有以下特点：</p><ol><li>简洁的代码<br>Peppermint 数据绑定基于属性和反射。该类不需要从指定的类或接口继承，任何具有属性的对象都可以用作绑定源或绑定目标。现有代码只需进行最少的更改即可支持数据绑定<br>要检测源更改，源必须实现 INotifyPropertyChanged 接口，或者继承 Bindable 基类</li><li>易于设置<br>使 UI 支持数据绑定非常容易。您只需要添加三种类型的组件：DataContext、DataContextRegister 和 Binder。大多数组件只有很少的参数需要设置</li></ol><ul><li>内置的绑定包括所有 UGUI 组件的绑定，ImageBinder、AnimatorBinder、CustomBinder、Selector、Setter、Getter 等。您可以轻松创建自己的绑定类来支持新功能</li></ul><ol start="3"><li>Model-View-ViewModel 模式<br>Peppermint 数据绑定旨在简化使用 MVVM 模式构建游戏 UI。应用程序逻辑和 UI 之间的清晰分离将使您的游戏更容易测试、维护和扩展</li><li>性能<br>广泛优化的 C# 代码，例如类型缓存、对象池、自定义事件、快速委托等。</li></ol><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>跟其他的MVVM框架一样， pepermint 的使用也是将 视图 和 逻辑分开的，因此需要对视图和逻辑分别进行设置。</p><h4 id="视图操作"><a href="#视图操作" class="headerlink" title="视图操作"></a>视图操作</h4><p>视图需要绑定一个<a href="#">Post not found: = 计算机/Game/框架源码分析/PeperMint/数据源</a> ，绑定方法是在视图的根组件上添加 <code>DataRegister</code>  和 <code>DataContext</code> 组件，其中DataRegister中需要填写数据源的名称，该名称将会在Source中进行定义。<br>绑定了数据源后，即可使用数据源中的数据内容。对于基本的数据内容，pepermint提供了 <code>TextBinder</code> 用于绑定文本，<code>ButtonBinder</code> 用于绑定按钮的点击事件， <code>imageBinder</code> 用于绑定Image Sprite等等。</p><h4 id="视图模型操作"><a href="#视图模型操作" class="headerlink" title="视图模型操作"></a>视图模型操作</h4><p>pepermint中的VM 又称为 Source，为方便起见后文将用Source指代它。 Source中定义一个响应数据的基本格式如下：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-comment">// 需要定义一个全局的私有变量以及一个公共的变量</span><br><span class="hljs-keyword">private</span> ICommand setClickCommand;<br><span class="hljs-keyword">public</span> ICommand SetClickCommand  <br>&#123;  <br>    <span class="hljs-keyword">get</span> =&gt; setCategoryCountryCommand;  <br>    <span class="hljs-comment">// ref 指向私有变量，第三个参数为 UGUI上Binder 绑定这个数据的依据。</span><br>    <span class="hljs-keyword">set</span> &#123; SetProperty(<span class="hljs-keyword">ref</span> setClickCommand, <span class="hljs-keyword">value</span>, <span class="hljs-string">&quot;SetClickCommand&quot;</span>); &#125;  <br>&#125;<br><br><span class="hljs-keyword">private</span> String text;<br><span class="hljs-keyword">public</span> String Text  <br>&#123;  <br>    <span class="hljs-keyword">get</span> =&gt; text;  <br>    <span class="hljs-keyword">set</span> &#123; SetProperty(<span class="hljs-keyword">ref</span> text, <span class="hljs-keyword">value</span>, <span class="hljs-string">&quot;Text&quot;</span>); &#125;  <br>&#125;<br><br></code></pre></td></tr></table></figure><p>Source 的初始化一般就包括上面数据的一个绑定，以及下面将其添加到BindingManager中。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs C#"><span class="hljs-comment">// 这里第一个为当前source 对象，第二个为视图ContextRegister的依据</span><br>BindingManager.Instance.AddSource(<span class="hljs-keyword">this</span>, <span class="hljs-string">&quot;SourceName&quot;</span>);<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Game</category>
      
      <category>框架分析</category>
      
      <category>PeperMint</category>
      
    </categories>
    
    
    <tags>
      
      <tag>article</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Ilruntime</title>
    <link href="/2022/09/07/Ilruntime/"/>
    <url>/2022/09/07/Ilruntime/</url>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Ilruntime 是一款热更框架，用于产品打包上架后，能够通过拉取新的资源包和代码实现无需下载安装包而在程序上直接更新的功能。</p><h2 id="底层部分原理"><a href="#底层部分原理" class="headerlink" title="底层部分原理"></a>底层部分原理</h2><p>ILRuntime 内部集成了一个解释器系统，多亏于一个开源项目 Mono.cecil 项目，ILRuntime 可以读取解释由C#语言编译的IL的汇编指令，通过解释执行这些指令，实现 外部代码的执行。</p><h2 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h2><h3 id="下载对应的-dll文件"><a href="#下载对应的-dll文件" class="headerlink" title="下载对应的 dll文件"></a>下载对应的 dll文件</h3><p>下载可以用不同的网络工具 甚至可以用本地流进行加载，最终需要将dll转成2进制并且存在<br>最后 调用ILRuntime 的LoadAssembly 方法即可</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-built_in">byte</span>[] dll = res.bytes;<br><span class="hljs-comment">// pdb 文件是调试数据库，可以在日志中显示报错的行号</span><br><span class="hljs-built_in">byte</span>[] pdb = res1.bytes;<br><br>MemoryStream fs = <span class="hljs-keyword">new</span> MemoryStream(dll)<br>MemoryStream p = <span class="hljs-keyword">new</span> MemoryStream(pdb)<br><br>appdomain.LoadAssembly(fs, p, <span class="hljs-keyword">new</span> ILRuntime.Mono.Cecil.Pdb.PdbReaderProvider());<br><br></code></pre></td></tr></table></figure><p>关键在 从MONO中加载模块这里， 内部采用了寄存器解释代码，此处不在加以深入。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">LoadAssembly</span>(<span class="hljs-params">System.IO.Stream stream, System.IO.Stream symbol, ISymbolReaderProvider symbolReader</span>)</span>&#123;<br><span class="hljs-keyword">var</span> module = ModuleDefinition.ReadModule(stream); <span class="hljs-comment">//从MONO中加载模块</span><br>...<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="常见的下载dll文件方案"><a href="#常见的下载dll文件方案" class="headerlink" title="常见的下载dll文件方案"></a>常见的下载dll文件方案</h4><p>通过addressable的热更方案，将dll文件放在热更服务器上，通过addressable 检查更新</p>]]></content>
    
    
    <categories>
      
      <category>Game</category>
      
      <category>框架分析</category>
      
      <category>IlRuntime</category>
      
    </categories>
    
    
    <tags>
      
      <tag>article</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Addressable</title>
    <link href="/2022/09/07/Addressable/"/>
    <url>/2022/09/07/Addressable/</url>
    
    <content type="html"><![CDATA[<h2 id="Addressable"><a href="#Addressable" class="headerlink" title="Addressable"></a>Addressable</h2><blockquote><p>Addressable 是一个很好用的资源管理框架。<br>比起之前的资源管理，它提供了在哪儿都可以引用到资源的功能，甚至能够引用到网络上的资源进行热更新。</p></blockquote><h3 id="Addressable的使用"><a href="#Addressable的使用" class="headerlink" title="Addressable的使用"></a>Addressable的使用</h3><ol><li>创建资源组<ol><li>在addressable 的菜单下打开group，并且创建setting asset文件。</li><li>随后可以在该group中 创建自己的group， 每一个group 相当于一个ab包</li></ol></li><li>资源加入资源组<ol><li>资源可以直接拖进某个group组中。</li></ol></li><li>打包资源<ol><li>打包资源分为本地的打包和远程的打包，设置在该资源组的 assets 文件中，设置成remote即远程打包，local则为本地打包。</li><li>本地打包的资源在 libary&#x2F;com.addressable&#x2F;aa&#x2F; 文件中， 远程打包则在项目根目录下的 ServerData目录下</li><li>打包还可以打补丁包，通常为远程打包而准备，这个时候需要设置 addressableSettings.asset 文件勾选上 build remote catalog， 勾选后则会创建一个更新列表文件，用于检查热更的。</li></ol></li><li>加载资源<ol><li>加载资源可以调用 LoadAsync 方法, 该方法返回一个AsyncHandler，通常需要使用UniTask进行封装随后等待其完成。路径是 group的名字加上文件名，另外，文件名需要改成简称，否则就需要加很多前缀上去。</li><li>对于预制体文件，还提供了直接生成预制体的方法。</li><li>因为加载资源并不分是网络资源还是本地资源，如果是网络资源则会到服务器进行哈希比对并进行资源更新。</li></ol></li></ol><h3 id="代码层面的上述步骤："><a href="#代码层面的上述步骤：" class="headerlink" title="代码层面的上述步骤："></a>代码层面的上述步骤：</h3><ol><li><p>创建资源组</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-comment">// 如果没有settings且参数为true 文件则进行创建</span><br><span class="hljs-keyword">var</span> settings = AddressableAssetSettingsDefaultObject.GetSettings(<span class="hljs-literal">true</span>)<br><span class="hljs-comment">// 内部实现：</span><br><span class="hljs-keyword">if</span> (AddressableAssetSettingsDefaultObject.Settings == <span class="hljs-literal">null</span>)  <br>&#123;  <br>AddressableAssetSettingsDefaultObject.Settings = AddressableAssetSettings.Create(<br>AddressableAssetSettingsDefaultObject.kDefaultConfigFolder,<br>AddressableAssetSettingsDefaultObject.kDefaultConfigAssetName,<br><span class="hljs-literal">true</span>,<br><span class="hljs-literal">true</span>);  <br><span class="hljs-keyword">return</span> AddressableAssetSettingsDefaultObject.Settings;<br>&#125;<br><span class="hljs-comment">//参数说明 组名，设置默认组，只可读，发送修改事件，用于复制的schema原型 ，类型</span><br><span class="hljs-comment">// 默认情况下像下面这样即可创建组。</span><br>AddressableAssetGroupTemplate groupTemplate = settings.GetGroupTemplateObject(<span class="hljs-number">0</span>) <span class="hljs-keyword">as</span> AddressableAssetGroupTemplate;<br><span class="hljs-keyword">var</span> cus_group = settings.CreateGroup(<span class="hljs-string">&quot;groupName&quot;</span>,<span class="hljs-literal">false</span>,<span class="hljs-literal">false</span>,<span class="hljs-literal">false</span>,<span class="hljs-literal">null</span>,groupTemplate.getTypes())<br></code></pre></td></tr></table></figure></li><li><p>资源加入资源组</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">var</span> settings = AddressableAssetSettingsDefaultObject.GetSettings(<span class="hljs-literal">true</span>);<br><span class="hljs-keyword">var</span> cus_group = settings.FindGroup(<span class="hljs-string">&quot;groupName&quot;</span>);<br><span class="hljs-built_in">string</span> guid = AssetDatabase.AssetPathToGUID(<span class="hljs-string">&quot;assetPath&quot;</span>);<br><span class="hljs-comment">// 这个entity 代表的就是一个group里面的某个 资源引用</span><br><span class="hljs-keyword">var</span> entity = settings.CreateOrMoveEntry(guid,cus_group);<br><span class="hljs-comment">// 组里面设置路径地址 和 Label</span><br>entity.SetAddress(<span class="hljs-string">&quot;assetPath&quot;</span>);<br>entity.SetLabel(<span class="hljs-string">&quot;LabelName&quot;</span>,<span class="hljs-literal">true</span>,<span class="hljs-literal">true</span>);<br><br></code></pre></td></tr></table></figure></li><li><p>进行打包</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-comment">// 根据平台上设置的 playmode进行打包 相当于 build default 那个按钮</span><br>AddressableAssetSettings.BuildPlayerContent();<br></code></pre></td></tr></table></figure></li></ol><h2 id="Addressable深入理解"><a href="#Addressable深入理解" class="headerlink" title="Addressable深入理解"></a>Addressable深入理解</h2><p>Addressable框架本质上是对原有的AssetBundle系统进行了一层封装，解决了原来的AssetBunndle系统令人头疼的资源定位问题，这种资源可以是放在网上，也可以是放在本地。关于资源加载逻辑<a href="#">Post not found: = Addressable 的加载资源原理</a>。</p>]]></content>
    
    
    <categories>
      
      <category>Game</category>
      
      <category>框架分析</category>
      
      <category>Addressable</category>
      
    </categories>
    
    
    <tags>
      
      <tag>article</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>UnityIAP</title>
    <link href="/2022/07/28/UnityIAP/"/>
    <url>/2022/07/28/UnityIAP/</url>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Unity IAP系统是一个内购插件，由Unity官方开发，目前支持Google,Amazon,IOS和Unity Distribution Portal 平台。平台的切换无需额外编写代码，只需要在编辑器窗口上选择切换的平台即可。</p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>开发者关注的类对象是一个实现<code>IStoreListener</code>接口的自定义对象。<br>该对象能够接受内购按钮的事件，并能够调用内购的方法，主要是购买，restore，查询等。相当于中心管理内购的类。<br>该对象使用的一般流程如下：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">MyIapStoreListener</span>:<span class="hljs-title">IStoreListener</span> &#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">MyIapStoreListener</span>()</span>&#123;<br><span class="hljs-comment">// 必须先初始化</span><br><span class="hljs-comment">//这个是默认的模块，规定了当前平台等信息</span><br>StandardPurchasingModule module = StandardPurchasingModule.Instance();<br><span class="hljs-comment">//这个提供了部分供开发者使用的公共配置，并保留上面的模块</span><br>ConfigurationBuilder builder = ConfigurationBuilder.Instance(module);<br><span class="hljs-comment">// 调用UnityPurchasing 初始化方法进行初始化，传入builder 和 当前的listener</span><br>UnityPurchasing.Initialize(instance, builder);<br>&#125;<br><span class="hljs-comment">// 下面四个方法是覆盖的IstoreListener的方法，主要是初始化的回调。以及购买的回调。</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">OnInitializeFailed</span>(<span class="hljs-params">InitializationFailureReason error</span>)</span>;<br><span class="hljs-function">PurchaseProcessingResult <span class="hljs-title">ProcessPurchase</span>(<span class="hljs-params">PurchaseEventArgs purchaseEvent</span>)</span>&#123;<br><span class="hljs-comment">//购买行为完毕后，会出现的回调情况</span><br>PurchaseProcessingResult result;  <br><span class="hljs-comment">// if any receiver consumed this purchase we return the status  </span><br><span class="hljs-built_in">bool</span> consumePurchase = <span class="hljs-literal">false</span>;  <br><span class="hljs-built_in">bool</span> resultProcessed = <span class="hljs-literal">false</span>;  <br><span class="hljs-keyword">foreach</span> (IAPButtonEx button <span class="hljs-keyword">in</span> activeButtons)  <br>&#123;  <br>    <span class="hljs-keyword">if</span> (button.productId == e.purchasedProduct.definition.id)  <br>    &#123;        <br>    result = button.ProcessPurchase(e);  <br>        <span class="hljs-keyword">if</span> (result == PurchaseProcessingResult.Complete)  <br>        &#123;<br>consumePurchase = <span class="hljs-literal">true</span>;  <br>        &#125;  <br>        resultProcessed = <span class="hljs-literal">true</span>;  <br>    &#125;<br>&#125;  <br><span class="hljs-keyword">foreach</span> (IAPListener listener <span class="hljs-keyword">in</span> activeListeners)  <br>&#123;  <br>    result = listener.ProcessPurchase(e);  <br>    <span class="hljs-keyword">if</span> (result == PurchaseProcessingResult.Complete)  <br>    &#123;        <br>    consumePurchase = <span class="hljs-literal">true</span>;  <br>    &#125;  <br>    resultProcessed = <span class="hljs-literal">true</span>;  <br>&#125;  <br><span class="hljs-keyword">return</span> (consumePurchase) ? PurchaseProcessingResult.Complete : PurchaseProcessingResult.Pending;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">OnPurchaseFailed</span>(<span class="hljs-params">Product product, PurchaseFailureReason failureReason</span>)</span>;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">OnInitialized</span>(<span class="hljs-params">IStoreController controller, IExtensionProvider extensions</span>)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>如果购买成功或者购买失败了，可以通过该类将事件分发至具体的某个Item上，执行其具体的行为。</p><h2 id="源码解析"><a href="#源码解析" class="headerlink" title="源码解析"></a>源码解析</h2><h3 id="流程解析"><a href="#流程解析" class="headerlink" title="流程解析"></a>流程解析</h3><ol><li>生成module<br>  默认生成的module是标准module，同时也可以生成自己创建的module。 module 可以用来注册商店，生成一些IAP的默认的一些配置等等。</li><li>构建ConfigurationBuilder(module)<br> 该Builder 接收上面生成的module，作为其中的factory实例，该类还负责一些其他的公共配置，例如是否使用本地的商品列表。</li><li>进行初始化Purchasing Manager<br> 初始化会将刚刚生成的builder 实例拿来创建一个 PurchaseManager实例， 创建该实例的时候会将其中的product 等信息传入到Manager中去， PurchaseManager 也是负责直接调用 各类商店（谷歌商店，Appstore等）方法的类，同时也是直接接收这些商店传回回调的类。<figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-comment">// IStoreListener 中执行将本身和builder 传入</span><br>UnityPurchasing.Initialize(instance, builder);<br><br><span class="hljs-comment">// UnityPurchasing</span><br><span class="hljs-function"><span class="hljs-keyword">internal</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Initialize</span>(<span class="hljs-params">IStoreListener listener, ConfigurationBuilder builder,  </span></span><br><span class="hljs-params"><span class="hljs-function">         ILogger logger, <span class="hljs-built_in">string</span> persistentDatapath, IUnityAnalytics analytics, ICatalogProvider catalog</span>)</span>  <br>     &#123;  <br>        <span class="hljs-keyword">var</span> transactionLog = <span class="hljs-keyword">new</span> TransactionLog(logger, persistentDatapath);  <br>        <span class="hljs-comment">// 生成 PurchaseingManager</span><br><span class="hljs-keyword">var</span> manager = <span class="hljs-keyword">new</span> PurchasingManager(transactionLog, logger, builder.factory.service, builder.factory.storeName);  <br>         <span class="hljs-keyword">var</span> analyticsReporter = <span class="hljs-keyword">new</span> AnalyticsReporter(analytics);  <br>  <br>         <span class="hljs-comment">// Proxy the PurchasingManager&#x27;s callback interface to forward Transactions to Analytics.  </span><br>         <span class="hljs-keyword">var</span> proxy = <span class="hljs-keyword">new</span> StoreListenerProxy(listener, analyticsReporter, builder.factory);  <br>FetchAndMergeProducts(builder.useCatalogProvider, builder.products, catalog, response =&gt;  <br>             &#123;  <br>                 manager.Initialize(proxy, response);  <br>             &#125;);     &#125;<br></code></pre></td></tr></table></figure></li><li>初始化StoreListener的方法<br> 开发者通过StoreListener 间接控制购买流程，因此需要将PurchasingManager的结果反馈和操作方法都提供给 StoreListener<figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-comment">// PurchasingManager</span><br><span class="hljs-comment">// 如果其他的流程都没出问题 则将本身传到StoreListener中去</span><br>m_Listener.OnInitialized(<span class="hljs-keyword">this</span>);<br><br><span class="hljs-comment">// StoreListener</span><br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">OnInitialized</span>(<span class="hljs-params">IStoreController controller, IExtensionProvider extensions</span>)</span>  <br>&#123;  <br>    initializationComplete = <span class="hljs-literal">true</span>;  <br><span class="hljs-comment">//通过该对象即可调用 购买等逻辑</span><br><span class="hljs-keyword">this</span>.controller = controller;  <br>&#125;<br><span class="hljs-comment">// 购买</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">InitiatePurchase</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> productID</span>)</span>&#123;<br>controller.InitiatePurchase(productID);<br>&#125;<br><span class="hljs-comment">//处理购买逻辑</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> PurchaseProcessingResult <span class="hljs-title">ProcessPurchase</span>(<span class="hljs-params">PurchaseEventArgs e</span>)</span>  <br>&#123;<br><br>&#125;<br><br></code></pre></td></tr></table></figure></li></ol><h3 id="自定义的商店"><a href="#自定义的商店" class="headerlink" title="自定义的商店"></a>自定义的商店</h3><p>通过构建 自定义Module 则可以通过module选择自定义的商店。</p><ol><li>构建自定义Module<figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">MyCusPurchasingModule</span> : <span class="hljs-title">AbstractPurchasingModule</span>  <br>&#123;  <br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> MyCusPurchasingModule _instance;  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> MyCusPurchasingModule Instance  <br>    &#123;  <br>        <span class="hljs-keyword">get</span>  <br>        &#123;  <br>            <span class="hljs-keyword">if</span> (_instance == <span class="hljs-literal">null</span>)  <br>            &#123;                <br>        _instance = <span class="hljs-keyword">new</span> MyCusPurchasingModule();  <br>        <br>            &#125;            <br>            <span class="hljs-keyword">return</span> _instance;  <br>        &#125;    <br>    &#125;<br>    <span class="hljs-comment">// 需要覆盖该方法，对商店进行注册</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">override</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Configure</span>()</span>  <br>    &#123;        <br>    RegisterStore(<span class="hljs-string">&quot;AppGallery&quot;</span>, InstantiateMyCusStore());  <br>    &#125;  <br>    <span class="hljs-function"><span class="hljs-keyword">private</span> IStore <span class="hljs-title">InstantiateMyCusStore</span>()</span>  <br>    &#123;        <br>    <span class="hljs-keyword">if</span> (Application.platform == RuntimePlatform.Android)  <br>        &#123;            <br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> MyCusStore();  <br>        &#125;        <br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;  <br>    &#125;<br>    &#125;<br><br></code></pre></td></tr></table></figure></li><li>构建自定义的商店<figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">MyStore</span> : <span class="hljs-title">IStore</span>&#123;<br><span class="hljs-keyword">private</span> IStoreCallback callback; <br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Initialize</span> (<span class="hljs-params">IStoreCallback callback</span>)</span> &#123; <br><span class="hljs-keyword">this</span>.callback = callback; <br>&#125; <br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">RetrieveProducts</span> (<span class="hljs-params">ReadOnlyCollection&lt;ProductDefinition&gt; products</span>)</span> &#123; <br><span class="hljs-comment">// 获取商品信息 的元数据 以及 所有权状态</span><br><span class="hljs-comment">// 调用PurcasingManager中的 OnRetrieve 方法。而只有调用了这个方法，实现IStoreListener</span><br><span class="hljs-comment">// 的类才能初始化成功</span><br>callback.OnProductsRetrieved(); <br><span class="hljs-comment">// 如果不想要调用该方法则调用</span><br>callback.OnSetupFailed(InitializationFailureReason)<br>&#125; <br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Purchase</span> (<span class="hljs-params">ProductDefinition product, <span class="hljs-built_in">string</span> developerPayload</span>)</span> &#123; <br><span class="hljs-comment">// 启动购买流程并调用 购买成功或者失败的回调</span><br>callback.OnPurchaseSucceeded() <br>callback.OnPurchaseFailed() <br>&#125; <br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">FinishTransaction</span> (<span class="hljs-params">UnityEngine.Purchasing.ProductDefinition product, <span class="hljs-built_in">string</span> transactionId</span>)</span> &#123; <br><span class="hljs-comment">// 执行与交易相关的内务处理 </span><br><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li>使用方法<br> 通过创建自定义的Module 和 Istore ，初始化内购系统。<br> 就可以通过后续的controller 来简介控制自定义的store方法。<figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">class</span> <span class="hljs-title">MyStoreListener</span> : <span class="hljs-title">IStoreListener</span>&#123;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">MyStoreListener</span>()</span>&#123;<br><span class="hljs-comment">//这个是默认的模块，规定了当前平台等信息</span><br>StandardPurchasingModule module = StandardPurchasingModule.Instance();<br><span class="hljs-comment">// 自定义module</span><br>MyCusPurchasingModule cusModule = MyCusPurchasingModule.Instance;<br><span class="hljs-comment">// 这里注册的时候可以传入多个module，自定义module 放在前面覆盖后面的配置。</span><br>ConfigurationBuilder builder = ConfigurationBuilder.Instance(cusModule,module);<br><span class="hljs-comment">// 调用UnityPurchasing 初始化方法进行初始化，传入builder 和 当前的listener</span><br>UnityPurchasing.Initialize(instance, builder);<br>&#125;<br>&#125;<br><br><br><br></code></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    <categories>
      
      <category>Game</category>
      
      <category>框架分析</category>
      
      <category>UnityIAP</category>
      
    </categories>
    
    
    <tags>
      
      <tag>article</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
